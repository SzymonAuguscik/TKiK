# Generated from Graphly.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\67")
        buf.write("\u0145\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\3\2\3\2\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\36\3\36\3\37")
        buf.write("\3\37\3 \3 \3!\3!\3\"\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&")
        buf.write("\3&\3&\3\'\3\'\3\'\3\'\7\'\u0116\n\'\f\'\16\'\u0119\13")
        buf.write("\'\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3")
        buf.write("/\3/\3\60\3\60\3\61\3\61\3\61\3\62\3\62\3\62\3\63\3\63")
        buf.write("\6\63\u0137\n\63\r\63\16\63\u0138\3\64\3\64\3\65\3\65")
        buf.write("\3\66\3\66\7\66\u0141\n\66\f\66\16\66\u0144\13\66\2\2")
        buf.write("\67\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r")
        buf.write("\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30")
        buf.write("/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'")
        buf.write("M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67\3\2\b")
        buf.write("\4\2\13\f\"\"\4\2\f\f\17\17\3\2c|\3\2\62;\3\2C\\\6\2\62")
        buf.write(";C\\aac|\2\u0147\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2")
        buf.write("\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21")
        buf.write("\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3")
        buf.write("\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2")
        buf.write("\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2")
        buf.write("\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2")
        buf.write("\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2")
        buf.write("\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3")
        buf.write("\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q")
        buf.write("\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2")
        buf.write("[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2")
        buf.write("\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\3m\3\2\2")
        buf.write("\2\5o\3\2\2\2\7t\3\2\2\2\tz\3\2\2\2\13\u0080\3\2\2\2\r")
        buf.write("\u0085\3\2\2\2\17\u008a\3\2\2\2\21\u008e\3\2\2\2\23\u0094")
        buf.write("\3\2\2\2\25\u0099\3\2\2\2\27\u009f\3\2\2\2\31\u00a1\3")
        buf.write("\2\2\2\33\u00a3\3\2\2\2\35\u00ab\3\2\2\2\37\u00b2\3\2")
        buf.write("\2\2!\u00ba\3\2\2\2#\u00c0\3\2\2\2%\u00c2\3\2\2\2\'\u00c4")
        buf.write("\3\2\2\2)\u00c8\3\2\2\2+\u00d1\3\2\2\2-\u00d8\3\2\2\2")
        buf.write("/\u00dd\3\2\2\2\61\u00e2\3\2\2\2\63\u00e7\3\2\2\2\65\u00ed")
        buf.write("\3\2\2\2\67\u00f4\3\2\2\29\u00fa\3\2\2\2;\u00fc\3\2\2")
        buf.write("\2=\u00fe\3\2\2\2?\u0100\3\2\2\2A\u0102\3\2\2\2C\u0104")
        buf.write("\3\2\2\2E\u0107\3\2\2\2G\u0109\3\2\2\2I\u010b\3\2\2\2")
        buf.write("K\u010d\3\2\2\2M\u0111\3\2\2\2O\u011c\3\2\2\2Q\u011e\3")
        buf.write("\2\2\2S\u0120\3\2\2\2U\u0122\3\2\2\2W\u0124\3\2\2\2Y\u0126")
        buf.write("\3\2\2\2[\u0128\3\2\2\2]\u012a\3\2\2\2_\u012c\3\2\2\2")
        buf.write("a\u012e\3\2\2\2c\u0131\3\2\2\2e\u0134\3\2\2\2g\u013a\3")
        buf.write("\2\2\2i\u013c\3\2\2\2k\u013e\3\2\2\2mn\7\f\2\2n\4\3\2")
        buf.write("\2\2op\7n\2\2pq\7q\2\2qr\7q\2\2rs\7r\2\2s\6\3\2\2\2tu")
        buf.write("\7u\2\2uv\7v\2\2vw\7c\2\2wx\7t\2\2xy\7v\2\2y\b\3\2\2\2")
        buf.write("z{\7w\2\2{|\7p\2\2|}\7v\2\2}~\7k\2\2~\177\7n\2\2\177\n")
        buf.write("\3\2\2\2\u0080\u0081\7u\2\2\u0081\u0082\7v\2\2\u0082\u0083")
        buf.write("\7g\2\2\u0083\u0084\7r\2\2\u0084\f\3\2\2\2\u0085\u0086")
        buf.write("\7v\2\2\u0086\u0087\7j\2\2\u0087\u0088\7g\2\2\u0088\u0089")
        buf.write("\7p\2\2\u0089\16\3\2\2\2\u008a\u008b\7g\2\2\u008b\u008c")
        buf.write("\7p\2\2\u008c\u008d\7f\2\2\u008d\20\3\2\2\2\u008e\u008f")
        buf.write("\7e\2\2\u008f\u0090\7j\2\2\u0090\u0091\7g\2\2\u0091\u0092")
        buf.write("\7e\2\2\u0092\u0093\7m\2\2\u0093\22\3\2\2\2\u0094\u0095")
        buf.write("\7g\2\2\u0095\u0096\7n\2\2\u0096\u0097\7u\2\2\u0097\u0098")
        buf.write("\7g\2\2\u0098\24\3\2\2\2\u0099\u009a\7r\2\2\u009a\u009b")
        buf.write("\7q\2\2\u009b\u009c\7k\2\2\u009c\u009d\7p\2\2\u009d\u009e")
        buf.write("\7v\2\2\u009e\26\3\2\2\2\u009f\u00a0\7<\2\2\u00a0\30\3")
        buf.write("\2\2\2\u00a1\u00a2\7.\2\2\u00a2\32\3\2\2\2\u00a3\u00a4")
        buf.write("\7u\2\2\u00a4\u00a5\7g\2\2\u00a5\u00a6\7i\2\2\u00a6\u00a7")
        buf.write("\7o\2\2\u00a7\u00a8\7g\2\2\u00a8\u00a9\7p\2\2\u00a9\u00aa")
        buf.write("\7v\2\2\u00aa\34\3\2\2\2\u00ab\u00ac\7e\2\2\u00ac\u00ad")
        buf.write("\7k\2\2\u00ad\u00ae\7t\2\2\u00ae\u00af\7e\2\2\u00af\u00b0")
        buf.write("\7n\2\2\u00b0\u00b1\7g\2\2\u00b1\36\3\2\2\2\u00b2\u00b3")
        buf.write("\7r\2\2\u00b3\u00b4\7q\2\2\u00b4\u00b5\7n\2\2\u00b5\u00b6")
        buf.write("\7{\2\2\u00b6\u00b7\7i\2\2\u00b7\u00b8\7q\2\2\u00b8\u00b9")
        buf.write("\7p\2\2\u00b9 \3\2\2\2\u00ba\u00bb\7i\2\2\u00bb\u00bc")
        buf.write("\7t\2\2\u00bc\u00bd\7q\2\2\u00bd\u00be\7w\2\2\u00be\u00bf")
        buf.write("\7r\2\2\u00bf\"\3\2\2\2\u00c0\u00c1\7]\2\2\u00c1$\3\2")
        buf.write("\2\2\u00c2\u00c3\7_\2\2\u00c3&\3\2\2\2\u00c4\u00c5\7p")
        buf.write("\2\2\u00c5\u00c6\7w\2\2\u00c6\u00c7\7o\2\2\u00c7(\3\2")
        buf.write("\2\2\u00c8\u00c9\7k\2\2\u00c9\u00ca\7v\2\2\u00ca\u00cb")
        buf.write("\7g\2\2\u00cb\u00cc\7t\2\2\u00cc\u00cd\7c\2\2\u00cd\u00ce")
        buf.write("\7v\2\2\u00ce\u00cf\7q\2\2\u00cf\u00d0\7t\2\2\u00d0*\3")
        buf.write("\2\2\2\u00d1\u00d2\7e\2\2\u00d2\u00d3\7c\2\2\u00d3\u00d4")
        buf.write("\7p\2\2\u00d4\u00d5\7x\2\2\u00d5\u00d6\7c\2\2\u00d6\u00d7")
        buf.write("\7u\2\2\u00d7,\3\2\2\2\u00d8\u00d9\7f\2\2\u00d9\u00da")
        buf.write("\7t\2\2\u00da\u00db\7c\2\2\u00db\u00dc\7y\2\2\u00dc.\3")
        buf.write("\2\2\2\u00dd\u00de\7h\2\2\u00de\u00df\7k\2\2\u00df\u00e0")
        buf.write("\7n\2\2\u00e0\u00e1\7n\2\2\u00e1\60\3\2\2\2\u00e2\u00e3")
        buf.write("\7o\2\2\u00e3\u00e4\7q\2\2\u00e4\u00e5\7x\2\2\u00e5\u00e6")
        buf.write("\7g\2\2\u00e6\62\3\2\2\2\u00e7\u00e8\7r\2\2\u00e8\u00e9")
        buf.write("\7n\2\2\u00e9\u00ea\7c\2\2\u00ea\u00eb\7e\2\2\u00eb\u00ec")
        buf.write("\7g\2\2\u00ec\64\3\2\2\2\u00ed\u00ee\7t\2\2\u00ee\u00ef")
        buf.write("\7q\2\2\u00ef\u00f0\7v\2\2\u00f0\u00f1\7c\2\2\u00f1\u00f2")
        buf.write("\7v\2\2\u00f2\u00f3\7g\2\2\u00f3\66\3\2\2\2\u00f4\u00f5")
        buf.write("\7u\2\2\u00f5\u00f6\7e\2\2\u00f6\u00f7\7c\2\2\u00f7\u00f8")
        buf.write("\7n\2\2\u00f8\u00f9\7g\2\2\u00f98\3\2\2\2\u00fa\u00fb")
        buf.write("\7*\2\2\u00fb:\3\2\2\2\u00fc\u00fd\7+\2\2\u00fd<\3\2\2")
        buf.write("\2\u00fe\u00ff\7`\2\2\u00ff>\3\2\2\2\u0100\u0101\7a\2")
        buf.write("\2\u0101@\3\2\2\2\u0102\u0103\7\u0080\2\2\u0103B\3\2\2")
        buf.write("\2\u0104\u0105\7#\2\2\u0105\u0106\7?\2\2\u0106D\3\2\2")
        buf.write("\2\u0107\u0108\7(\2\2\u0108F\3\2\2\2\u0109\u010a\7~\2")
        buf.write("\2\u010aH\3\2\2\2\u010b\u010c\t\2\2\2\u010cJ\3\2\2\2\u010d")
        buf.write("\u010e\7\17\2\2\u010e\u010f\3\2\2\2\u010f\u0110\b&\2\2")
        buf.write("\u0110L\3\2\2\2\u0111\u0112\7/\2\2\u0112\u0113\7/\2\2")
        buf.write("\u0113\u0117\3\2\2\2\u0114\u0116\n\3\2\2\u0115\u0114\3")
        buf.write("\2\2\2\u0116\u0119\3\2\2\2\u0117\u0115\3\2\2\2\u0117\u0118")
        buf.write("\3\2\2\2\u0118\u011a\3\2\2\2\u0119\u0117\3\2\2\2\u011a")
        buf.write("\u011b\b\'\2\2\u011bN\3\2\2\2\u011c\u011d\7-\2\2\u011d")
        buf.write("P\3\2\2\2\u011e\u011f\7/\2\2\u011fR\3\2\2\2\u0120\u0121")
        buf.write("\7,\2\2\u0121T\3\2\2\2\u0122\u0123\7\61\2\2\u0123V\3\2")
        buf.write("\2\2\u0124\u0125\7\'\2\2\u0125X\3\2\2\2\u0126\u0127\7")
        buf.write("#\2\2\u0127Z\3\2\2\2\u0128\u0129\7?\2\2\u0129\\\3\2\2")
        buf.write("\2\u012a\u012b\7@\2\2\u012b^\3\2\2\2\u012c\u012d\7>\2")
        buf.write("\2\u012d`\3\2\2\2\u012e\u012f\7@\2\2\u012f\u0130\7?\2")
        buf.write("\2\u0130b\3\2\2\2\u0131\u0132\7>\2\2\u0132\u0133\7?\2")
        buf.write("\2\u0133d\3\2\2\2\u0134\u0136\7%\2\2\u0135\u0137\t\4\2")
        buf.write("\2\u0136\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0136")
        buf.write("\3\2\2\2\u0138\u0139\3\2\2\2\u0139f\3\2\2\2\u013a\u013b")
        buf.write("\7\60\2\2\u013bh\3\2\2\2\u013c\u013d\t\5\2\2\u013dj\3")
        buf.write("\2\2\2\u013e\u0142\t\6\2\2\u013f\u0141\t\7\2\2\u0140\u013f")
        buf.write("\3\2\2\2\u0141\u0144\3\2\2\2\u0142\u0140\3\2\2\2\u0142")
        buf.write("\u0143\3\2\2\2\u0143l\3\2\2\2\u0144\u0142\3\2\2\2\6\2")
        buf.write("\u0117\u0138\u0142\3\b\2\2")
        return buf.getvalue()


class GraphlyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    WS = 36
    CR = 37
    COM_SIGN = 38
    PLUS = 39
    MINUS = 40
    MULTIPLICATION = 41
    DIVISION = 42
    MODULO = 43
    NEG = 44
    EQ = 45
    GREATER = 46
    LOWER = 47
    GT = 48
    LT = 49
    COLOR = 50
    DOT = 51
    DIGIT = 52
    NAME = 53

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\n'", "'loop'", "'start'", "'until'", "'step'", "'then'", 
            "'end'", "'check'", "'else'", "'point'", "':'", "','", "'segment'", 
            "'circle'", "'polygon'", "'group'", "'['", "']'", "'num'", "'iterator'", 
            "'canvas'", "'draw'", "'fill'", "'move'", "'place'", "'rotate'", 
            "'scale'", "'('", "')'", "'^'", "'_'", "'~'", "'!='", "'&'", 
            "'|'", "'\r'", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'='", 
            "'>'", "'<'", "'>='", "'<='", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "CR", "COM_SIGN", "PLUS", "MINUS", "MULTIPLICATION", "DIVISION", 
            "MODULO", "NEG", "EQ", "GREATER", "LOWER", "GT", "LT", "COLOR", 
            "DOT", "DIGIT", "NAME" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "WS", "CR", "COM_SIGN", "PLUS", 
                  "MINUS", "MULTIPLICATION", "DIVISION", "MODULO", "NEG", 
                  "EQ", "GREATER", "LOWER", "GT", "LT", "COLOR", "DOT", 
                  "DIGIT", "NAME" ]

    grammarFileName = "Graphly.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


