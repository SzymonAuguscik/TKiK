# Generated from Graphly.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\64")
        buf.write("\u0139\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\3\2")
        buf.write("\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3")
        buf.write("\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\r\3")
        buf.write("\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\23")
        buf.write("\3\23\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\35\3\35\3\36\3\36\3\37\3\37\3\37\3 \3 \3!\3!\3\"\3")
        buf.write("\"\3#\3#\3#\3#\3$\3$\3$\3$\7$\u010a\n$\f$\16$\u010d\13")
        buf.write("$\3$\3$\3%\3%\3&\3&\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3")
        buf.write(",\3,\3-\3-\3.\3.\3.\3/\3/\3/\3\60\3\60\6\60\u012b\n\60")
        buf.write("\r\60\16\60\u012c\3\61\3\61\3\62\3\62\3\63\3\63\7\63\u0135")
        buf.write("\n\63\f\63\16\63\u0138\13\63\2\2\64\3\3\5\4\7\5\t\6\13")
        buf.write("\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37")
        buf.write("\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34")
        buf.write("\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_")
        buf.write("\61a\62c\63e\64\3\2\b\4\2\13\f\"\"\4\2\f\f\17\17\3\2c")
        buf.write("|\3\2\62;\3\2C\\\6\2\62;C\\aac|\2\u013b\2\3\3\2\2\2\2")
        buf.write("\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3")
        buf.write("\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2")
        buf.write("\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2")
        buf.write("\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3")
        buf.write("\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61")
        buf.write("\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2")
        buf.write("\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3")
        buf.write("\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M")
        buf.write("\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2")
        buf.write("W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2")
        buf.write("\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\3g\3\2\2\2\5i\3\2\2")
        buf.write("\2\7n\3\2\2\2\tt\3\2\2\2\13z\3\2\2\2\r\177\3\2\2\2\17")
        buf.write("\u0084\3\2\2\2\21\u0088\3\2\2\2\23\u008e\3\2\2\2\25\u0093")
        buf.write("\3\2\2\2\27\u0099\3\2\2\2\31\u009b\3\2\2\2\33\u009d\3")
        buf.write("\2\2\2\35\u00a5\3\2\2\2\37\u00ac\3\2\2\2!\u00b4\3\2\2")
        buf.write("\2#\u00ba\3\2\2\2%\u00bc\3\2\2\2\'\u00be\3\2\2\2)\u00c2")
        buf.write("\3\2\2\2+\u00cb\3\2\2\2-\u00d2\3\2\2\2/\u00d7\3\2\2\2")
        buf.write("\61\u00dc\3\2\2\2\63\u00e1\3\2\2\2\65\u00e7\3\2\2\2\67")
        buf.write("\u00ee\3\2\2\29\u00f4\3\2\2\2;\u00f6\3\2\2\2=\u00f8\3")
        buf.write("\2\2\2?\u00fb\3\2\2\2A\u00fd\3\2\2\2C\u00ff\3\2\2\2E\u0101")
        buf.write("\3\2\2\2G\u0105\3\2\2\2I\u0110\3\2\2\2K\u0112\3\2\2\2")
        buf.write("M\u0114\3\2\2\2O\u0116\3\2\2\2Q\u0118\3\2\2\2S\u011a\3")
        buf.write("\2\2\2U\u011c\3\2\2\2W\u011e\3\2\2\2Y\u0120\3\2\2\2[\u0122")
        buf.write("\3\2\2\2]\u0125\3\2\2\2_\u0128\3\2\2\2a\u012e\3\2\2\2")
        buf.write("c\u0130\3\2\2\2e\u0132\3\2\2\2gh\7\f\2\2h\4\3\2\2\2ij")
        buf.write("\7n\2\2jk\7q\2\2kl\7q\2\2lm\7r\2\2m\6\3\2\2\2no\7u\2\2")
        buf.write("op\7v\2\2pq\7c\2\2qr\7t\2\2rs\7v\2\2s\b\3\2\2\2tu\7w\2")
        buf.write("\2uv\7p\2\2vw\7v\2\2wx\7k\2\2xy\7n\2\2y\n\3\2\2\2z{\7")
        buf.write("u\2\2{|\7v\2\2|}\7g\2\2}~\7r\2\2~\f\3\2\2\2\177\u0080")
        buf.write("\7v\2\2\u0080\u0081\7j\2\2\u0081\u0082\7g\2\2\u0082\u0083")
        buf.write("\7p\2\2\u0083\16\3\2\2\2\u0084\u0085\7g\2\2\u0085\u0086")
        buf.write("\7p\2\2\u0086\u0087\7f\2\2\u0087\20\3\2\2\2\u0088\u0089")
        buf.write("\7e\2\2\u0089\u008a\7j\2\2\u008a\u008b\7g\2\2\u008b\u008c")
        buf.write("\7e\2\2\u008c\u008d\7m\2\2\u008d\22\3\2\2\2\u008e\u008f")
        buf.write("\7g\2\2\u008f\u0090\7n\2\2\u0090\u0091\7u\2\2\u0091\u0092")
        buf.write("\7g\2\2\u0092\24\3\2\2\2\u0093\u0094\7r\2\2\u0094\u0095")
        buf.write("\7q\2\2\u0095\u0096\7k\2\2\u0096\u0097\7p\2\2\u0097\u0098")
        buf.write("\7v\2\2\u0098\26\3\2\2\2\u0099\u009a\7<\2\2\u009a\30\3")
        buf.write("\2\2\2\u009b\u009c\7.\2\2\u009c\32\3\2\2\2\u009d\u009e")
        buf.write("\7u\2\2\u009e\u009f\7g\2\2\u009f\u00a0\7i\2\2\u00a0\u00a1")
        buf.write("\7o\2\2\u00a1\u00a2\7g\2\2\u00a2\u00a3\7p\2\2\u00a3\u00a4")
        buf.write("\7v\2\2\u00a4\34\3\2\2\2\u00a5\u00a6\7e\2\2\u00a6\u00a7")
        buf.write("\7k\2\2\u00a7\u00a8\7t\2\2\u00a8\u00a9\7e\2\2\u00a9\u00aa")
        buf.write("\7n\2\2\u00aa\u00ab\7g\2\2\u00ab\36\3\2\2\2\u00ac\u00ad")
        buf.write("\7r\2\2\u00ad\u00ae\7q\2\2\u00ae\u00af\7n\2\2\u00af\u00b0")
        buf.write("\7{\2\2\u00b0\u00b1\7i\2\2\u00b1\u00b2\7q\2\2\u00b2\u00b3")
        buf.write("\7p\2\2\u00b3 \3\2\2\2\u00b4\u00b5\7i\2\2\u00b5\u00b6")
        buf.write("\7t\2\2\u00b6\u00b7\7q\2\2\u00b7\u00b8\7w\2\2\u00b8\u00b9")
        buf.write("\7r\2\2\u00b9\"\3\2\2\2\u00ba\u00bb\7]\2\2\u00bb$\3\2")
        buf.write("\2\2\u00bc\u00bd\7_\2\2\u00bd&\3\2\2\2\u00be\u00bf\7p")
        buf.write("\2\2\u00bf\u00c0\7w\2\2\u00c0\u00c1\7o\2\2\u00c1(\3\2")
        buf.write("\2\2\u00c2\u00c3\7k\2\2\u00c3\u00c4\7v\2\2\u00c4\u00c5")
        buf.write("\7g\2\2\u00c5\u00c6\7t\2\2\u00c6\u00c7\7c\2\2\u00c7\u00c8")
        buf.write("\7v\2\2\u00c8\u00c9\7q\2\2\u00c9\u00ca\7t\2\2\u00ca*\3")
        buf.write("\2\2\2\u00cb\u00cc\7e\2\2\u00cc\u00cd\7c\2\2\u00cd\u00ce")
        buf.write("\7p\2\2\u00ce\u00cf\7x\2\2\u00cf\u00d0\7c\2\2\u00d0\u00d1")
        buf.write("\7u\2\2\u00d1,\3\2\2\2\u00d2\u00d3\7f\2\2\u00d3\u00d4")
        buf.write("\7t\2\2\u00d4\u00d5\7c\2\2\u00d5\u00d6\7y\2\2\u00d6.\3")
        buf.write("\2\2\2\u00d7\u00d8\7h\2\2\u00d8\u00d9\7k\2\2\u00d9\u00da")
        buf.write("\7n\2\2\u00da\u00db\7n\2\2\u00db\60\3\2\2\2\u00dc\u00dd")
        buf.write("\7o\2\2\u00dd\u00de\7q\2\2\u00de\u00df\7x\2\2\u00df\u00e0")
        buf.write("\7g\2\2\u00e0\62\3\2\2\2\u00e1\u00e2\7r\2\2\u00e2\u00e3")
        buf.write("\7n\2\2\u00e3\u00e4\7c\2\2\u00e4\u00e5\7e\2\2\u00e5\u00e6")
        buf.write("\7g\2\2\u00e6\64\3\2\2\2\u00e7\u00e8\7t\2\2\u00e8\u00e9")
        buf.write("\7q\2\2\u00e9\u00ea\7v\2\2\u00ea\u00eb\7c\2\2\u00eb\u00ec")
        buf.write("\7v\2\2\u00ec\u00ed\7g\2\2\u00ed\66\3\2\2\2\u00ee\u00ef")
        buf.write("\7u\2\2\u00ef\u00f0\7e\2\2\u00f0\u00f1\7c\2\2\u00f1\u00f2")
        buf.write("\7n\2\2\u00f2\u00f3\7g\2\2\u00f38\3\2\2\2\u00f4\u00f5")
        buf.write("\7*\2\2\u00f5:\3\2\2\2\u00f6\u00f7\7+\2\2\u00f7<\3\2\2")
        buf.write("\2\u00f8\u00f9\7#\2\2\u00f9\u00fa\7?\2\2\u00fa>\3\2\2")
        buf.write("\2\u00fb\u00fc\7(\2\2\u00fc@\3\2\2\2\u00fd\u00fe\7~\2")
        buf.write("\2\u00feB\3\2\2\2\u00ff\u0100\t\2\2\2\u0100D\3\2\2\2\u0101")
        buf.write("\u0102\7\17\2\2\u0102\u0103\3\2\2\2\u0103\u0104\b#\2\2")
        buf.write("\u0104F\3\2\2\2\u0105\u0106\7/\2\2\u0106\u0107\7/\2\2")
        buf.write("\u0107\u010b\3\2\2\2\u0108\u010a\n\3\2\2\u0109\u0108\3")
        buf.write("\2\2\2\u010a\u010d\3\2\2\2\u010b\u0109\3\2\2\2\u010b\u010c")
        buf.write("\3\2\2\2\u010c\u010e\3\2\2\2\u010d\u010b\3\2\2\2\u010e")
        buf.write("\u010f\b$\2\2\u010fH\3\2\2\2\u0110\u0111\7-\2\2\u0111")
        buf.write("J\3\2\2\2\u0112\u0113\7/\2\2\u0113L\3\2\2\2\u0114\u0115")
        buf.write("\7,\2\2\u0115N\3\2\2\2\u0116\u0117\7\61\2\2\u0117P\3\2")
        buf.write("\2\2\u0118\u0119\7\'\2\2\u0119R\3\2\2\2\u011a\u011b\7")
        buf.write("#\2\2\u011bT\3\2\2\2\u011c\u011d\7?\2\2\u011dV\3\2\2\2")
        buf.write("\u011e\u011f\7@\2\2\u011fX\3\2\2\2\u0120\u0121\7>\2\2")
        buf.write("\u0121Z\3\2\2\2\u0122\u0123\7@\2\2\u0123\u0124\7?\2\2")
        buf.write("\u0124\\\3\2\2\2\u0125\u0126\7>\2\2\u0126\u0127\7?\2\2")
        buf.write("\u0127^\3\2\2\2\u0128\u012a\7%\2\2\u0129\u012b\t\4\2\2")
        buf.write("\u012a\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012a\3")
        buf.write("\2\2\2\u012c\u012d\3\2\2\2\u012d`\3\2\2\2\u012e\u012f")
        buf.write("\7\60\2\2\u012fb\3\2\2\2\u0130\u0131\t\5\2\2\u0131d\3")
        buf.write("\2\2\2\u0132\u0136\t\6\2\2\u0133\u0135\t\7\2\2\u0134\u0133")
        buf.write("\3\2\2\2\u0135\u0138\3\2\2\2\u0136\u0134\3\2\2\2\u0136")
        buf.write("\u0137\3\2\2\2\u0137f\3\2\2\2\u0138\u0136\3\2\2\2\6\2")
        buf.write("\u010b\u012c\u0136\3\b\2\2")
        return buf.getvalue()


class GraphlyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    WS = 33
    CR = 34
    COM_SIGN = 35
    PLUS = 36
    MINUS = 37
    MULTIPLICATION = 38
    DIVISION = 39
    MODULO = 40
    NEG = 41
    EQ = 42
    GREATER = 43
    LOWER = 44
    GT = 45
    LT = 46
    COLOR = 47
    DOT = 48
    DIGIT = 49
    NAME = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\n'", "'loop'", "'start'", "'until'", "'step'", "'then'", 
            "'end'", "'check'", "'else'", "'point'", "':'", "','", "'segment'", 
            "'circle'", "'polygon'", "'group'", "'['", "']'", "'num'", "'iterator'", 
            "'canvas'", "'draw'", "'fill'", "'move'", "'place'", "'rotate'", 
            "'scale'", "'('", "')'", "'!='", "'&'", "'|'", "'\r'", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'!'", "'='", "'>'", "'<'", "'>='", 
            "'<='", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "CR", "COM_SIGN", "PLUS", "MINUS", "MULTIPLICATION", "DIVISION", 
            "MODULO", "NEG", "EQ", "GREATER", "LOWER", "GT", "LT", "COLOR", 
            "DOT", "DIGIT", "NAME" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "WS", "CR", "COM_SIGN", "PLUS", "MINUS", "MULTIPLICATION", 
                  "DIVISION", "MODULO", "NEG", "EQ", "GREATER", "LOWER", 
                  "GT", "LT", "COLOR", "DOT", "DIGIT", "NAME" ]

    grammarFileName = "Graphly.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


