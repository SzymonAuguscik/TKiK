# Generated from Graphly.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\29")
        buf.write("\u0155\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\3\2\3\2\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\b")
        buf.write("\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3")
        buf.write("\n\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\r\3\r\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\24")
        buf.write("\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3")
        buf.write("!\3!\3\"\3\"\3#\3#\3#\3$\3$\3%\3%\3&\3&\3\'\3\'\3\'\3")
        buf.write("\'\3(\3(\3(\3(\7(\u0121\n(\f(\16(\u0124\13(\3(\3(\3)\3")
        buf.write(")\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3")
        buf.write("\61\3\62\3\62\3\62\3\63\3\63\3\63\3\64\6\64\u0141\n\64")
        buf.write("\r\64\16\64\u0142\3\65\3\65\6\65\u0147\n\65\r\65\16\65")
        buf.write("\u0148\3\66\3\66\3\67\3\67\38\38\78\u0151\n8\f8\168\u0154")
        buf.write("\138\2\29\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25")
        buf.write("\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+")
        buf.write("\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E")
        buf.write("$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k")
        buf.write("\67m8o9\3\2\b\4\2\13\f\"\"\4\2\f\f\17\17\3\2c|\3\2\62")
        buf.write(";\3\2C\\\6\2\62;C\\aac|\2\u0158\2\3\3\2\2\2\2\5\3\2\2")
        buf.write("\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2")
        buf.write("\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27")
        buf.write("\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3")
        buf.write("\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2")
        buf.write(")\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2")
        buf.write("\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2")
        buf.write(";\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2")
        buf.write("\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2")
        buf.write("\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2")
        buf.write("\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3")
        buf.write("\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k")
        buf.write("\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\3q\3\2\2\2\5s\3\2\2\2\7")
        buf.write("x\3\2\2\2\t~\3\2\2\2\13\u0084\3\2\2\2\r\u0089\3\2\2\2")
        buf.write("\17\u008e\3\2\2\2\21\u0092\3\2\2\2\23\u0098\3\2\2\2\25")
        buf.write("\u009d\3\2\2\2\27\u00a3\3\2\2\2\31\u00a5\3\2\2\2\33\u00a7")
        buf.write("\3\2\2\2\35\u00af\3\2\2\2\37\u00b6\3\2\2\2!\u00be\3\2")
        buf.write("\2\2#\u00c0\3\2\2\2%\u00c2\3\2\2\2\'\u00c8\3\2\2\2)\u00cc")
        buf.write("\3\2\2\2+\u00d5\3\2\2\2-\u00dc\3\2\2\2/\u00e1\3\2\2\2")
        buf.write("\61\u00e6\3\2\2\2\63\u00eb\3\2\2\2\65\u00f1\3\2\2\2\67")
        buf.write("\u00f8\3\2\2\29\u00fe\3\2\2\2;\u0105\3\2\2\2=\u0107\3")
        buf.write("\2\2\2?\u0109\3\2\2\2A\u010b\3\2\2\2C\u010d\3\2\2\2E\u010f")
        buf.write("\3\2\2\2G\u0112\3\2\2\2I\u0114\3\2\2\2K\u0116\3\2\2\2")
        buf.write("M\u0118\3\2\2\2O\u011c\3\2\2\2Q\u0127\3\2\2\2S\u0129\3")
        buf.write("\2\2\2U\u012b\3\2\2\2W\u012d\3\2\2\2Y\u012f\3\2\2\2[\u0131")
        buf.write("\3\2\2\2]\u0133\3\2\2\2_\u0135\3\2\2\2a\u0137\3\2\2\2")
        buf.write("c\u0139\3\2\2\2e\u013c\3\2\2\2g\u0140\3\2\2\2i\u0144\3")
        buf.write("\2\2\2k\u014a\3\2\2\2m\u014c\3\2\2\2o\u014e\3\2\2\2qr")
        buf.write("\7\f\2\2r\4\3\2\2\2st\7n\2\2tu\7q\2\2uv\7q\2\2vw\7r\2")
        buf.write("\2w\6\3\2\2\2xy\7u\2\2yz\7v\2\2z{\7c\2\2{|\7t\2\2|}\7")
        buf.write("v\2\2}\b\3\2\2\2~\177\7w\2\2\177\u0080\7p\2\2\u0080\u0081")
        buf.write("\7v\2\2\u0081\u0082\7k\2\2\u0082\u0083\7n\2\2\u0083\n")
        buf.write("\3\2\2\2\u0084\u0085\7u\2\2\u0085\u0086\7v\2\2\u0086\u0087")
        buf.write("\7g\2\2\u0087\u0088\7r\2\2\u0088\f\3\2\2\2\u0089\u008a")
        buf.write("\7v\2\2\u008a\u008b\7j\2\2\u008b\u008c\7g\2\2\u008c\u008d")
        buf.write("\7p\2\2\u008d\16\3\2\2\2\u008e\u008f\7g\2\2\u008f\u0090")
        buf.write("\7p\2\2\u0090\u0091\7f\2\2\u0091\20\3\2\2\2\u0092\u0093")
        buf.write("\7e\2\2\u0093\u0094\7j\2\2\u0094\u0095\7g\2\2\u0095\u0096")
        buf.write("\7e\2\2\u0096\u0097\7m\2\2\u0097\22\3\2\2\2\u0098\u0099")
        buf.write("\7g\2\2\u0099\u009a\7n\2\2\u009a\u009b\7u\2\2\u009b\u009c")
        buf.write("\7g\2\2\u009c\24\3\2\2\2\u009d\u009e\7r\2\2\u009e\u009f")
        buf.write("\7q\2\2\u009f\u00a0\7k\2\2\u00a0\u00a1\7p\2\2\u00a1\u00a2")
        buf.write("\7v\2\2\u00a2\26\3\2\2\2\u00a3\u00a4\7<\2\2\u00a4\30\3")
        buf.write("\2\2\2\u00a5\u00a6\7.\2\2\u00a6\32\3\2\2\2\u00a7\u00a8")
        buf.write("\7u\2\2\u00a8\u00a9\7g\2\2\u00a9\u00aa\7i\2\2\u00aa\u00ab")
        buf.write("\7o\2\2\u00ab\u00ac\7g\2\2\u00ac\u00ad\7p\2\2\u00ad\u00ae")
        buf.write("\7v\2\2\u00ae\34\3\2\2\2\u00af\u00b0\7e\2\2\u00b0\u00b1")
        buf.write("\7k\2\2\u00b1\u00b2\7t\2\2\u00b2\u00b3\7e\2\2\u00b3\u00b4")
        buf.write("\7n\2\2\u00b4\u00b5\7g\2\2\u00b5\36\3\2\2\2\u00b6\u00b7")
        buf.write("\7r\2\2\u00b7\u00b8\7q\2\2\u00b8\u00b9\7n\2\2\u00b9\u00ba")
        buf.write("\7{\2\2\u00ba\u00bb\7i\2\2\u00bb\u00bc\7q\2\2\u00bc\u00bd")
        buf.write("\7p\2\2\u00bd \3\2\2\2\u00be\u00bf\7]\2\2\u00bf\"\3\2")
        buf.write("\2\2\u00c0\u00c1\7_\2\2\u00c1$\3\2\2\2\u00c2\u00c3\7i")
        buf.write("\2\2\u00c3\u00c4\7t\2\2\u00c4\u00c5\7q\2\2\u00c5\u00c6")
        buf.write("\7w\2\2\u00c6\u00c7\7r\2\2\u00c7&\3\2\2\2\u00c8\u00c9")
        buf.write("\7p\2\2\u00c9\u00ca\7w\2\2\u00ca\u00cb\7o\2\2\u00cb(\3")
        buf.write("\2\2\2\u00cc\u00cd\7k\2\2\u00cd\u00ce\7v\2\2\u00ce\u00cf")
        buf.write("\7g\2\2\u00cf\u00d0\7t\2\2\u00d0\u00d1\7c\2\2\u00d1\u00d2")
        buf.write("\7v\2\2\u00d2\u00d3\7q\2\2\u00d3\u00d4\7t\2\2\u00d4*\3")
        buf.write("\2\2\2\u00d5\u00d6\7e\2\2\u00d6\u00d7\7c\2\2\u00d7\u00d8")
        buf.write("\7p\2\2\u00d8\u00d9\7x\2\2\u00d9\u00da\7c\2\2\u00da\u00db")
        buf.write("\7u\2\2\u00db,\3\2\2\2\u00dc\u00dd\7f\2\2\u00dd\u00de")
        buf.write("\7t\2\2\u00de\u00df\7c\2\2\u00df\u00e0\7y\2\2\u00e0.\3")
        buf.write("\2\2\2\u00e1\u00e2\7h\2\2\u00e2\u00e3\7k\2\2\u00e3\u00e4")
        buf.write("\7n\2\2\u00e4\u00e5\7n\2\2\u00e5\60\3\2\2\2\u00e6\u00e7")
        buf.write("\7o\2\2\u00e7\u00e8\7q\2\2\u00e8\u00e9\7x\2\2\u00e9\u00ea")
        buf.write("\7g\2\2\u00ea\62\3\2\2\2\u00eb\u00ec\7r\2\2\u00ec\u00ed")
        buf.write("\7n\2\2\u00ed\u00ee\7c\2\2\u00ee\u00ef\7e\2\2\u00ef\u00f0")
        buf.write("\7g\2\2\u00f0\64\3\2\2\2\u00f1\u00f2\7t\2\2\u00f2\u00f3")
        buf.write("\7q\2\2\u00f3\u00f4\7v\2\2\u00f4\u00f5\7c\2\2\u00f5\u00f6")
        buf.write("\7v\2\2\u00f6\u00f7\7g\2\2\u00f7\66\3\2\2\2\u00f8\u00f9")
        buf.write("\7u\2\2\u00f9\u00fa\7e\2\2\u00fa\u00fb\7c\2\2\u00fb\u00fc")
        buf.write("\7n\2\2\u00fc\u00fd\7g\2\2\u00fd8\3\2\2\2\u00fe\u00ff")
        buf.write("\7c\2\2\u00ff\u0100\7u\2\2\u0100\u0101\7u\2\2\u0101\u0102")
        buf.write("\7k\2\2\u0102\u0103\7i\2\2\u0103\u0104\7p\2\2\u0104:\3")
        buf.write("\2\2\2\u0105\u0106\7*\2\2\u0106<\3\2\2\2\u0107\u0108\7")
        buf.write("+\2\2\u0108>\3\2\2\2\u0109\u010a\7`\2\2\u010a@\3\2\2\2")
        buf.write("\u010b\u010c\7a\2\2\u010cB\3\2\2\2\u010d\u010e\7\u0080")
        buf.write("\2\2\u010eD\3\2\2\2\u010f\u0110\7#\2\2\u0110\u0111\7?")
        buf.write("\2\2\u0111F\3\2\2\2\u0112\u0113\7(\2\2\u0113H\3\2\2\2")
        buf.write("\u0114\u0115\7~\2\2\u0115J\3\2\2\2\u0116\u0117\t\2\2\2")
        buf.write("\u0117L\3\2\2\2\u0118\u0119\7\17\2\2\u0119\u011a\3\2\2")
        buf.write("\2\u011a\u011b\b\'\2\2\u011bN\3\2\2\2\u011c\u011d\7/\2")
        buf.write("\2\u011d\u011e\7/\2\2\u011e\u0122\3\2\2\2\u011f\u0121")
        buf.write("\n\3\2\2\u0120\u011f\3\2\2\2\u0121\u0124\3\2\2\2\u0122")
        buf.write("\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0125\3\2\2\2")
        buf.write("\u0124\u0122\3\2\2\2\u0125\u0126\b(\2\2\u0126P\3\2\2\2")
        buf.write("\u0127\u0128\7-\2\2\u0128R\3\2\2\2\u0129\u012a\7/\2\2")
        buf.write("\u012aT\3\2\2\2\u012b\u012c\7,\2\2\u012cV\3\2\2\2\u012d")
        buf.write("\u012e\7\61\2\2\u012eX\3\2\2\2\u012f\u0130\7\'\2\2\u0130")
        buf.write("Z\3\2\2\2\u0131\u0132\7#\2\2\u0132\\\3\2\2\2\u0133\u0134")
        buf.write("\7?\2\2\u0134^\3\2\2\2\u0135\u0136\7@\2\2\u0136`\3\2\2")
        buf.write("\2\u0137\u0138\7>\2\2\u0138b\3\2\2\2\u0139\u013a\7@\2")
        buf.write("\2\u013a\u013b\7?\2\2\u013bd\3\2\2\2\u013c\u013d\7>\2")
        buf.write("\2\u013d\u013e\7?\2\2\u013ef\3\2\2\2\u013f\u0141\t\4\2")
        buf.write("\2\u0140\u013f\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0140")
        buf.write("\3\2\2\2\u0142\u0143\3\2\2\2\u0143h\3\2\2\2\u0144\u0146")
        buf.write("\7%\2\2\u0145\u0147\t\4\2\2\u0146\u0145\3\2\2\2\u0147")
        buf.write("\u0148\3\2\2\2\u0148\u0146\3\2\2\2\u0148\u0149\3\2\2\2")
        buf.write("\u0149j\3\2\2\2\u014a\u014b\7\60\2\2\u014bl\3\2\2\2\u014c")
        buf.write("\u014d\t\5\2\2\u014dn\3\2\2\2\u014e\u0152\t\6\2\2\u014f")
        buf.write("\u0151\t\7\2\2\u0150\u014f\3\2\2\2\u0151\u0154\3\2\2\2")
        buf.write("\u0152\u0150\3\2\2\2\u0152\u0153\3\2\2\2\u0153p\3\2\2")
        buf.write("\2\u0154\u0152\3\2\2\2\7\2\u0122\u0142\u0148\u0152\3\b")
        buf.write("\2\2")
        return buf.getvalue()


class GraphlyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    WS = 37
    CR = 38
    COM_SIGN = 39
    PLUS = 40
    MINUS = 41
    MULTIPLICATION = 42
    DIVISION = 43
    MODULO = 44
    NEG = 45
    EQ = 46
    GREATER = 47
    LOWER = 48
    GT = 49
    LT = 50
    TYPE = 51
    COLOR = 52
    DOT = 53
    DIGIT = 54
    NAME = 55

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\n'", "'loop'", "'start'", "'until'", "'step'", "'then'", 
            "'end'", "'check'", "'else'", "'point'", "':'", "','", "'segment'", 
            "'circle'", "'polygon'", "'['", "']'", "'group'", "'num'", "'iterator'", 
            "'canvas'", "'draw'", "'fill'", "'move'", "'place'", "'rotate'", 
            "'scale'", "'assign'", "'('", "')'", "'^'", "'_'", "'~'", "'!='", 
            "'&'", "'|'", "'\r'", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", 
            "'='", "'>'", "'<'", "'>='", "'<='", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "CR", "COM_SIGN", "PLUS", "MINUS", "MULTIPLICATION", "DIVISION", 
            "MODULO", "NEG", "EQ", "GREATER", "LOWER", "GT", "LT", "TYPE", 
            "COLOR", "DOT", "DIGIT", "NAME" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "WS", "CR", "COM_SIGN", 
                  "PLUS", "MINUS", "MULTIPLICATION", "DIVISION", "MODULO", 
                  "NEG", "EQ", "GREATER", "LOWER", "GT", "LT", "TYPE", "COLOR", 
                  "DOT", "DIGIT", "NAME" ]

    grammarFileName = "Graphly.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


