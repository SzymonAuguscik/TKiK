# Generated from Graphly.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2;")
        buf.write("\u0168\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3")
        buf.write("\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3")
        buf.write("\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3$\3%")
        buf.write("\3%\3&\3&\3\'\3\'\3(\3(\3(\3(\3)\3)\3)\3)\7)\u0129\n)")
        buf.write("\f)\16)\u012c\13)\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.")
        buf.write("\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62\3\63\3\63\3\63\3")
        buf.write("\64\3\64\3\64\3\65\3\65\3\65\3\65\7\65\u014c\n\65\f\65")
        buf.write("\16\65\u014f\13\65\3\65\3\65\3\66\6\66\u0154\n\66\r\66")
        buf.write("\16\66\u0155\3\67\3\67\6\67\u015a\n\67\r\67\16\67\u015b")
        buf.write("\38\38\39\39\3:\3:\7:\u0164\n:\f:\16:\u0167\13:\2\2;\3")
        buf.write("\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*")
        buf.write("S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8o9q:s;\3\2")
        buf.write("\t\4\2\13\f\"\"\4\2\f\f\17\17\5\2\f\f\17\17$$\3\2c|\3")
        buf.write("\2\62;\3\2C\\\6\2\62;C\\aac|\2\u016d\2\3\3\2\2\2\2\5\3")
        buf.write("\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2")
        buf.write("\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2")
        buf.write("\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2")
        buf.write("\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2")
        buf.write("\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3")
        buf.write("\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2")
        buf.write("\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2")
        buf.write("\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3")
        buf.write("\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W")
        buf.write("\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2")
        buf.write("a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2")
        buf.write("\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2")
        buf.write("\2\3u\3\2\2\2\5w\3\2\2\2\7|\3\2\2\2\t\u0082\3\2\2\2\13")
        buf.write("\u0088\3\2\2\2\r\u008d\3\2\2\2\17\u0092\3\2\2\2\21\u0096")
        buf.write("\3\2\2\2\23\u009c\3\2\2\2\25\u00a1\3\2\2\2\27\u00a7\3")
        buf.write("\2\2\2\31\u00a9\3\2\2\2\33\u00ab\3\2\2\2\35\u00b3\3\2")
        buf.write("\2\2\37\u00ba\3\2\2\2!\u00c2\3\2\2\2#\u00c4\3\2\2\2%\u00c6")
        buf.write("\3\2\2\2\'\u00cc\3\2\2\2)\u00d0\3\2\2\2+\u00d9\3\2\2\2")
        buf.write("-\u00e0\3\2\2\2/\u00e5\3\2\2\2\61\u00e9\3\2\2\2\63\u00ee")
        buf.write("\3\2\2\2\65\u00f3\3\2\2\2\67\u00f9\3\2\2\29\u0100\3\2")
        buf.write("\2\2;\u0106\3\2\2\2=\u010d\3\2\2\2?\u010f\3\2\2\2A\u0111")
        buf.write("\3\2\2\2C\u0113\3\2\2\2E\u0115\3\2\2\2G\u0117\3\2\2\2")
        buf.write("I\u011a\3\2\2\2K\u011c\3\2\2\2M\u011e\3\2\2\2O\u0120\3")
        buf.write("\2\2\2Q\u0124\3\2\2\2S\u012f\3\2\2\2U\u0131\3\2\2\2W\u0133")
        buf.write("\3\2\2\2Y\u0135\3\2\2\2[\u0137\3\2\2\2]\u0139\3\2\2\2")
        buf.write("_\u013b\3\2\2\2a\u013d\3\2\2\2c\u013f\3\2\2\2e\u0141\3")
        buf.write("\2\2\2g\u0144\3\2\2\2i\u0147\3\2\2\2k\u0153\3\2\2\2m\u0157")
        buf.write("\3\2\2\2o\u015d\3\2\2\2q\u015f\3\2\2\2s\u0161\3\2\2\2")
        buf.write("uv\7\f\2\2v\4\3\2\2\2wx\7n\2\2xy\7q\2\2yz\7q\2\2z{\7r")
        buf.write("\2\2{\6\3\2\2\2|}\7u\2\2}~\7v\2\2~\177\7c\2\2\177\u0080")
        buf.write("\7t\2\2\u0080\u0081\7v\2\2\u0081\b\3\2\2\2\u0082\u0083")
        buf.write("\7w\2\2\u0083\u0084\7p\2\2\u0084\u0085\7v\2\2\u0085\u0086")
        buf.write("\7k\2\2\u0086\u0087\7n\2\2\u0087\n\3\2\2\2\u0088\u0089")
        buf.write("\7u\2\2\u0089\u008a\7v\2\2\u008a\u008b\7g\2\2\u008b\u008c")
        buf.write("\7r\2\2\u008c\f\3\2\2\2\u008d\u008e\7v\2\2\u008e\u008f")
        buf.write("\7j\2\2\u008f\u0090\7g\2\2\u0090\u0091\7p\2\2\u0091\16")
        buf.write("\3\2\2\2\u0092\u0093\7g\2\2\u0093\u0094\7p\2\2\u0094\u0095")
        buf.write("\7f\2\2\u0095\20\3\2\2\2\u0096\u0097\7e\2\2\u0097\u0098")
        buf.write("\7j\2\2\u0098\u0099\7g\2\2\u0099\u009a\7e\2\2\u009a\u009b")
        buf.write("\7m\2\2\u009b\22\3\2\2\2\u009c\u009d\7g\2\2\u009d\u009e")
        buf.write("\7n\2\2\u009e\u009f\7u\2\2\u009f\u00a0\7g\2\2\u00a0\24")
        buf.write("\3\2\2\2\u00a1\u00a2\7r\2\2\u00a2\u00a3\7q\2\2\u00a3\u00a4")
        buf.write("\7k\2\2\u00a4\u00a5\7p\2\2\u00a5\u00a6\7v\2\2\u00a6\26")
        buf.write("\3\2\2\2\u00a7\u00a8\7<\2\2\u00a8\30\3\2\2\2\u00a9\u00aa")
        buf.write("\7.\2\2\u00aa\32\3\2\2\2\u00ab\u00ac\7u\2\2\u00ac\u00ad")
        buf.write("\7g\2\2\u00ad\u00ae\7i\2\2\u00ae\u00af\7o\2\2\u00af\u00b0")
        buf.write("\7g\2\2\u00b0\u00b1\7p\2\2\u00b1\u00b2\7v\2\2\u00b2\34")
        buf.write("\3\2\2\2\u00b3\u00b4\7e\2\2\u00b4\u00b5\7k\2\2\u00b5\u00b6")
        buf.write("\7t\2\2\u00b6\u00b7\7e\2\2\u00b7\u00b8\7n\2\2\u00b8\u00b9")
        buf.write("\7g\2\2\u00b9\36\3\2\2\2\u00ba\u00bb\7r\2\2\u00bb\u00bc")
        buf.write("\7q\2\2\u00bc\u00bd\7n\2\2\u00bd\u00be\7{\2\2\u00be\u00bf")
        buf.write("\7i\2\2\u00bf\u00c0\7q\2\2\u00c0\u00c1\7p\2\2\u00c1 \3")
        buf.write("\2\2\2\u00c2\u00c3\7]\2\2\u00c3\"\3\2\2\2\u00c4\u00c5")
        buf.write("\7_\2\2\u00c5$\3\2\2\2\u00c6\u00c7\7i\2\2\u00c7\u00c8")
        buf.write("\7t\2\2\u00c8\u00c9\7q\2\2\u00c9\u00ca\7w\2\2\u00ca\u00cb")
        buf.write("\7r\2\2\u00cb&\3\2\2\2\u00cc\u00cd\7p\2\2\u00cd\u00ce")
        buf.write("\7w\2\2\u00ce\u00cf\7o\2\2\u00cf(\3\2\2\2\u00d0\u00d1")
        buf.write("\7k\2\2\u00d1\u00d2\7v\2\2\u00d2\u00d3\7g\2\2\u00d3\u00d4")
        buf.write("\7t\2\2\u00d4\u00d5\7c\2\2\u00d5\u00d6\7v\2\2\u00d6\u00d7")
        buf.write("\7q\2\2\u00d7\u00d8\7t\2\2\u00d8*\3\2\2\2\u00d9\u00da")
        buf.write("\7e\2\2\u00da\u00db\7c\2\2\u00db\u00dc\7p\2\2\u00dc\u00dd")
        buf.write("\7x\2\2\u00dd\u00de\7c\2\2\u00de\u00df\7u\2\2\u00df,\3")
        buf.write("\2\2\2\u00e0\u00e1\7f\2\2\u00e1\u00e2\7t\2\2\u00e2\u00e3")
        buf.write("\7c\2\2\u00e3\u00e4\7y\2\2\u00e4.\3\2\2\2\u00e5\u00e6")
        buf.write("\7n\2\2\u00e6\u00e7\7q\2\2\u00e7\u00e8\7i\2\2\u00e8\60")
        buf.write("\3\2\2\2\u00e9\u00ea\7h\2\2\u00ea\u00eb\7k\2\2\u00eb\u00ec")
        buf.write("\7n\2\2\u00ec\u00ed\7n\2\2\u00ed\62\3\2\2\2\u00ee\u00ef")
        buf.write("\7o\2\2\u00ef\u00f0\7q\2\2\u00f0\u00f1\7x\2\2\u00f1\u00f2")
        buf.write("\7g\2\2\u00f2\64\3\2\2\2\u00f3\u00f4\7r\2\2\u00f4\u00f5")
        buf.write("\7n\2\2\u00f5\u00f6\7c\2\2\u00f6\u00f7\7e\2\2\u00f7\u00f8")
        buf.write("\7g\2\2\u00f8\66\3\2\2\2\u00f9\u00fa\7t\2\2\u00fa\u00fb")
        buf.write("\7q\2\2\u00fb\u00fc\7v\2\2\u00fc\u00fd\7c\2\2\u00fd\u00fe")
        buf.write("\7v\2\2\u00fe\u00ff\7g\2\2\u00ff8\3\2\2\2\u0100\u0101")
        buf.write("\7u\2\2\u0101\u0102\7e\2\2\u0102\u0103\7c\2\2\u0103\u0104")
        buf.write("\7n\2\2\u0104\u0105\7g\2\2\u0105:\3\2\2\2\u0106\u0107")
        buf.write("\7c\2\2\u0107\u0108\7u\2\2\u0108\u0109\7u\2\2\u0109\u010a")
        buf.write("\7k\2\2\u010a\u010b\7i\2\2\u010b\u010c\7p\2\2\u010c<\3")
        buf.write("\2\2\2\u010d\u010e\7*\2\2\u010e>\3\2\2\2\u010f\u0110\7")
        buf.write("+\2\2\u0110@\3\2\2\2\u0111\u0112\7`\2\2\u0112B\3\2\2\2")
        buf.write("\u0113\u0114\7a\2\2\u0114D\3\2\2\2\u0115\u0116\7\u0080")
        buf.write("\2\2\u0116F\3\2\2\2\u0117\u0118\7#\2\2\u0118\u0119\7?")
        buf.write("\2\2\u0119H\3\2\2\2\u011a\u011b\7(\2\2\u011bJ\3\2\2\2")
        buf.write("\u011c\u011d\7~\2\2\u011dL\3\2\2\2\u011e\u011f\t\2\2\2")
        buf.write("\u011fN\3\2\2\2\u0120\u0121\7\17\2\2\u0121\u0122\3\2\2")
        buf.write("\2\u0122\u0123\b(\2\2\u0123P\3\2\2\2\u0124\u0125\7/\2")
        buf.write("\2\u0125\u0126\7/\2\2\u0126\u012a\3\2\2\2\u0127\u0129")
        buf.write("\n\3\2\2\u0128\u0127\3\2\2\2\u0129\u012c\3\2\2\2\u012a")
        buf.write("\u0128\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012d\3\2\2\2")
        buf.write("\u012c\u012a\3\2\2\2\u012d\u012e\b)\2\2\u012eR\3\2\2\2")
        buf.write("\u012f\u0130\7-\2\2\u0130T\3\2\2\2\u0131\u0132\7/\2\2")
        buf.write("\u0132V\3\2\2\2\u0133\u0134\7,\2\2\u0134X\3\2\2\2\u0135")
        buf.write("\u0136\7\61\2\2\u0136Z\3\2\2\2\u0137\u0138\7\'\2\2\u0138")
        buf.write("\\\3\2\2\2\u0139\u013a\7#\2\2\u013a^\3\2\2\2\u013b\u013c")
        buf.write("\7?\2\2\u013c`\3\2\2\2\u013d\u013e\7@\2\2\u013eb\3\2\2")
        buf.write("\2\u013f\u0140\7>\2\2\u0140d\3\2\2\2\u0141\u0142\7@\2")
        buf.write("\2\u0142\u0143\7?\2\2\u0143f\3\2\2\2\u0144\u0145\7>\2")
        buf.write("\2\u0145\u0146\7?\2\2\u0146h\3\2\2\2\u0147\u014d\7$\2")
        buf.write("\2\u0148\u014c\n\4\2\2\u0149\u014a\7$\2\2\u014a\u014c")
        buf.write("\7$\2\2\u014b\u0148\3\2\2\2\u014b\u0149\3\2\2\2\u014c")
        buf.write("\u014f\3\2\2\2\u014d\u014b\3\2\2\2\u014d\u014e\3\2\2\2")
        buf.write("\u014e\u0150\3\2\2\2\u014f\u014d\3\2\2\2\u0150\u0151\7")
        buf.write("$\2\2\u0151j\3\2\2\2\u0152\u0154\t\5\2\2\u0153\u0152\3")
        buf.write("\2\2\2\u0154\u0155\3\2\2\2\u0155\u0153\3\2\2\2\u0155\u0156")
        buf.write("\3\2\2\2\u0156l\3\2\2\2\u0157\u0159\7%\2\2\u0158\u015a")
        buf.write("\t\5\2\2\u0159\u0158\3\2\2\2\u015a\u015b\3\2\2\2\u015b")
        buf.write("\u0159\3\2\2\2\u015b\u015c\3\2\2\2\u015cn\3\2\2\2\u015d")
        buf.write("\u015e\7\60\2\2\u015ep\3\2\2\2\u015f\u0160\t\6\2\2\u0160")
        buf.write("r\3\2\2\2\u0161\u0165\t\7\2\2\u0162\u0164\t\b\2\2\u0163")
        buf.write("\u0162\3\2\2\2\u0164\u0167\3\2\2\2\u0165\u0163\3\2\2\2")
        buf.write("\u0165\u0166\3\2\2\2\u0166t\3\2\2\2\u0167\u0165\3\2\2")
        buf.write("\2\t\2\u012a\u014b\u014d\u0155\u015b\u0165\3\b\2\2")
        return buf.getvalue()


class GraphlyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    WS = 38
    CR = 39
    COM_SIGN = 40
    PLUS = 41
    MINUS = 42
    MULTIPLICATION = 43
    DIVISION = 44
    MODULO = 45
    NEG = 46
    EQ = 47
    GREATER = 48
    LOWER = 49
    GT = 50
    LT = 51
    TEXT = 52
    TYPE = 53
    COLOR = 54
    DOT = 55
    DIGIT = 56
    NAME = 57

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\n'", "'loop'", "'start'", "'until'", "'step'", "'then'", 
            "'end'", "'check'", "'else'", "'point'", "':'", "','", "'segment'", 
            "'circle'", "'polygon'", "'['", "']'", "'group'", "'num'", "'iterator'", 
            "'canvas'", "'draw'", "'log'", "'fill'", "'move'", "'place'", 
            "'rotate'", "'scale'", "'assign'", "'('", "')'", "'^'", "'_'", 
            "'~'", "'!='", "'&'", "'|'", "'\r'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'!'", "'='", "'>'", "'<'", "'>='", "'<='", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "CR", "COM_SIGN", "PLUS", "MINUS", "MULTIPLICATION", "DIVISION", 
            "MODULO", "NEG", "EQ", "GREATER", "LOWER", "GT", "LT", "TEXT", 
            "TYPE", "COLOR", "DOT", "DIGIT", "NAME" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "WS", "CR", 
                  "COM_SIGN", "PLUS", "MINUS", "MULTIPLICATION", "DIVISION", 
                  "MODULO", "NEG", "EQ", "GREATER", "LOWER", "GT", "LT", 
                  "TEXT", "TYPE", "COLOR", "DOT", "DIGIT", "NAME" ]

    grammarFileName = "Graphly.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


