# Generated from Graphly.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3/")
        buf.write("\u03db\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \3\2\7\2B\n\2\f\2\16\2E\13\2\3\2\3\2\6")
        buf.write("\2I\n\2\r\2\16\2J\7\2M\n\2\f\2\16\2P\13\2\3\2\3\2\6\2")
        buf.write("T\n\2\r\2\16\2U\3\2\3\2\7\2Z\n\2\f\2\16\2]\13\2\7\2_\n")
        buf.write("\2\f\2\16\2b\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\7\3n\n\3\f\3\16\3q\13\3\5\3s\n\3\3\4\7\4v\n\4\f\4")
        buf.write("\16\4y\13\4\3\4\3\4\3\4\7\4~\n\4\f\4\16\4\u0081\13\4\3")
        buf.write("\5\3\5\6\5\u0085\n\5\r\5\16\5\u0086\3\5\3\5\6\5\u008b")
        buf.write("\n\5\r\5\16\5\u008c\3\5\3\5\6\5\u0091\n\5\r\5\16\5\u0092")
        buf.write("\3\5\3\5\5\5\u0097\n\5\3\5\6\5\u009a\n\5\r\5\16\5\u009b")
        buf.write("\3\5\3\5\6\5\u00a0\n\5\r\5\16\5\u00a1\3\5\3\5\5\5\u00a6")
        buf.write("\n\5\3\5\6\5\u00a9\n\5\r\5\16\5\u00aa\3\5\3\5\6\5\u00af")
        buf.write("\n\5\r\5\16\5\u00b0\3\5\3\5\5\5\u00b5\n\5\3\5\6\5\u00b8")
        buf.write("\n\5\r\5\16\5\u00b9\3\5\3\5\3\5\3\5\7\5\u00c0\n\5\f\5")
        buf.write("\16\5\u00c3\13\5\3\5\3\5\3\6\7\6\u00c8\n\6\f\6\16\6\u00cb")
        buf.write("\13\6\3\6\3\6\6\6\u00cf\n\6\r\6\16\6\u00d0\3\6\3\6\6\6")
        buf.write("\u00d5\n\6\r\6\16\6\u00d6\3\6\3\6\3\6\7\6\u00dc\n\6\f")
        buf.write("\6\16\6\u00df\13\6\3\6\7\6\u00e2\n\6\f\6\16\6\u00e5\13")
        buf.write("\6\3\6\3\6\3\6\7\6\u00ea\n\6\f\6\16\6\u00ed\13\6\3\6\3")
        buf.write("\6\6\6\u00f1\n\6\r\6\16\6\u00f2\3\6\3\6\6\6\u00f7\n\6")
        buf.write("\r\6\16\6\u00f8\3\6\3\6\6\6\u00fd\n\6\r\6\16\6\u00fe\3")
        buf.write("\6\3\6\3\6\7\6\u0104\n\6\f\6\16\6\u0107\13\6\3\6\7\6\u010a")
        buf.write("\n\6\f\6\16\6\u010d\13\6\3\6\3\6\3\6\7\6\u0112\n\6\f\6")
        buf.write("\16\6\u0115\13\6\7\6\u0117\n\6\f\6\16\6\u011a\13\6\3\6")
        buf.write("\3\6\3\6\7\6\u011f\n\6\f\6\16\6\u0122\13\6\3\6\3\6\3\6")
        buf.write("\7\6\u0127\n\6\f\6\16\6\u012a\13\6\5\6\u012c\n\6\3\6\7")
        buf.write("\6\u012f\n\6\f\6\16\6\u0132\13\6\3\6\3\6\3\7\3\7\3\7\3")
        buf.write("\7\5\7\u013a\n\7\3\b\7\b\u013d\n\b\f\b\16\b\u0140\13\b")
        buf.write("\3\b\3\b\6\b\u0144\n\b\r\b\16\b\u0145\3\b\3\b\7\b\u014a")
        buf.write("\n\b\f\b\16\b\u014d\13\b\3\b\3\b\7\b\u0151\n\b\f\b\16")
        buf.write("\b\u0154\13\b\3\b\3\b\7\b\u0158\n\b\f\b\16\b\u015b\13")
        buf.write("\b\3\b\3\b\7\b\u015f\n\b\f\b\16\b\u0162\13\b\3\b\3\b\3")
        buf.write("\t\7\t\u0167\n\t\f\t\16\t\u016a\13\t\3\t\3\t\6\t\u016e")
        buf.write("\n\t\r\t\16\t\u016f\3\t\3\t\7\t\u0174\n\t\f\t\16\t\u0177")
        buf.write("\13\t\3\t\3\t\7\t\u017b\n\t\f\t\16\t\u017e\13\t\3\t\3")
        buf.write("\t\7\t\u0182\n\t\f\t\16\t\u0185\13\t\3\t\3\t\6\t\u0189")
        buf.write("\n\t\r\t\16\t\u018a\3\t\3\t\3\n\7\n\u0190\n\n\f\n\16\n")
        buf.write("\u0193\13\n\3\n\3\n\6\n\u0197\n\n\r\n\16\n\u0198\3\n\3")
        buf.write("\n\7\n\u019d\n\n\f\n\16\n\u01a0\13\n\3\n\3\n\7\n\u01a4")
        buf.write("\n\n\f\n\16\n\u01a7\13\n\3\n\3\n\7\n\u01ab\n\n\f\n\16")
        buf.write("\n\u01ae\13\n\3\n\3\n\7\n\u01b2\n\n\f\n\16\n\u01b5\13")
        buf.write("\n\3\n\3\n\3\13\7\13\u01ba\n\13\f\13\16\13\u01bd\13\13")
        buf.write("\3\13\3\13\6\13\u01c1\n\13\r\13\16\13\u01c2\3\13\3\13")
        buf.write("\7\13\u01c7\n\13\f\13\16\13\u01ca\13\13\3\13\3\13\7\13")
        buf.write("\u01ce\n\13\f\13\16\13\u01d1\13\13\3\13\3\13\3\f\7\f\u01d6")
        buf.write("\n\f\f\f\16\f\u01d9\13\f\3\f\3\f\6\f\u01dd\n\f\r\f\16")
        buf.write("\f\u01de\3\f\3\f\7\f\u01e3\n\f\f\f\16\f\u01e6\13\f\3\f")
        buf.write("\3\f\7\f\u01ea\n\f\f\f\16\f\u01ed\13\f\3\f\3\f\7\f\u01f1")
        buf.write("\n\f\f\f\16\f\u01f4\13\f\3\f\3\f\7\f\u01f8\n\f\f\f\16")
        buf.write("\f\u01fb\13\f\3\f\3\f\7\f\u01ff\n\f\f\f\16\f\u0202\13")
        buf.write("\f\7\f\u0204\n\f\f\f\16\f\u0207\13\f\3\r\7\r\u020a\n\r")
        buf.write("\f\r\16\r\u020d\13\r\3\r\3\r\7\r\u0211\n\r\f\r\16\r\u0214")
        buf.write("\13\r\3\r\3\r\7\r\u0218\n\r\f\r\16\r\u021b\13\r\3\r\3")
        buf.write("\r\5\r\u021f\n\r\3\r\7\r\u0222\n\r\f\r\16\r\u0225\13\r")
        buf.write("\3\r\3\r\6\r\u0229\n\r\r\r\16\r\u022a\3\16\3\16\5\16\u022f")
        buf.write("\n\16\3\17\7\17\u0232\n\17\f\17\16\17\u0235\13\17\3\17")
        buf.write("\3\17\6\17\u0239\n\17\r\17\16\17\u023a\3\17\3\17\7\17")
        buf.write("\u023f\n\17\f\17\16\17\u0242\13\17\3\17\3\17\7\17\u0246")
        buf.write("\n\17\f\17\16\17\u0249\13\17\3\17\3\17\5\17\u024d\n\17")
        buf.write("\3\20\7\20\u0250\n\20\f\20\16\20\u0253\13\20\3\20\3\20")
        buf.write("\6\20\u0257\n\20\r\20\16\20\u0258\3\20\3\20\7\20\u025d")
        buf.write("\n\20\f\20\16\20\u0260\13\20\3\20\3\20\7\20\u0264\n\20")
        buf.write("\f\20\16\20\u0267\13\20\3\20\3\20\5\20\u026b\n\20\3\21")
        buf.write("\7\21\u026e\n\21\f\21\16\21\u0271\13\21\3\21\3\21\7\21")
        buf.write("\u0275\n\21\f\21\16\21\u0278\13\21\3\21\3\21\7\21\u027c")
        buf.write("\n\21\f\21\16\21\u027f\13\21\3\21\3\21\5\21\u0283\n\21")
        buf.write("\3\21\7\21\u0286\n\21\f\21\16\21\u0289\13\21\3\21\3\21")
        buf.write("\7\21\u028d\n\21\f\21\16\21\u0290\13\21\3\21\3\21\5\21")
        buf.write("\u0294\n\21\3\21\7\21\u0297\n\21\f\21\16\21\u029a\13\21")
        buf.write("\3\21\3\21\7\21\u029e\n\21\f\21\16\21\u02a1\13\21\3\21")
        buf.write("\3\21\3\22\7\22\u02a6\n\22\f\22\16\22\u02a9\13\22\3\22")
        buf.write("\3\22\6\22\u02ad\n\22\r\22\16\22\u02ae\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\5\23\u02b8\n\23\3\24\7\24\u02bb\n")
        buf.write("\24\f\24\16\24\u02be\13\24\3\24\3\24\6\24\u02c2\n\24\r")
        buf.write("\24\16\24\u02c3\3\24\3\24\7\24\u02c8\n\24\f\24\16\24\u02cb")
        buf.write("\13\24\3\24\3\24\7\24\u02cf\n\24\f\24\16\24\u02d2\13\24")
        buf.write("\3\24\3\24\3\25\7\25\u02d7\n\25\f\25\16\25\u02da\13\25")
        buf.write("\3\25\3\25\6\25\u02de\n\25\r\25\16\25\u02df\3\25\3\25")
        buf.write("\7\25\u02e4\n\25\f\25\16\25\u02e7\13\25\3\25\3\25\7\25")
        buf.write("\u02eb\n\25\f\25\16\25\u02ee\13\25\3\25\3\25\5\25\u02f2")
        buf.write("\n\25\3\25\7\25\u02f5\n\25\f\25\16\25\u02f8\13\25\3\25")
        buf.write("\3\25\7\25\u02fc\n\25\f\25\16\25\u02ff\13\25\3\25\3\25")
        buf.write("\5\25\u0303\n\25\3\26\7\26\u0306\n\26\f\26\16\26\u0309")
        buf.write("\13\26\3\26\3\26\6\26\u030d\n\26\r\26\16\26\u030e\3\26")
        buf.write("\3\26\7\26\u0313\n\26\f\26\16\26\u0316\13\26\3\26\3\26")
        buf.write("\7\26\u031a\n\26\f\26\16\26\u031d\13\26\3\26\3\26\3\27")
        buf.write("\7\27\u0322\n\27\f\27\16\27\u0325\13\27\3\27\3\27\6\27")
        buf.write("\u0329\n\27\r\27\16\27\u032a\3\27\3\27\7\27\u032f\n\27")
        buf.write("\f\27\16\27\u0332\13\27\3\27\3\27\7\27\u0336\n\27\f\27")
        buf.write("\16\27\u0339\13\27\3\27\3\27\5\27\u033d\n\27\3\27\7\27")
        buf.write("\u0340\n\27\f\27\16\27\u0343\13\27\3\27\3\27\7\27\u0347")
        buf.write("\n\27\f\27\16\27\u034a\13\27\3\27\3\27\3\30\7\30\u034f")
        buf.write("\n\30\f\30\16\30\u0352\13\30\3\30\3\30\6\30\u0356\n\30")
        buf.write("\r\30\16\30\u0357\3\30\3\30\7\30\u035c\n\30\f\30\16\30")
        buf.write("\u035f\13\30\3\30\3\30\7\30\u0363\n\30\f\30\16\30\u0366")
        buf.write("\13\30\3\30\3\30\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\5\32\u0372\n\32\3\33\3\33\3\33\3\34\7\34\u0378\n\34")
        buf.write("\f\34\16\34\u037b\13\34\3\34\3\34\5\34\u037f\n\34\3\34")
        buf.write("\7\34\u0382\n\34\f\34\16\34\u0385\13\34\3\34\3\34\7\34")
        buf.write("\u0389\n\34\f\34\16\34\u038c\13\34\3\34\3\34\5\34\u0390")
        buf.write("\n\34\3\34\3\34\5\34\u0394\n\34\3\34\7\34\u0397\n\34\f")
        buf.write("\34\16\34\u039a\13\34\3\34\3\34\7\34\u039e\n\34\f\34\16")
        buf.write("\34\u03a1\13\34\3\34\3\34\5\34\u03a5\n\34\5\34\u03a7\n")
        buf.write("\34\3\35\5\35\u03aa\n\35\3\35\3\35\5\35\u03ae\n\35\3\35")
        buf.write("\3\35\3\35\5\35\u03b3\n\35\7\35\u03b5\n\35\f\35\16\35")
        buf.write("\u03b8\13\35\3\36\7\36\u03bb\n\36\f\36\16\36\u03be\13")
        buf.write("\36\3\36\5\36\u03c1\n\36\3\36\6\36\u03c4\n\36\r\36\16")
        buf.write("\36\u03c5\3\37\3\37\5\37\u03ca\n\37\3\37\3\37\3\37\5\37")
        buf.write("\u03cf\n\37\7\37\u03d1\n\37\f\37\16\37\u03d4\13\37\3 ")
        buf.write("\6 \u03d7\n \r \16 \u03d8\3 \2\2!\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>\2\3\3\2!%")
        buf.write("\2\u045e\2N\3\2\2\2\4r\3\2\2\2\6\177\3\2\2\2\b\u0082\3")
        buf.write("\2\2\2\n\u00c9\3\2\2\2\f\u0139\3\2\2\2\16\u013e\3\2\2")
        buf.write("\2\20\u0168\3\2\2\2\22\u0191\3\2\2\2\24\u01bb\3\2\2\2")
        buf.write("\26\u01d7\3\2\2\2\30\u020b\3\2\2\2\32\u022e\3\2\2\2\34")
        buf.write("\u0233\3\2\2\2\36\u0251\3\2\2\2 \u026f\3\2\2\2\"\u02a7")
        buf.write("\3\2\2\2$\u02b7\3\2\2\2&\u02bc\3\2\2\2(\u02d8\3\2\2\2")
        buf.write("*\u0307\3\2\2\2,\u0323\3\2\2\2.\u0350\3\2\2\2\60\u0369")
        buf.write("\3\2\2\2\62\u0371\3\2\2\2\64\u0373\3\2\2\2\66\u03a6\3")
        buf.write("\2\2\28\u03a9\3\2\2\2:\u03c0\3\2\2\2<\u03c9\3\2\2\2>\u03d6")
        buf.write("\3\2\2\2@B\7\3\2\2A@\3\2\2\2BE\3\2\2\2CA\3\2\2\2CD\3\2")
        buf.write("\2\2DF\3\2\2\2EC\3\2\2\2FH\5\4\3\2GI\7\3\2\2HG\3\2\2\2")
        buf.write("IJ\3\2\2\2JH\3\2\2\2JK\3\2\2\2KM\3\2\2\2LC\3\2\2\2MP\3")
        buf.write("\2\2\2NL\3\2\2\2NO\3\2\2\2OQ\3\2\2\2PN\3\2\2\2Q`\5 \21")
        buf.write("\2RT\7\3\2\2SR\3\2\2\2TU\3\2\2\2US\3\2\2\2UV\3\2\2\2V")
        buf.write("W\3\2\2\2W[\5\4\3\2XZ\7\3\2\2YX\3\2\2\2Z]\3\2\2\2[Y\3")
        buf.write("\2\2\2[\\\3\2\2\2\\_\3\2\2\2][\3\2\2\2^S\3\2\2\2_b\3\2")
        buf.write("\2\2`^\3\2\2\2`a\3\2\2\2ac\3\2\2\2b`\3\2\2\2cd\7\2\2\3")
        buf.write("d\3\3\2\2\2es\5\f\7\2fs\5\32\16\2gs\5\"\22\2hs\5$\23\2")
        buf.write("is\5\26\f\2js\5\b\5\2ks\5\n\6\2ln\7\37\2\2ml\3\2\2\2n")
        buf.write("q\3\2\2\2om\3\2\2\2op\3\2\2\2ps\3\2\2\2qo\3\2\2\2re\3")
        buf.write("\2\2\2rf\3\2\2\2rg\3\2\2\2rh\3\2\2\2ri\3\2\2\2rj\3\2\2")
        buf.write("\2rk\3\2\2\2ro\3\2\2\2s\5\3\2\2\2tv\7\37\2\2ut\3\2\2\2")
        buf.write("vy\3\2\2\2wu\3\2\2\2wx\3\2\2\2xz\3\2\2\2yw\3\2\2\2z{\5")
        buf.write("\4\3\2{|\7\3\2\2|~\3\2\2\2}w\3\2\2\2~\u0081\3\2\2\2\177")
        buf.write("}\3\2\2\2\177\u0080\3\2\2\2\u0080\7\3\2\2\2\u0081\177")
        buf.write("\3\2\2\2\u0082\u0084\7\4\2\2\u0083\u0085\7\37\2\2\u0084")
        buf.write("\u0083\3\2\2\2\u0085\u0086\3\2\2\2\u0086\u0084\3\2\2\2")
        buf.write("\u0086\u0087\3\2\2\2\u0087\u0088\3\2\2\2\u0088\u008a\7")
        buf.write("/\2\2\u0089\u008b\7\37\2\2\u008a\u0089\3\2\2\2\u008b\u008c")
        buf.write("\3\2\2\2\u008c\u008a\3\2\2\2\u008c\u008d\3\2\2\2\u008d")
        buf.write("\u008e\3\2\2\2\u008e\u0090\7\5\2\2\u008f\u0091\7\37\2")
        buf.write("\2\u0090\u008f\3\2\2\2\u0091\u0092\3\2\2\2\u0092\u0090")
        buf.write("\3\2\2\2\u0092\u0093\3\2\2\2\u0093\u0096\3\2\2\2\u0094")
        buf.write("\u0097\5> \2\u0095\u0097\7/\2\2\u0096\u0094\3\2\2\2\u0096")
        buf.write("\u0095\3\2\2\2\u0097\u0099\3\2\2\2\u0098\u009a\7\37\2")
        buf.write("\2\u0099\u0098\3\2\2\2\u009a\u009b\3\2\2\2\u009b\u0099")
        buf.write("\3\2\2\2\u009b\u009c\3\2\2\2\u009c\u009d\3\2\2\2\u009d")
        buf.write("\u009f\7\6\2\2\u009e\u00a0\7\37\2\2\u009f\u009e\3\2\2")
        buf.write("\2\u00a0\u00a1\3\2\2\2\u00a1\u009f\3\2\2\2\u00a1\u00a2")
        buf.write("\3\2\2\2\u00a2\u00a5\3\2\2\2\u00a3\u00a6\5> \2\u00a4\u00a6")
        buf.write("\7/\2\2\u00a5\u00a3\3\2\2\2\u00a5\u00a4\3\2\2\2\u00a6")
        buf.write("\u00a8\3\2\2\2\u00a7\u00a9\7\37\2\2\u00a8\u00a7\3\2\2")
        buf.write("\2\u00a9\u00aa\3\2\2\2\u00aa\u00a8\3\2\2\2\u00aa\u00ab")
        buf.write("\3\2\2\2\u00ab\u00ac\3\2\2\2\u00ac\u00ae\7\7\2\2\u00ad")
        buf.write("\u00af\7\37\2\2\u00ae\u00ad\3\2\2\2\u00af\u00b0\3\2\2")
        buf.write("\2\u00b0\u00ae\3\2\2\2\u00b0\u00b1\3\2\2\2\u00b1\u00b4")
        buf.write("\3\2\2\2\u00b2\u00b5\5> \2\u00b3\u00b5\7/\2\2\u00b4\u00b2")
        buf.write("\3\2\2\2\u00b4\u00b3\3\2\2\2\u00b5\u00b7\3\2\2\2\u00b6")
        buf.write("\u00b8\7\37\2\2\u00b7\u00b6\3\2\2\2\u00b8\u00b9\3\2\2")
        buf.write("\2\u00b9\u00b7\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00bb")
        buf.write("\3\2\2\2\u00bb\u00bc\7\b\2\2\u00bc\u00bd\7\3\2\2\u00bd")
        buf.write("\u00c1\5\6\4\2\u00be\u00c0\7\37\2\2\u00bf\u00be\3\2\2")
        buf.write("\2\u00c0\u00c3\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c1\u00c2")
        buf.write("\3\2\2\2\u00c2\u00c4\3\2\2\2\u00c3\u00c1\3\2\2\2\u00c4")
        buf.write("\u00c5\7\t\2\2\u00c5\t\3\2\2\2\u00c6\u00c8\7\37\2\2\u00c7")
        buf.write("\u00c6\3\2\2\2\u00c8\u00cb\3\2\2\2\u00c9\u00c7\3\2\2\2")
        buf.write("\u00c9\u00ca\3\2\2\2\u00ca\u00cc\3\2\2\2\u00cb\u00c9\3")
        buf.write("\2\2\2\u00cc\u00ce\7\n\2\2\u00cd\u00cf\7\37\2\2\u00ce")
        buf.write("\u00cd\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0\u00ce\3\2\2\2")
        buf.write("\u00d0\u00d1\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d4\5")
        buf.write("\66\34\2\u00d3\u00d5\7\37\2\2\u00d4\u00d3\3\2\2\2\u00d5")
        buf.write("\u00d6\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d6\u00d7\3\2\2\2")
        buf.write("\u00d7\u00d8\3\2\2\2\u00d8\u00d9\7\b\2\2\u00d9\u00dd\7")
        buf.write("\3\2\2\u00da\u00dc\7\37\2\2\u00db\u00da\3\2\2\2\u00dc")
        buf.write("\u00df\3\2\2\2\u00dd\u00db\3\2\2\2\u00dd\u00de\3\2\2\2")
        buf.write("\u00de\u00eb\3\2\2\2\u00df\u00dd\3\2\2\2\u00e0\u00e2\7")
        buf.write("\37\2\2\u00e1\u00e0\3\2\2\2\u00e2\u00e5\3\2\2\2\u00e3")
        buf.write("\u00e1\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e6\3\2\2\2")
        buf.write("\u00e5\u00e3\3\2\2\2\u00e6\u00e7\5\4\3\2\u00e7\u00e8\7")
        buf.write("\3\2\2\u00e8\u00ea\3\2\2\2\u00e9\u00e3\3\2\2\2\u00ea\u00ed")
        buf.write("\3\2\2\2\u00eb\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec")
        buf.write("\u0118\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ee\u00f0\7\13\2")
        buf.write("\2\u00ef\u00f1\7\37\2\2\u00f0\u00ef\3\2\2\2\u00f1\u00f2")
        buf.write("\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3")
        buf.write("\u00f4\3\2\2\2\u00f4\u00f6\7\n\2\2\u00f5\u00f7\7\37\2")
        buf.write("\2\u00f6\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00f6")
        buf.write("\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa")
        buf.write("\u00fc\5\66\34\2\u00fb\u00fd\7\37\2\2\u00fc\u00fb\3\2")
        buf.write("\2\2\u00fd\u00fe\3\2\2\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff")
        buf.write("\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u0101\7\b\2\2\u0101")
        buf.write("\u0105\7\3\2\2\u0102\u0104\7\37\2\2\u0103\u0102\3\2\2")
        buf.write("\2\u0104\u0107\3\2\2\2\u0105\u0103\3\2\2\2\u0105\u0106")
        buf.write("\3\2\2\2\u0106\u0113\3\2\2\2\u0107\u0105\3\2\2\2\u0108")
        buf.write("\u010a\7\37\2\2\u0109\u0108\3\2\2\2\u010a\u010d\3\2\2")
        buf.write("\2\u010b\u0109\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u010e")
        buf.write("\3\2\2\2\u010d\u010b\3\2\2\2\u010e\u010f\5\4\3\2\u010f")
        buf.write("\u0110\7\3\2\2\u0110\u0112\3\2\2\2\u0111\u010b\3\2\2\2")
        buf.write("\u0112\u0115\3\2\2\2\u0113\u0111\3\2\2\2\u0113\u0114\3")
        buf.write("\2\2\2\u0114\u0117\3\2\2\2\u0115\u0113\3\2\2\2\u0116\u00ee")
        buf.write("\3\2\2\2\u0117\u011a\3\2\2\2\u0118\u0116\3\2\2\2\u0118")
        buf.write("\u0119\3\2\2\2\u0119\u012b\3\2\2\2\u011a\u0118\3\2\2\2")
        buf.write("\u011b\u011c\7\f\2\2\u011c\u0128\7\3\2\2\u011d\u011f\7")
        buf.write("\37\2\2\u011e\u011d\3\2\2\2\u011f\u0122\3\2\2\2\u0120")
        buf.write("\u011e\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u0123\3\2\2\2")
        buf.write("\u0122\u0120\3\2\2\2\u0123\u0124\5\4\3\2\u0124\u0125\7")
        buf.write("\3\2\2\u0125\u0127\3\2\2\2\u0126\u0120\3\2\2\2\u0127\u012a")
        buf.write("\3\2\2\2\u0128\u0126\3\2\2\2\u0128\u0129\3\2\2\2\u0129")
        buf.write("\u012c\3\2\2\2\u012a\u0128\3\2\2\2\u012b\u011b\3\2\2\2")
        buf.write("\u012b\u012c\3\2\2\2\u012c\u0130\3\2\2\2\u012d\u012f\7")
        buf.write("\37\2\2\u012e\u012d\3\2\2\2\u012f\u0132\3\2\2\2\u0130")
        buf.write("\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0133\3\2\2\2")
        buf.write("\u0132\u0130\3\2\2\2\u0133\u0134\7\t\2\2\u0134\13\3\2")
        buf.write("\2\2\u0135\u013a\5\16\b\2\u0136\u013a\5\20\t\2\u0137\u013a")
        buf.write("\5\22\n\2\u0138\u013a\5\24\13\2\u0139\u0135\3\2\2\2\u0139")
        buf.write("\u0136\3\2\2\2\u0139\u0137\3\2\2\2\u0139\u0138\3\2\2\2")
        buf.write("\u013a\r\3\2\2\2\u013b\u013d\7\37\2\2\u013c\u013b\3\2")
        buf.write("\2\2\u013d\u0140\3\2\2\2\u013e\u013c\3\2\2\2\u013e\u013f")
        buf.write("\3\2\2\2\u013f\u0141\3\2\2\2\u0140\u013e\3\2\2\2\u0141")
        buf.write("\u0143\7\r\2\2\u0142\u0144\7\37\2\2\u0143\u0142\3\2\2")
        buf.write("\2\u0144\u0145\3\2\2\2\u0145\u0143\3\2\2\2\u0145\u0146")
        buf.write("\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u014b\7/\2\2\u0148")
        buf.write("\u014a\7\37\2\2\u0149\u0148\3\2\2\2\u014a\u014d\3\2\2")
        buf.write("\2\u014b\u0149\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014e")
        buf.write("\3\2\2\2\u014d\u014b\3\2\2\2\u014e\u0152\7\16\2\2\u014f")
        buf.write("\u0151\7\37\2\2\u0150\u014f\3\2\2\2\u0151\u0154\3\2\2")
        buf.write("\2\u0152\u0150\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0155")
        buf.write("\3\2\2\2\u0154\u0152\3\2\2\2\u0155\u0159\5<\37\2\u0156")
        buf.write("\u0158\7\37\2\2\u0157\u0156\3\2\2\2\u0158\u015b\3\2\2")
        buf.write("\2\u0159\u0157\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015c")
        buf.write("\3\2\2\2\u015b\u0159\3\2\2\2\u015c\u0160\7\17\2\2\u015d")
        buf.write("\u015f\7\37\2\2\u015e\u015d\3\2\2\2\u015f\u0162\3\2\2")
        buf.write("\2\u0160\u015e\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u0163")
        buf.write("\3\2\2\2\u0162\u0160\3\2\2\2\u0163\u0164\5<\37\2\u0164")
        buf.write("\17\3\2\2\2\u0165\u0167\7\37\2\2\u0166\u0165\3\2\2\2\u0167")
        buf.write("\u016a\3\2\2\2\u0168\u0166\3\2\2\2\u0168\u0169\3\2\2\2")
        buf.write("\u0169\u016b\3\2\2\2\u016a\u0168\3\2\2\2\u016b\u016d\7")
        buf.write("\20\2\2\u016c\u016e\7\37\2\2\u016d\u016c\3\2\2\2\u016e")
        buf.write("\u016f\3\2\2\2\u016f\u016d\3\2\2\2\u016f\u0170\3\2\2\2")
        buf.write("\u0170\u0171\3\2\2\2\u0171\u0175\7/\2\2\u0172\u0174\7")
        buf.write("\37\2\2\u0173\u0172\3\2\2\2\u0174\u0177\3\2\2\2\u0175")
        buf.write("\u0173\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0178\3\2\2\2")
        buf.write("\u0177\u0175\3\2\2\2\u0178\u017c\7\16\2\2\u0179\u017b")
        buf.write("\7\37\2\2\u017a\u0179\3\2\2\2\u017b\u017e\3\2\2\2\u017c")
        buf.write("\u017a\3\2\2\2\u017c\u017d\3\2\2\2\u017d\u017f\3\2\2\2")
        buf.write("\u017e\u017c\3\2\2\2\u017f\u0183\7/\2\2\u0180\u0182\7")
        buf.write("\37\2\2\u0181\u0180\3\2\2\2\u0182\u0185\3\2\2\2\u0183")
        buf.write("\u0181\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0186\3\2\2\2")
        buf.write("\u0185\u0183\3\2\2\2\u0186\u0188\7\17\2\2\u0187\u0189")
        buf.write("\7\37\2\2\u0188\u0187\3\2\2\2\u0189\u018a\3\2\2\2\u018a")
        buf.write("\u0188\3\2\2\2\u018a\u018b\3\2\2\2\u018b\u018c\3\2\2\2")
        buf.write("\u018c\u018d\7/\2\2\u018d\21\3\2\2\2\u018e\u0190\7\37")
        buf.write("\2\2\u018f\u018e\3\2\2\2\u0190\u0193\3\2\2\2\u0191\u018f")
        buf.write("\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0194\3\2\2\2\u0193")
        buf.write("\u0191\3\2\2\2\u0194\u0196\7\21\2\2\u0195\u0197\7\37\2")
        buf.write("\2\u0196\u0195\3\2\2\2\u0197\u0198\3\2\2\2\u0198\u0196")
        buf.write("\3\2\2\2\u0198\u0199\3\2\2\2\u0199\u019a\3\2\2\2\u019a")
        buf.write("\u019e\7/\2\2\u019b\u019d\7\37\2\2\u019c\u019b\3\2\2\2")
        buf.write("\u019d\u01a0\3\2\2\2\u019e\u019c\3\2\2\2\u019e\u019f\3")
        buf.write("\2\2\2\u019f\u01a1\3\2\2\2\u01a0\u019e\3\2\2\2\u01a1\u01a5")
        buf.write("\7\16\2\2\u01a2\u01a4\7\37\2\2\u01a3\u01a2\3\2\2\2\u01a4")
        buf.write("\u01a7\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a5\u01a6\3\2\2\2")
        buf.write("\u01a6\u01a8\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a8\u01ac\7")
        buf.write("/\2\2\u01a9\u01ab\7\37\2\2\u01aa\u01a9\3\2\2\2\u01ab\u01ae")
        buf.write("\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad")
        buf.write("\u01af\3\2\2\2\u01ae\u01ac\3\2\2\2\u01af\u01b3\7\17\2")
        buf.write("\2\u01b0\u01b2\7\37\2\2\u01b1\u01b0\3\2\2\2\u01b2\u01b5")
        buf.write("\3\2\2\2\u01b3\u01b1\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4")
        buf.write("\u01b6\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b6\u01b7\5<\37\2")
        buf.write("\u01b7\23\3\2\2\2\u01b8\u01ba\7\37\2\2\u01b9\u01b8\3\2")
        buf.write("\2\2\u01ba\u01bd\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bb\u01bc")
        buf.write("\3\2\2\2\u01bc\u01be\3\2\2\2\u01bd\u01bb\3\2\2\2\u01be")
        buf.write("\u01c0\7\22\2\2\u01bf\u01c1\7\37\2\2\u01c0\u01bf\3\2\2")
        buf.write("\2\u01c1\u01c2\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2\u01c3")
        buf.write("\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c8\7/\2\2\u01c5")
        buf.write("\u01c7\7\37\2\2\u01c6\u01c5\3\2\2\2\u01c7\u01ca\3\2\2")
        buf.write("\2\u01c8\u01c6\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01cb")
        buf.write("\3\2\2\2\u01ca\u01c8\3\2\2\2\u01cb\u01cf\7\16\2\2\u01cc")
        buf.write("\u01ce\7\37\2\2\u01cd\u01cc\3\2\2\2\u01ce\u01d1\3\2\2")
        buf.write("\2\u01cf\u01cd\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d2")
        buf.write("\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d2\u01d3\7/\2\2\u01d3")
        buf.write("\25\3\2\2\2\u01d4\u01d6\7\37\2\2\u01d5\u01d4\3\2\2\2\u01d6")
        buf.write("\u01d9\3\2\2\2\u01d7\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2")
        buf.write("\u01d8\u01da\3\2\2\2\u01d9\u01d7\3\2\2\2\u01da\u01dc\7")
        buf.write("\23\2\2\u01db\u01dd\7\37\2\2\u01dc\u01db\3\2\2\2\u01dd")
        buf.write("\u01de\3\2\2\2\u01de\u01dc\3\2\2\2\u01de\u01df\3\2\2\2")
        buf.write("\u01df\u01e0\3\2\2\2\u01e0\u01e4\7/\2\2\u01e1\u01e3\7")
        buf.write("\37\2\2\u01e2\u01e1\3\2\2\2\u01e3\u01e6\3\2\2\2\u01e4")
        buf.write("\u01e2\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e7\3\2\2\2")
        buf.write("\u01e6\u01e4\3\2\2\2\u01e7\u01eb\7\16\2\2\u01e8\u01ea")
        buf.write("\7\37\2\2\u01e9\u01e8\3\2\2\2\u01ea\u01ed\3\2\2\2\u01eb")
        buf.write("\u01e9\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ee\3\2\2\2")
        buf.write("\u01ed\u01eb\3\2\2\2\u01ee\u01f2\7/\2\2\u01ef\u01f1\7")
        buf.write("\37\2\2\u01f0\u01ef\3\2\2\2\u01f1\u01f4\3\2\2\2\u01f2")
        buf.write("\u01f0\3\2\2\2\u01f2\u01f3\3\2\2\2\u01f3\u0205\3\2\2\2")
        buf.write("\u01f4\u01f2\3\2\2\2\u01f5\u01f9\7\17\2\2\u01f6\u01f8")
        buf.write("\7\37\2\2\u01f7\u01f6\3\2\2\2\u01f8\u01fb\3\2\2\2\u01f9")
        buf.write("\u01f7\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fc\3\2\2\2")
        buf.write("\u01fb\u01f9\3\2\2\2\u01fc\u0200\7/\2\2\u01fd\u01ff\7")
        buf.write("\37\2\2\u01fe\u01fd\3\2\2\2\u01ff\u0202\3\2\2\2\u0200")
        buf.write("\u01fe\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0204\3\2\2\2")
        buf.write("\u0202\u0200\3\2\2\2\u0203\u01f5\3\2\2\2\u0204\u0207\3")
        buf.write("\2\2\2\u0205\u0203\3\2\2\2\u0205\u0206\3\2\2\2\u0206\27")
        buf.write("\3\2\2\2\u0207\u0205\3\2\2\2\u0208\u020a\7\37\2\2\u0209")
        buf.write("\u0208\3\2\2\2\u020a\u020d\3\2\2\2\u020b\u0209\3\2\2\2")
        buf.write("\u020b\u020c\3\2\2\2\u020c\u020e\3\2\2\2\u020d\u020b\3")
        buf.write("\2\2\2\u020e\u0212\7/\2\2\u020f\u0211\7\37\2\2\u0210\u020f")
        buf.write("\3\2\2\2\u0211\u0214\3\2\2\2\u0212\u0210\3\2\2\2\u0212")
        buf.write("\u0213\3\2\2\2\u0213\u0215\3\2\2\2\u0214\u0212\3\2\2\2")
        buf.write("\u0215\u0219\7\24\2\2\u0216\u0218\7\37\2\2\u0217\u0216")
        buf.write("\3\2\2\2\u0218\u021b\3\2\2\2\u0219\u0217\3\2\2\2\u0219")
        buf.write("\u021a\3\2\2\2\u021a\u021e\3\2\2\2\u021b\u0219\3\2\2\2")
        buf.write("\u021c\u021f\5> \2\u021d\u021f\7/\2\2\u021e\u021c\3\2")
        buf.write("\2\2\u021e\u021d\3\2\2\2\u021f\u0223\3\2\2\2\u0220\u0222")
        buf.write("\7\37\2\2\u0221\u0220\3\2\2\2\u0222\u0225\3\2\2\2\u0223")
        buf.write("\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0226\3\2\2\2")
        buf.write("\u0225\u0223\3\2\2\2\u0226\u0228\7\25\2\2\u0227\u0229")
        buf.write("\7\37\2\2\u0228\u0227\3\2\2\2\u0229\u022a\3\2\2\2\u022a")
        buf.write("\u0228\3\2\2\2\u022a\u022b\3\2\2\2\u022b\31\3\2\2\2\u022c")
        buf.write("\u022f\5\34\17\2\u022d\u022f\5\36\20\2\u022e\u022c\3\2")
        buf.write("\2\2\u022e\u022d\3\2\2\2\u022f\33\3\2\2\2\u0230\u0232")
        buf.write("\7\37\2\2\u0231\u0230\3\2\2\2\u0232\u0235\3\2\2\2\u0233")
        buf.write("\u0231\3\2\2\2\u0233\u0234\3\2\2\2\u0234\u0236\3\2\2\2")
        buf.write("\u0235\u0233\3\2\2\2\u0236\u0238\7\26\2\2\u0237\u0239")
        buf.write("\7\37\2\2\u0238\u0237\3\2\2\2\u0239\u023a\3\2\2\2\u023a")
        buf.write("\u0238\3\2\2\2\u023a\u023b\3\2\2\2\u023b\u023c\3\2\2\2")
        buf.write("\u023c\u0240\7/\2\2\u023d\u023f\7\37\2\2\u023e\u023d\3")
        buf.write("\2\2\2\u023f\u0242\3\2\2\2\u0240\u023e\3\2\2\2\u0240\u0241")
        buf.write("\3\2\2\2\u0241\u0243\3\2\2\2\u0242\u0240\3\2\2\2\u0243")
        buf.write("\u0247\7\16\2\2\u0244\u0246\7\37\2\2\u0245\u0244\3\2\2")
        buf.write("\2\u0246\u0249\3\2\2\2\u0247\u0245\3\2\2\2\u0247\u0248")
        buf.write("\3\2\2\2\u0248\u024c\3\2\2\2\u0249\u0247\3\2\2\2\u024a")
        buf.write("\u024d\5<\37\2\u024b\u024d\7/\2\2\u024c\u024a\3\2\2\2")
        buf.write("\u024c\u024b\3\2\2\2\u024d\35\3\2\2\2\u024e\u0250\7\37")
        buf.write("\2\2\u024f\u024e\3\2\2\2\u0250\u0253\3\2\2\2\u0251\u024f")
        buf.write("\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0254\3\2\2\2\u0253")
        buf.write("\u0251\3\2\2\2\u0254\u0256\7\27\2\2\u0255\u0257\7\37\2")
        buf.write("\2\u0256\u0255\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0256")
        buf.write("\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u025a\3\2\2\2\u025a")
        buf.write("\u025e\7/\2\2\u025b\u025d\7\37\2\2\u025c\u025b\3\2\2\2")
        buf.write("\u025d\u0260\3\2\2\2\u025e\u025c\3\2\2\2\u025e\u025f\3")
        buf.write("\2\2\2\u025f\u0261\3\2\2\2\u0260\u025e\3\2\2\2\u0261\u0265")
        buf.write("\7\16\2\2\u0262\u0264\7\37\2\2\u0263\u0262\3\2\2\2\u0264")
        buf.write("\u0267\3\2\2\2\u0265\u0263\3\2\2\2\u0265\u0266\3\2\2\2")
        buf.write("\u0266\u026a\3\2\2\2\u0267\u0265\3\2\2\2\u0268\u026b\5")
        buf.write("> \2\u0269\u026b\7/\2\2\u026a\u0268\3\2\2\2\u026a\u0269")
        buf.write("\3\2\2\2\u026b\37\3\2\2\2\u026c\u026e\7\37\2\2\u026d\u026c")
        buf.write("\3\2\2\2\u026e\u0271\3\2\2\2\u026f\u026d\3\2\2\2\u026f")
        buf.write("\u0270\3\2\2\2\u0270\u0272\3\2\2\2\u0271\u026f\3\2\2\2")
        buf.write("\u0272\u0276\7\30\2\2\u0273\u0275\7\37\2\2\u0274\u0273")
        buf.write("\3\2\2\2\u0275\u0278\3\2\2\2\u0276\u0274\3\2\2\2\u0276")
        buf.write("\u0277\3\2\2\2\u0277\u0279\3\2\2\2\u0278\u0276\3\2\2\2")
        buf.write("\u0279\u027d\7\16\2\2\u027a\u027c\7\37\2\2\u027b\u027a")
        buf.write("\3\2\2\2\u027c\u027f\3\2\2\2\u027d\u027b\3\2\2\2\u027d")
        buf.write("\u027e\3\2\2\2\u027e\u0282\3\2\2\2\u027f\u027d\3\2\2\2")
        buf.write("\u0280\u0283\5<\37\2\u0281\u0283\7/\2\2\u0282\u0280\3")
        buf.write("\2\2\2\u0282\u0281\3\2\2\2\u0283\u0287\3\2\2\2\u0284\u0286")
        buf.write("\7\37\2\2\u0285\u0284\3\2\2\2\u0286\u0289\3\2\2\2\u0287")
        buf.write("\u0285\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u028a\3\2\2\2")
        buf.write("\u0289\u0287\3\2\2\2\u028a\u028e\7\17\2\2\u028b\u028d")
        buf.write("\7\37\2\2\u028c\u028b\3\2\2\2\u028d\u0290\3\2\2\2\u028e")
        buf.write("\u028c\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u0293\3\2\2\2")
        buf.write("\u0290\u028e\3\2\2\2\u0291\u0294\5<\37\2\u0292\u0294\7")
        buf.write("/\2\2\u0293\u0291\3\2\2\2\u0293\u0292\3\2\2\2\u0294\u0298")
        buf.write("\3\2\2\2\u0295\u0297\7\37\2\2\u0296\u0295\3\2\2\2\u0297")
        buf.write("\u029a\3\2\2\2\u0298\u0296\3\2\2\2\u0298\u0299\3\2\2\2")
        buf.write("\u0299\u029b\3\2\2\2\u029a\u0298\3\2\2\2\u029b\u029f\7")
        buf.write("\17\2\2\u029c\u029e\7\37\2\2\u029d\u029c\3\2\2\2\u029e")
        buf.write("\u02a1\3\2\2\2\u029f\u029d\3\2\2\2\u029f\u02a0\3\2\2\2")
        buf.write("\u02a0\u02a2\3\2\2\2\u02a1\u029f\3\2\2\2\u02a2\u02a3\7")
        buf.write(",\2\2\u02a3!\3\2\2\2\u02a4\u02a6\7\37\2\2\u02a5\u02a4")
        buf.write("\3\2\2\2\u02a6\u02a9\3\2\2\2\u02a7\u02a5\3\2\2\2\u02a7")
        buf.write("\u02a8\3\2\2\2\u02a8\u02aa\3\2\2\2\u02a9\u02a7\3\2\2\2")
        buf.write("\u02aa\u02ac\7\31\2\2\u02ab\u02ad\7\37\2\2\u02ac\u02ab")
        buf.write("\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02ac\3\2\2\2\u02ae")
        buf.write("\u02af\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b1\7/\2\2")
        buf.write("\u02b1#\3\2\2\2\u02b2\u02b8\5&\24\2\u02b3\u02b8\5(\25")
        buf.write("\2\u02b4\u02b8\5*\26\2\u02b5\u02b8\5,\27\2\u02b6\u02b8")
        buf.write("\5.\30\2\u02b7\u02b2\3\2\2\2\u02b7\u02b3\3\2\2\2\u02b7")
        buf.write("\u02b4\3\2\2\2\u02b7\u02b5\3\2\2\2\u02b7\u02b6\3\2\2\2")
        buf.write("\u02b8%\3\2\2\2\u02b9\u02bb\7\37\2\2\u02ba\u02b9\3\2\2")
        buf.write("\2\u02bb\u02be\3\2\2\2\u02bc\u02ba\3\2\2\2\u02bc\u02bd")
        buf.write("\3\2\2\2\u02bd\u02bf\3\2\2\2\u02be\u02bc\3\2\2\2\u02bf")
        buf.write("\u02c1\7\32\2\2\u02c0\u02c2\7\37\2\2\u02c1\u02c0\3\2\2")
        buf.write("\2\u02c2\u02c3\3\2\2\2\u02c3\u02c1\3\2\2\2\u02c3\u02c4")
        buf.write("\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02c9\7/\2\2\u02c6")
        buf.write("\u02c8\7\37\2\2\u02c7\u02c6\3\2\2\2\u02c8\u02cb\3\2\2")
        buf.write("\2\u02c9\u02c7\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02cc")
        buf.write("\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cc\u02d0\7\16\2\2\u02cd")
        buf.write("\u02cf\7\37\2\2\u02ce\u02cd\3\2\2\2\u02cf\u02d2\3\2\2")
        buf.write("\2\u02d0\u02ce\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d3")
        buf.write("\3\2\2\2\u02d2\u02d0\3\2\2\2\u02d3\u02d4\7,\2\2\u02d4")
        buf.write("\'\3\2\2\2\u02d5\u02d7\7\37\2\2\u02d6\u02d5\3\2\2\2\u02d7")
        buf.write("\u02da\3\2\2\2\u02d8\u02d6\3\2\2\2\u02d8\u02d9\3\2\2\2")
        buf.write("\u02d9\u02db\3\2\2\2\u02da\u02d8\3\2\2\2\u02db\u02dd\7")
        buf.write("\33\2\2\u02dc\u02de\7\37\2\2\u02dd\u02dc\3\2\2\2\u02de")
        buf.write("\u02df\3\2\2\2\u02df\u02dd\3\2\2\2\u02df\u02e0\3\2\2\2")
        buf.write("\u02e0\u02e1\3\2\2\2\u02e1\u02e5\7/\2\2\u02e2\u02e4\7")
        buf.write("\37\2\2\u02e3\u02e2\3\2\2\2\u02e4\u02e7\3\2\2\2\u02e5")
        buf.write("\u02e3\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e8\3\2\2\2")
        buf.write("\u02e7\u02e5\3\2\2\2\u02e8\u02ec\7\16\2\2\u02e9\u02eb")
        buf.write("\7\37\2\2\u02ea\u02e9\3\2\2\2\u02eb\u02ee\3\2\2\2\u02ec")
        buf.write("\u02ea\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02f1\3\2\2\2")
        buf.write("\u02ee\u02ec\3\2\2\2\u02ef\u02f2\5<\37\2\u02f0\u02f2\7")
        buf.write("/\2\2\u02f1\u02ef\3\2\2\2\u02f1\u02f0\3\2\2\2\u02f2\u02f6")
        buf.write("\3\2\2\2\u02f3\u02f5\7\37\2\2\u02f4\u02f3\3\2\2\2\u02f5")
        buf.write("\u02f8\3\2\2\2\u02f6\u02f4\3\2\2\2\u02f6\u02f7\3\2\2\2")
        buf.write("\u02f7\u02f9\3\2\2\2\u02f8\u02f6\3\2\2\2\u02f9\u02fd\7")
        buf.write("\17\2\2\u02fa\u02fc\7\37\2\2\u02fb\u02fa\3\2\2\2\u02fc")
        buf.write("\u02ff\3\2\2\2\u02fd\u02fb\3\2\2\2\u02fd\u02fe\3\2\2\2")
        buf.write("\u02fe\u0302\3\2\2\2\u02ff\u02fd\3\2\2\2\u0300\u0303\5")
        buf.write("<\37\2\u0301\u0303\7/\2\2\u0302\u0300\3\2\2\2\u0302\u0301")
        buf.write("\3\2\2\2\u0303)\3\2\2\2\u0304\u0306\7\37\2\2\u0305\u0304")
        buf.write("\3\2\2\2\u0306\u0309\3\2\2\2\u0307\u0305\3\2\2\2\u0307")
        buf.write("\u0308\3\2\2\2\u0308\u030a\3\2\2\2\u0309\u0307\3\2\2\2")
        buf.write("\u030a\u030c\7\34\2\2\u030b\u030d\7\37\2\2\u030c\u030b")
        buf.write("\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u030c\3\2\2\2\u030e")
        buf.write("\u030f\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0314\7/\2\2")
        buf.write("\u0311\u0313\7\37\2\2\u0312\u0311\3\2\2\2\u0313\u0316")
        buf.write("\3\2\2\2\u0314\u0312\3\2\2\2\u0314\u0315\3\2\2\2\u0315")
        buf.write("\u0317\3\2\2\2\u0316\u0314\3\2\2\2\u0317\u031b\7\16\2")
        buf.write("\2\u0318\u031a\7\37\2\2\u0319\u0318\3\2\2\2\u031a\u031d")
        buf.write("\3\2\2\2\u031b\u0319\3\2\2\2\u031b\u031c\3\2\2\2\u031c")
        buf.write("\u031e\3\2\2\2\u031d\u031b\3\2\2\2\u031e\u031f\7/\2\2")
        buf.write("\u031f+\3\2\2\2\u0320\u0322\7\37\2\2\u0321\u0320\3\2\2")
        buf.write("\2\u0322\u0325\3\2\2\2\u0323\u0321\3\2\2\2\u0323\u0324")
        buf.write("\3\2\2\2\u0324\u0326\3\2\2\2\u0325\u0323\3\2\2\2\u0326")
        buf.write("\u0328\7\35\2\2\u0327\u0329\7\37\2\2\u0328\u0327\3\2\2")
        buf.write("\2\u0329\u032a\3\2\2\2\u032a\u0328\3\2\2\2\u032a\u032b")
        buf.write("\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u0330\7/\2\2\u032d")
        buf.write("\u032f\7\37\2\2\u032e\u032d\3\2\2\2\u032f\u0332\3\2\2")
        buf.write("\2\u0330\u032e\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0333")
        buf.write("\3\2\2\2\u0332\u0330\3\2\2\2\u0333\u0337\7\16\2\2\u0334")
        buf.write("\u0336\7\37\2\2\u0335\u0334\3\2\2\2\u0336\u0339\3\2\2")
        buf.write("\2\u0337\u0335\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u033c")
        buf.write("\3\2\2\2\u0339\u0337\3\2\2\2\u033a\u033d\5<\37\2\u033b")
        buf.write("\u033d\7/\2\2\u033c\u033a\3\2\2\2\u033c\u033b\3\2\2\2")
        buf.write("\u033d\u0341\3\2\2\2\u033e\u0340\7\37\2\2\u033f\u033e")
        buf.write("\3\2\2\2\u0340\u0343\3\2\2\2\u0341\u033f\3\2\2\2\u0341")
        buf.write("\u0342\3\2\2\2\u0342\u0344\3\2\2\2\u0343\u0341\3\2\2\2")
        buf.write("\u0344\u0348\7\17\2\2\u0345\u0347\7\37\2\2\u0346\u0345")
        buf.write("\3\2\2\2\u0347\u034a\3\2\2\2\u0348\u0346\3\2\2\2\u0348")
        buf.write("\u0349\3\2\2\2\u0349\u034b\3\2\2\2\u034a\u0348\3\2\2\2")
        buf.write("\u034b\u034c\7/\2\2\u034c-\3\2\2\2\u034d\u034f\7\37\2")
        buf.write("\2\u034e\u034d\3\2\2\2\u034f\u0352\3\2\2\2\u0350\u034e")
        buf.write("\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u0353\3\2\2\2\u0352")
        buf.write("\u0350\3\2\2\2\u0353\u0355\7\36\2\2\u0354\u0356\7\37\2")
        buf.write("\2\u0355\u0354\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u0355")
        buf.write("\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u0359\3\2\2\2\u0359")
        buf.write("\u035d\7/\2\2\u035a\u035c\7\37\2\2\u035b\u035a\3\2\2\2")
        buf.write("\u035c\u035f\3\2\2\2\u035d\u035b\3\2\2\2\u035d\u035e\3")
        buf.write("\2\2\2\u035e\u0360\3\2\2\2\u035f\u035d\3\2\2\2\u0360\u0364")
        buf.write("\7\16\2\2\u0361\u0363\7\37\2\2\u0362\u0361\3\2\2\2\u0363")
        buf.write("\u0366\3\2\2\2\u0364\u0362\3\2\2\2\u0364\u0365\3\2\2\2")
        buf.write("\u0365\u0367\3\2\2\2\u0366\u0364\3\2\2\2\u0367\u0368\5")
        buf.write("<\37\2\u0368/\3\2\2\2\u0369\u036a\t\2\2\2\u036a\61\3\2")
        buf.write("\2\2\u036b\u0372\7(\2\2\u036c\u0372\7)\2\2\u036d\u0372")
        buf.write("\7*\2\2\u036e\u0372\7+\2\2\u036f\u0372\7\'\2\2\u0370\u0372")
        buf.write("\5\64\33\2\u0371\u036b\3\2\2\2\u0371\u036c\3\2\2\2\u0371")
        buf.write("\u036d\3\2\2\2\u0371\u036e\3\2\2\2\u0371\u036f\3\2\2\2")
        buf.write("\u0371\u0370\3\2\2\2\u0372\63\3\2\2\2\u0373\u0374\7&\2")
        buf.write("\2\u0374\u0375\7\'\2\2\u0375\65\3\2\2\2\u0376\u0378\7")
        buf.write("\37\2\2\u0377\u0376\3\2\2\2\u0378\u037b\3\2\2\2\u0379")
        buf.write("\u0377\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037e\3\2\2\2")
        buf.write("\u037b\u0379\3\2\2\2\u037c\u037f\5<\37\2\u037d\u037f\7")
        buf.write("/\2\2\u037e\u037c\3\2\2\2\u037e\u037d\3\2\2\2\u037f\u0383")
        buf.write("\3\2\2\2\u0380\u0382\7\37\2\2\u0381\u0380\3\2\2\2\u0382")
        buf.write("\u0385\3\2\2\2\u0383\u0381\3\2\2\2\u0383\u0384\3\2\2\2")
        buf.write("\u0384\u0386\3\2\2\2\u0385\u0383\3\2\2\2\u0386\u038a\5")
        buf.write("\62\32\2\u0387\u0389\7\37\2\2\u0388\u0387\3\2\2\2\u0389")
        buf.write("\u038c\3\2\2\2\u038a\u0388\3\2\2\2\u038a\u038b\3\2\2\2")
        buf.write("\u038b\u038f\3\2\2\2\u038c\u038a\3\2\2\2\u038d\u0390\5")
        buf.write("<\37\2\u038e\u0390\7/\2\2\u038f\u038d\3\2\2\2\u038f\u038e")
        buf.write("\3\2\2\2\u0390\u03a7\3\2\2\2\u0391\u0394\5> \2\u0392\u0394")
        buf.write("\7/\2\2\u0393\u0391\3\2\2\2\u0393\u0392\3\2\2\2\u0394")
        buf.write("\u0398\3\2\2\2\u0395\u0397\7\37\2\2\u0396\u0395\3\2\2")
        buf.write("\2\u0397\u039a\3\2\2\2\u0398\u0396\3\2\2\2\u0398\u0399")
        buf.write("\3\2\2\2\u0399\u039b\3\2\2\2\u039a\u0398\3\2\2\2\u039b")
        buf.write("\u039f\5\62\32\2\u039c\u039e\7\37\2\2\u039d\u039c\3\2")
        buf.write("\2\2\u039e\u03a1\3\2\2\2\u039f\u039d\3\2\2\2\u039f\u03a0")
        buf.write("\3\2\2\2\u03a0\u03a4\3\2\2\2\u03a1\u039f\3\2\2\2\u03a2")
        buf.write("\u03a5\5> \2\u03a3\u03a5\7/\2\2\u03a4\u03a2\3\2\2\2\u03a4")
        buf.write("\u03a3\3\2\2\2\u03a5\u03a7\3\2\2\2\u03a6\u0379\3\2\2\2")
        buf.write("\u03a6\u0393\3\2\2\2\u03a7\67\3\2\2\2\u03a8\u03aa\7\"")
        buf.write("\2\2\u03a9\u03a8\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ad")
        buf.write("\3\2\2\2\u03ab\u03ae\5:\36\2\u03ac\u03ae\7/\2\2\u03ad")
        buf.write("\u03ab\3\2\2\2\u03ad\u03ac\3\2\2\2\u03ae\u03b6\3\2\2\2")
        buf.write("\u03af\u03b2\5\60\31\2\u03b0\u03b3\58\35\2\u03b1\u03b3")
        buf.write("\7/\2\2\u03b2\u03b0\3\2\2\2\u03b2\u03b1\3\2\2\2\u03b3")
        buf.write("\u03b5\3\2\2\2\u03b4\u03af\3\2\2\2\u03b5\u03b8\3\2\2\2")
        buf.write("\u03b6\u03b4\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b79\3\2\2")
        buf.write("\2\u03b8\u03b6\3\2\2\2\u03b9\u03bb\7.\2\2\u03ba\u03b9")
        buf.write("\3\2\2\2\u03bb\u03be\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03bf\3\2\2\2\u03be\u03bc\3\2\2\2")
        buf.write("\u03bf\u03c1\7-\2\2\u03c0\u03bc\3\2\2\2\u03c0\u03c1\3")
        buf.write("\2\2\2\u03c1\u03c3\3\2\2\2\u03c2\u03c4\7.\2\2\u03c3\u03c2")
        buf.write("\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c3\3\2\2\2\u03c5")
        buf.write("\u03c6\3\2\2\2\u03c6;\3\2\2\2\u03c7\u03ca\5:\36\2\u03c8")
        buf.write("\u03ca\7/\2\2\u03c9\u03c7\3\2\2\2\u03c9\u03c8\3\2\2\2")
        buf.write("\u03ca\u03d2\3\2\2\2\u03cb\u03ce\5\60\31\2\u03cc\u03cf")
        buf.write("\5:\36\2\u03cd\u03cf\7/\2\2\u03ce\u03cc\3\2\2\2\u03ce")
        buf.write("\u03cd\3\2\2\2\u03cf\u03d1\3\2\2\2\u03d0\u03cb\3\2\2\2")
        buf.write("\u03d1\u03d4\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d2\u03d3\3")
        buf.write("\2\2\2\u03d3=\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d5\u03d7")
        buf.write("\7.\2\2\u03d6\u03d5\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8")
        buf.write("\u03d6\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9?\3\2\2\2\u0096")
        buf.write("CJNU[`orw\177\u0086\u008c\u0092\u0096\u009b\u00a1\u00a5")
        buf.write("\u00aa\u00b0\u00b4\u00b9\u00c1\u00c9\u00d0\u00d6\u00dd")
        buf.write("\u00e3\u00eb\u00f2\u00f8\u00fe\u0105\u010b\u0113\u0118")
        buf.write("\u0120\u0128\u012b\u0130\u0139\u013e\u0145\u014b\u0152")
        buf.write("\u0159\u0160\u0168\u016f\u0175\u017c\u0183\u018a\u0191")
        buf.write("\u0198\u019e\u01a5\u01ac\u01b3\u01bb\u01c2\u01c8\u01cf")
        buf.write("\u01d7\u01de\u01e4\u01eb\u01f2\u01f9\u0200\u0205\u020b")
        buf.write("\u0212\u0219\u021e\u0223\u022a\u022e\u0233\u023a\u0240")
        buf.write("\u0247\u024c\u0251\u0258\u025e\u0265\u026a\u026f\u0276")
        buf.write("\u027d\u0282\u0287\u028e\u0293\u0298\u029f\u02a7\u02ae")
        buf.write("\u02b7\u02bc\u02c3\u02c9\u02d0\u02d8\u02df\u02e5\u02ec")
        buf.write("\u02f1\u02f6\u02fd\u0302\u0307\u030e\u0314\u031b\u0323")
        buf.write("\u032a\u0330\u0337\u033c\u0341\u0348\u0350\u0357\u035d")
        buf.write("\u0364\u0371\u0379\u037e\u0383\u038a\u038f\u0393\u0398")
        buf.write("\u039f\u03a4\u03a6\u03a9\u03ad\u03b2\u03b6\u03bc\u03c0")
        buf.write("\u03c5\u03c9\u03ce\u03d2\u03d8")
        return buf.getvalue()


class GraphlyParser ( Parser ):

    grammarFileName = "Graphly.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'loop'", "'start'", "'until'", 
                     "'step'", "'then'", "'end'", "'check'", "'else'", "'else then'", 
                     "'point'", "':'", "','", "'segment'", "'circle'", "'polygon'", 
                     "'group'", "'['", "']'", "'num'", "'iterator'", "'canvas'", 
                     "'draw'", "'fill'", "'move'", "'place'", "'rotate'", 
                     "'scale'", "<INVALID>", "<INVALID>", "'+'", "'-'", 
                     "'*'", "'/'", "'%'", "'!'", "'='", "'>'", "'<'", "'>='", 
                     "'<='", "<INVALID>", "'.'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "WS", "COM_SIGN", "PLUS", "MINUS", "MULTIPLICATION", 
                      "DIVISION", "MODULO", "NEG", "EQ", "GREATER", "LOWER", 
                      "GT", "LT", "COLOR", "DOT", "DIGIT", "NAME" ]

    RULE_program = 0
    RULE_instruction = 1
    RULE_block = 2
    RULE_loop = 3
    RULE_check = 4
    RULE_shape = 5
    RULE_point = 6
    RULE_segment = 7
    RULE_circle = 8
    RULE_polygon = 9
    RULE_group = 10
    RULE_groupMember = 11
    RULE_type_definition = 12
    RULE_num = 13
    RULE_iterator = 14
    RULE_canvas = 15
    RULE_draw = 16
    RULE_transformation = 17
    RULE_fill = 18
    RULE_move = 19
    RULE_place = 20
    RULE_rotate = 21
    RULE_scale = 22
    RULE_arithmetic = 23
    RULE_logic = 24
    RULE_neq = 25
    RULE_cond = 26
    RULE_signed_flt = 27
    RULE_flt = 28
    RULE_operation_flt = 29
    RULE_itr = 30

    ruleNames =  [ "program", "instruction", "block", "loop", "check", "shape", 
                   "point", "segment", "circle", "polygon", "group", "groupMember", 
                   "type_definition", "num", "iterator", "canvas", "draw", 
                   "transformation", "fill", "move", "place", "rotate", 
                   "scale", "arithmetic", "logic", "neq", "cond", "signed_flt", 
                   "flt", "operation_flt", "itr" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    WS=29
    COM_SIGN=30
    PLUS=31
    MINUS=32
    MULTIPLICATION=33
    DIVISION=34
    MODULO=35
    NEG=36
    EQ=37
    GREATER=38
    LOWER=39
    GT=40
    LT=41
    COLOR=42
    DOT=43
    DIGIT=44
    NAME=45

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def canvas(self):
            return self.getTypedRuleContext(GraphlyParser.CanvasContext,0)


        def EOF(self):
            return self.getToken(GraphlyParser.EOF, 0)

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def getRuleIndex(self):
            return GraphlyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = GraphlyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 76
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 65
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 62
                            self.match(GraphlyParser.T__0) 
                        self.state = 67
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                    self.state = 68
                    self.instruction()
                    self.state = 70 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 69
                            self.match(GraphlyParser.T__0)

                        else:
                            raise NoViableAltException(self)
                        self.state = 72 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
             
                self.state = 78
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 79
            self.canvas()
            self.state = 94
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__0:
                self.state = 81 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 80
                        self.match(GraphlyParser.T__0)

                    else:
                        raise NoViableAltException(self)
                    self.state = 83 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

                self.state = 85
                self.instruction()
                self.state = 89
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 86
                        self.match(GraphlyParser.T__0) 
                    self.state = 91
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                self.state = 96
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 97
            self.match(GraphlyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shape(self):
            return self.getTypedRuleContext(GraphlyParser.ShapeContext,0)


        def type_definition(self):
            return self.getTypedRuleContext(GraphlyParser.Type_definitionContext,0)


        def draw(self):
            return self.getTypedRuleContext(GraphlyParser.DrawContext,0)


        def transformation(self):
            return self.getTypedRuleContext(GraphlyParser.TransformationContext,0)


        def group(self):
            return self.getTypedRuleContext(GraphlyParser.GroupContext,0)


        def loop(self):
            return self.getTypedRuleContext(GraphlyParser.LoopContext,0)


        def check(self):
            return self.getTypedRuleContext(GraphlyParser.CheckContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = GraphlyParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instruction)
        self._la = 0 # Token type
        try:
            self.state = 112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 99
                self.shape()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 100
                self.type_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 101
                self.draw()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 102
                self.transformation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 103
                self.group()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 104
                self.loop()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 105
                self.check()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 106
                    self.match(GraphlyParser.WS)
                    self.state = 111
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = GraphlyParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 125
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 117
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 114
                            self.match(GraphlyParser.WS) 
                        self.state = 119
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                    self.state = 120
                    self.instruction()
                    self.state = 121
                    self.match(GraphlyParser.T__0) 
                self.state = 127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def itr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ItrContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ItrContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop" ):
                listener.enterLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop" ):
                listener.exitLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = GraphlyParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 128
            self.match(GraphlyParser.T__1)
            self.state = 130 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 129
                self.match(GraphlyParser.WS)
                self.state = 132 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 134
            self.match(GraphlyParser.NAME)
            self.state = 136 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 135
                self.match(GraphlyParser.WS)
                self.state = 138 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 140
            self.match(GraphlyParser.T__2)
            self.state = 142 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 141
                self.match(GraphlyParser.WS)
                self.state = 144 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.DIGIT]:
                self.state = 146
                self.itr()
                pass
            elif token in [GraphlyParser.NAME]:
                self.state = 147
                self.match(GraphlyParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 151 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 150
                self.match(GraphlyParser.WS)
                self.state = 153 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 155
            self.match(GraphlyParser.T__3)
            self.state = 157 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 156
                self.match(GraphlyParser.WS)
                self.state = 159 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.DIGIT]:
                self.state = 161
                self.itr()
                pass
            elif token in [GraphlyParser.NAME]:
                self.state = 162
                self.match(GraphlyParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 166 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 165
                self.match(GraphlyParser.WS)
                self.state = 168 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 170
            self.match(GraphlyParser.T__4)
            self.state = 172 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 171
                self.match(GraphlyParser.WS)
                self.state = 174 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 178
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.DIGIT]:
                self.state = 176
                self.itr()
                pass
            elif token in [GraphlyParser.NAME]:
                self.state = 177
                self.match(GraphlyParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 181 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 180
                self.match(GraphlyParser.WS)
                self.state = 183 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 185
            self.match(GraphlyParser.T__5)
            self.state = 186
            self.match(GraphlyParser.T__0)
            self.state = 187
            self.block()
            self.state = 191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 188
                self.match(GraphlyParser.WS)
                self.state = 193
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 194
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.CondContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.CondContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def getRuleIndex(self):
            return GraphlyParser.RULE_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck" ):
                listener.enterCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck" ):
                listener.exitCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheck" ):
                return visitor.visitCheck(self)
            else:
                return visitor.visitChildren(self)




    def check(self):

        localctx = GraphlyParser.CheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 196
                self.match(GraphlyParser.WS)
                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 202
            self.match(GraphlyParser.T__7)
            self.state = 204 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 203
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 206 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

            self.state = 208
            self.cond()
            self.state = 210 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 209
                self.match(GraphlyParser.WS)
                self.state = 212 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 214
            self.match(GraphlyParser.T__5)
            self.state = 215
            self.match(GraphlyParser.T__0)
            self.state = 219
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 216
                    self.match(GraphlyParser.WS) 
                self.state = 221
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 233
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 225
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 222
                            self.match(GraphlyParser.WS) 
                        self.state = 227
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

                    self.state = 228
                    self.instruction()
                    self.state = 229
                    self.match(GraphlyParser.T__0) 
                self.state = 235
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__8:
                self.state = 236
                self.match(GraphlyParser.T__8)
                self.state = 238 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 237
                    self.match(GraphlyParser.WS)
                    self.state = 240 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 242
                self.match(GraphlyParser.T__7)
                self.state = 244 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 243
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 246 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

                self.state = 248
                self.cond()
                self.state = 250 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 249
                    self.match(GraphlyParser.WS)
                    self.state = 252 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 254
                self.match(GraphlyParser.T__5)
                self.state = 255
                self.match(GraphlyParser.T__0)
                self.state = 259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 256
                        self.match(GraphlyParser.WS) 
                    self.state = 261
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

                self.state = 273
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 265
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 262
                                self.match(GraphlyParser.WS) 
                            self.state = 267
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

                        self.state = 268
                        self.instruction()
                        self.state = 269
                        self.match(GraphlyParser.T__0) 
                    self.state = 275
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.T__9:
                self.state = 281
                self.match(GraphlyParser.T__9)
                self.state = 282
                self.match(GraphlyParser.T__0)
                self.state = 294
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 286
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 283
                                self.match(GraphlyParser.WS) 
                            self.state = 288
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                        self.state = 289
                        self.instruction()
                        self.state = 290
                        self.match(GraphlyParser.T__0) 
                    self.state = 296
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)



            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 299
                self.match(GraphlyParser.WS)
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 305
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShapeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def point(self):
            return self.getTypedRuleContext(GraphlyParser.PointContext,0)


        def segment(self):
            return self.getTypedRuleContext(GraphlyParser.SegmentContext,0)


        def circle(self):
            return self.getTypedRuleContext(GraphlyParser.CircleContext,0)


        def polygon(self):
            return self.getTypedRuleContext(GraphlyParser.PolygonContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_shape

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape" ):
                listener.enterShape(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape" ):
                listener.exitShape(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShape" ):
                return visitor.visitShape(self)
            else:
                return visitor.visitChildren(self)




    def shape(self):

        localctx = GraphlyParser.ShapeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_shape)
        try:
            self.state = 311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 307
                self.point()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 308
                self.segment()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 309
                self.circle()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 310
                self.polygon()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def operation_flt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Operation_fltContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Operation_fltContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_point

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoint" ):
                listener.enterPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoint" ):
                listener.exitPoint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPoint" ):
                return visitor.visitPoint(self)
            else:
                return visitor.visitChildren(self)




    def point(self):

        localctx = GraphlyParser.PointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_point)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 313
                self.match(GraphlyParser.WS)
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 319
            self.match(GraphlyParser.T__10)
            self.state = 321 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 320
                self.match(GraphlyParser.WS)
                self.state = 323 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 325
            self.match(GraphlyParser.NAME)
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 326
                self.match(GraphlyParser.WS)
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 332
            self.match(GraphlyParser.T__11)
            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 333
                self.match(GraphlyParser.WS)
                self.state = 338
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 339
            self.operation_flt()
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 340
                self.match(GraphlyParser.WS)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 346
            self.match(GraphlyParser.T__12)
            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 347
                self.match(GraphlyParser.WS)
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 353
            self.operation_flt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegment" ):
                listener.enterSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegment" ):
                listener.exitSegment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegment" ):
                return visitor.visitSegment(self)
            else:
                return visitor.visitChildren(self)




    def segment(self):

        localctx = GraphlyParser.SegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 355
                self.match(GraphlyParser.WS)
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 361
            self.match(GraphlyParser.T__13)
            self.state = 363 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 362
                self.match(GraphlyParser.WS)
                self.state = 365 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 367
            self.match(GraphlyParser.NAME)
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 368
                self.match(GraphlyParser.WS)
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 374
            self.match(GraphlyParser.T__11)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 375
                self.match(GraphlyParser.WS)
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 381
            self.match(GraphlyParser.NAME)
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 382
                self.match(GraphlyParser.WS)
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 388
            self.match(GraphlyParser.T__12)
            self.state = 390 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 389
                self.match(GraphlyParser.WS)
                self.state = 392 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 394
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CircleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def operation_flt(self):
            return self.getTypedRuleContext(GraphlyParser.Operation_fltContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_circle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCircle" ):
                listener.enterCircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCircle" ):
                listener.exitCircle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCircle" ):
                return visitor.visitCircle(self)
            else:
                return visitor.visitChildren(self)




    def circle(self):

        localctx = GraphlyParser.CircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_circle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 396
                self.match(GraphlyParser.WS)
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 402
            self.match(GraphlyParser.T__14)
            self.state = 404 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 403
                self.match(GraphlyParser.WS)
                self.state = 406 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 408
            self.match(GraphlyParser.NAME)
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 409
                self.match(GraphlyParser.WS)
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 415
            self.match(GraphlyParser.T__11)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 416
                self.match(GraphlyParser.WS)
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 422
            self.match(GraphlyParser.NAME)
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 423
                self.match(GraphlyParser.WS)
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 429
            self.match(GraphlyParser.T__12)
            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 430
                self.match(GraphlyParser.WS)
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 436
            self.operation_flt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolygonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_polygon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolygon" ):
                listener.enterPolygon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolygon" ):
                listener.exitPolygon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolygon" ):
                return visitor.visitPolygon(self)
            else:
                return visitor.visitChildren(self)




    def polygon(self):

        localctx = GraphlyParser.PolygonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_polygon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 438
                self.match(GraphlyParser.WS)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 444
            self.match(GraphlyParser.T__15)
            self.state = 446 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 445
                self.match(GraphlyParser.WS)
                self.state = 448 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 450
            self.match(GraphlyParser.NAME)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 451
                self.match(GraphlyParser.WS)
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 457
            self.match(GraphlyParser.T__11)
            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 458
                self.match(GraphlyParser.WS)
                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 464
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = GraphlyParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 466
                self.match(GraphlyParser.WS)
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 472
            self.match(GraphlyParser.T__16)
            self.state = 474 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 473
                self.match(GraphlyParser.WS)
                self.state = 476 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 478
            self.match(GraphlyParser.NAME)
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 479
                self.match(GraphlyParser.WS)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 485
            self.match(GraphlyParser.T__11)
            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 486
                self.match(GraphlyParser.WS)
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 492
            self.match(GraphlyParser.NAME)
            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 493
                self.match(GraphlyParser.WS)
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__12:
                self.state = 499
                self.match(GraphlyParser.T__12)
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 500
                    self.match(GraphlyParser.WS)
                    self.state = 505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 506
                self.match(GraphlyParser.NAME)
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 507
                    self.match(GraphlyParser.WS)
                    self.state = 512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def itr(self):
            return self.getTypedRuleContext(GraphlyParser.ItrContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_groupMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupMember" ):
                listener.enterGroupMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupMember" ):
                listener.exitGroupMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupMember" ):
                return visitor.visitGroupMember(self)
            else:
                return visitor.visitChildren(self)




    def groupMember(self):

        localctx = GraphlyParser.GroupMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_groupMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 518
                self.match(GraphlyParser.WS)
                self.state = 523
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 524
            self.match(GraphlyParser.NAME)
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 525
                self.match(GraphlyParser.WS)
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 531
            self.match(GraphlyParser.T__17)
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 532
                self.match(GraphlyParser.WS)
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.DIGIT]:
                self.state = 538
                self.itr()
                pass
            elif token in [GraphlyParser.NAME]:
                self.state = 539
                self.match(GraphlyParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 542
                self.match(GraphlyParser.WS)
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 548
            self.match(GraphlyParser.T__18)
            self.state = 550 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 549
                self.match(GraphlyParser.WS)
                self.state = 552 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num(self):
            return self.getTypedRuleContext(GraphlyParser.NumContext,0)


        def iterator(self):
            return self.getTypedRuleContext(GraphlyParser.IteratorContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_definition" ):
                listener.enterType_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_definition" ):
                listener.exitType_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_definition" ):
                return visitor.visitType_definition(self)
            else:
                return visitor.visitChildren(self)




    def type_definition(self):

        localctx = GraphlyParser.Type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_type_definition)
        try:
            self.state = 556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 554
                self.num()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.iterator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def operation_flt(self):
            return self.getTypedRuleContext(GraphlyParser.Operation_fltContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_num

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum" ):
                listener.enterNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum" ):
                listener.exitNum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum" ):
                return visitor.visitNum(self)
            else:
                return visitor.visitChildren(self)




    def num(self):

        localctx = GraphlyParser.NumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_num)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 558
                self.match(GraphlyParser.WS)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 564
            self.match(GraphlyParser.T__19)
            self.state = 566 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 565
                self.match(GraphlyParser.WS)
                self.state = 568 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 570
            self.match(GraphlyParser.NAME)
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 571
                self.match(GraphlyParser.WS)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 577
            self.match(GraphlyParser.T__11)
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 578
                self.match(GraphlyParser.WS)
                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 584
                self.operation_flt()
                pass

            elif la_ == 2:
                self.state = 585
                self.match(GraphlyParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def itr(self):
            return self.getTypedRuleContext(GraphlyParser.ItrContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterator" ):
                listener.enterIterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterator" ):
                listener.exitIterator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterator" ):
                return visitor.visitIterator(self)
            else:
                return visitor.visitChildren(self)




    def iterator(self):

        localctx = GraphlyParser.IteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 588
                self.match(GraphlyParser.WS)
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 594
            self.match(GraphlyParser.T__20)
            self.state = 596 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 595
                self.match(GraphlyParser.WS)
                self.state = 598 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 600
            self.match(GraphlyParser.NAME)
            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 601
                self.match(GraphlyParser.WS)
                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 607
            self.match(GraphlyParser.T__11)
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 608
                self.match(GraphlyParser.WS)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.DIGIT]:
                self.state = 614
                self.itr()
                pass
            elif token in [GraphlyParser.NAME]:
                self.state = 615
                self.match(GraphlyParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CanvasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def operation_flt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Operation_fltContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Operation_fltContext,i)


        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_canvas

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCanvas" ):
                listener.enterCanvas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCanvas" ):
                listener.exitCanvas(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCanvas" ):
                return visitor.visitCanvas(self)
            else:
                return visitor.visitChildren(self)




    def canvas(self):

        localctx = GraphlyParser.CanvasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_canvas)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 618
                self.match(GraphlyParser.WS)
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 624
            self.match(GraphlyParser.T__21)
            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 625
                self.match(GraphlyParser.WS)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 631
            self.match(GraphlyParser.T__11)
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 632
                self.match(GraphlyParser.WS)
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 638
                self.operation_flt()
                pass

            elif la_ == 2:
                self.state = 639
                self.match(GraphlyParser.NAME)
                pass


            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 642
                self.match(GraphlyParser.WS)
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 648
            self.match(GraphlyParser.T__12)
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 649
                self.match(GraphlyParser.WS)
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 655
                self.operation_flt()
                pass

            elif la_ == 2:
                self.state = 656
                self.match(GraphlyParser.NAME)
                pass


            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 659
                self.match(GraphlyParser.WS)
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 665
            self.match(GraphlyParser.T__12)
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 666
                self.match(GraphlyParser.WS)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 672
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DrawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_draw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDraw" ):
                listener.enterDraw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDraw" ):
                listener.exitDraw(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDraw" ):
                return visitor.visitDraw(self)
            else:
                return visitor.visitChildren(self)




    def draw(self):

        localctx = GraphlyParser.DrawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_draw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 674
                self.match(GraphlyParser.WS)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 680
            self.match(GraphlyParser.T__22)
            self.state = 682 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 681
                self.match(GraphlyParser.WS)
                self.state = 684 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 686
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fill(self):
            return self.getTypedRuleContext(GraphlyParser.FillContext,0)


        def move(self):
            return self.getTypedRuleContext(GraphlyParser.MoveContext,0)


        def place(self):
            return self.getTypedRuleContext(GraphlyParser.PlaceContext,0)


        def rotate(self):
            return self.getTypedRuleContext(GraphlyParser.RotateContext,0)


        def scale(self):
            return self.getTypedRuleContext(GraphlyParser.ScaleContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformation" ):
                listener.enterTransformation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformation" ):
                listener.exitTransformation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformation" ):
                return visitor.visitTransformation(self)
            else:
                return visitor.visitChildren(self)




    def transformation(self):

        localctx = GraphlyParser.TransformationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_transformation)
        try:
            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.fill()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 689
                self.move()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 690
                self.place()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 691
                self.rotate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 692
                self.scale()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FillContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_fill

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFill" ):
                listener.enterFill(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFill" ):
                listener.exitFill(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFill" ):
                return visitor.visitFill(self)
            else:
                return visitor.visitChildren(self)




    def fill(self):

        localctx = GraphlyParser.FillContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_fill)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 695
                self.match(GraphlyParser.WS)
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 701
            self.match(GraphlyParser.T__23)
            self.state = 703 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 702
                self.match(GraphlyParser.WS)
                self.state = 705 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 707
            self.match(GraphlyParser.NAME)
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 708
                self.match(GraphlyParser.WS)
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 714
            self.match(GraphlyParser.T__11)
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 715
                self.match(GraphlyParser.WS)
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 721
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def operation_flt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Operation_fltContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Operation_fltContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMove" ):
                return visitor.visitMove(self)
            else:
                return visitor.visitChildren(self)




    def move(self):

        localctx = GraphlyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 723
                self.match(GraphlyParser.WS)
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 729
            self.match(GraphlyParser.T__24)
            self.state = 731 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 730
                self.match(GraphlyParser.WS)
                self.state = 733 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 735
            self.match(GraphlyParser.NAME)
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 736
                self.match(GraphlyParser.WS)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 742
            self.match(GraphlyParser.T__11)
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 743
                self.match(GraphlyParser.WS)
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 749
                self.operation_flt()
                pass

            elif la_ == 2:
                self.state = 750
                self.match(GraphlyParser.NAME)
                pass


            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 753
                self.match(GraphlyParser.WS)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 759
            self.match(GraphlyParser.T__12)
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 760
                self.match(GraphlyParser.WS)
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 768
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 766
                self.operation_flt()
                pass

            elif la_ == 2:
                self.state = 767
                self.match(GraphlyParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_place

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlace" ):
                listener.enterPlace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlace" ):
                listener.exitPlace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = GraphlyParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_place)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 770
                self.match(GraphlyParser.WS)
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 776
            self.match(GraphlyParser.T__25)
            self.state = 778 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 777
                self.match(GraphlyParser.WS)
                self.state = 780 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 782
            self.match(GraphlyParser.NAME)
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 783
                self.match(GraphlyParser.WS)
                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 789
            self.match(GraphlyParser.T__11)
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 790
                self.match(GraphlyParser.WS)
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 796
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RotateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def operation_flt(self):
            return self.getTypedRuleContext(GraphlyParser.Operation_fltContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_rotate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRotate" ):
                listener.enterRotate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRotate" ):
                listener.exitRotate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRotate" ):
                return visitor.visitRotate(self)
            else:
                return visitor.visitChildren(self)




    def rotate(self):

        localctx = GraphlyParser.RotateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_rotate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 798
                self.match(GraphlyParser.WS)
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 804
            self.match(GraphlyParser.T__26)
            self.state = 806 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 805
                self.match(GraphlyParser.WS)
                self.state = 808 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 810
            self.match(GraphlyParser.NAME)
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 811
                self.match(GraphlyParser.WS)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 817
            self.match(GraphlyParser.T__11)
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 818
                self.match(GraphlyParser.WS)
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 824
                self.operation_flt()
                pass

            elif la_ == 2:
                self.state = 825
                self.match(GraphlyParser.NAME)
                pass


            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 828
                self.match(GraphlyParser.WS)
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 834
            self.match(GraphlyParser.T__12)
            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 835
                self.match(GraphlyParser.WS)
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 841
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def operation_flt(self):
            return self.getTypedRuleContext(GraphlyParser.Operation_fltContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScale" ):
                listener.enterScale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScale" ):
                listener.exitScale(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScale" ):
                return visitor.visitScale(self)
            else:
                return visitor.visitChildren(self)




    def scale(self):

        localctx = GraphlyParser.ScaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_scale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 843
                self.match(GraphlyParser.WS)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 849
            self.match(GraphlyParser.T__27)
            self.state = 851 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 850
                self.match(GraphlyParser.WS)
                self.state = 853 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 855
            self.match(GraphlyParser.NAME)
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 856
                self.match(GraphlyParser.WS)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 862
            self.match(GraphlyParser.T__11)
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 863
                self.match(GraphlyParser.WS)
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 869
            self.operation_flt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(GraphlyParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)

        def MULTIPLICATION(self):
            return self.getToken(GraphlyParser.MULTIPLICATION, 0)

        def DIVISION(self):
            return self.getToken(GraphlyParser.DIVISION, 0)

        def MODULO(self):
            return self.getToken(GraphlyParser.MODULO, 0)

        def getRuleIndex(self):
            return GraphlyParser.RULE_arithmetic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic" ):
                listener.enterArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic" ):
                listener.exitArithmetic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmetic" ):
                return visitor.visitArithmetic(self)
            else:
                return visitor.visitChildren(self)




    def arithmetic(self):

        localctx = GraphlyParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_arithmetic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.PLUS) | (1 << GraphlyParser.MINUS) | (1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)

        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)

        def GT(self):
            return self.getToken(GraphlyParser.GT, 0)

        def LT(self):
            return self.getToken(GraphlyParser.LT, 0)

        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)

        def neq(self):
            return self.getTypedRuleContext(GraphlyParser.NeqContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_logic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic" ):
                listener.enterLogic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic" ):
                listener.exitLogic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogic" ):
                return visitor.visitLogic(self)
            else:
                return visitor.visitChildren(self)




    def logic(self):

        localctx = GraphlyParser.LogicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_logic)
        try:
            self.state = 879
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.GREATER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.match(GraphlyParser.GREATER)
                pass
            elif token in [GraphlyParser.LOWER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.match(GraphlyParser.LOWER)
                pass
            elif token in [GraphlyParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 875
                self.match(GraphlyParser.GT)
                pass
            elif token in [GraphlyParser.LT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 876
                self.match(GraphlyParser.LT)
                pass
            elif token in [GraphlyParser.EQ]:
                self.enterOuterAlt(localctx, 5)
                self.state = 877
                self.match(GraphlyParser.EQ)
                pass
            elif token in [GraphlyParser.NEG]:
                self.enterOuterAlt(localctx, 6)
                self.state = 878
                self.neq()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEG(self):
            return self.getToken(GraphlyParser.NEG, 0)

        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)

        def getRuleIndex(self):
            return GraphlyParser.RULE_neq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNeq" ):
                listener.enterNeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNeq" ):
                listener.exitNeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNeq" ):
                return visitor.visitNeq(self)
            else:
                return visitor.visitChildren(self)




    def neq(self):

        localctx = GraphlyParser.NeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_neq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(GraphlyParser.NEG)
            self.state = 882
            self.match(GraphlyParser.EQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logic(self):
            return self.getTypedRuleContext(GraphlyParser.LogicContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def operation_flt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Operation_fltContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Operation_fltContext,i)


        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def itr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ItrContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ItrContext,i)


        def getRuleIndex(self):
            return GraphlyParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond" ):
                return visitor.visitCond(self)
            else:
                return visitor.visitChildren(self)




    def cond(self):

        localctx = GraphlyParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_cond)
        self._la = 0 # Token type
        try:
            self.state = 932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 884
                    self.match(GraphlyParser.WS)
                    self.state = 889
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 890
                    self.operation_flt()
                    pass

                elif la_ == 2:
                    self.state = 891
                    self.match(GraphlyParser.NAME)
                    pass


                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 894
                    self.match(GraphlyParser.WS)
                    self.state = 899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 900
                self.logic()
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 901
                    self.match(GraphlyParser.WS)
                    self.state = 906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 909
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 907
                    self.operation_flt()
                    pass

                elif la_ == 2:
                    self.state = 908
                    self.match(GraphlyParser.NAME)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 913
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GraphlyParser.DIGIT]:
                    self.state = 911
                    self.itr()
                    pass
                elif token in [GraphlyParser.NAME]:
                    self.state = 912
                    self.match(GraphlyParser.NAME)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 915
                    self.match(GraphlyParser.WS)
                    self.state = 920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 921
                self.logic()
                self.state = 925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 922
                    self.match(GraphlyParser.WS)
                    self.state = 927
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 930
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GraphlyParser.DIGIT]:
                    self.state = 928
                    self.itr()
                    pass
                elif token in [GraphlyParser.NAME]:
                    self.state = 929
                    self.match(GraphlyParser.NAME)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_fltContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flt(self):
            return self.getTypedRuleContext(GraphlyParser.FltContext,0)


        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)

        def arithmetic(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ArithmeticContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ArithmeticContext,i)


        def signed_flt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Signed_fltContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Signed_fltContext,i)


        def getRuleIndex(self):
            return GraphlyParser.RULE_signed_flt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_flt" ):
                listener.enterSigned_flt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_flt" ):
                listener.exitSigned_flt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_flt" ):
                return visitor.visitSigned_flt(self)
            else:
                return visitor.visitChildren(self)




    def signed_flt(self):

        localctx = GraphlyParser.Signed_fltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_signed_flt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.MINUS:
                self.state = 934
                self.match(GraphlyParser.MINUS)


            self.state = 939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.DOT, GraphlyParser.DIGIT]:
                self.state = 937
                self.flt()
                pass
            elif token in [GraphlyParser.NAME]:
                self.state = 938
                self.match(GraphlyParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 948
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 941
                    self.arithmetic()
                    self.state = 944
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                    if la_ == 1:
                        self.state = 942
                        self.signed_flt()
                        pass

                    elif la_ == 2:
                        self.state = 943
                        self.match(GraphlyParser.NAME)
                        pass

             
                self.state = 950
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FltContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(GraphlyParser.DOT, 0)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.DIGIT)
            else:
                return self.getToken(GraphlyParser.DIGIT, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_flt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlt" ):
                listener.enterFlt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlt" ):
                listener.exitFlt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlt" ):
                return visitor.visitFlt(self)
            else:
                return visitor.visitChildren(self)




    def flt(self):

        localctx = GraphlyParser.FltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_flt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.DIGIT:
                    self.state = 951
                    self.match(GraphlyParser.DIGIT)
                    self.state = 956
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 957
                self.match(GraphlyParser.DOT)


            self.state = 961 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 960
                self.match(GraphlyParser.DIGIT)
                self.state = 963 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.DIGIT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operation_fltContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.FltContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.FltContext,i)


        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def arithmetic(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ArithmeticContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ArithmeticContext,i)


        def getRuleIndex(self):
            return GraphlyParser.RULE_operation_flt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperation_flt" ):
                listener.enterOperation_flt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperation_flt" ):
                listener.exitOperation_flt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperation_flt" ):
                return visitor.visitOperation_flt(self)
            else:
                return visitor.visitChildren(self)




    def operation_flt(self):

        localctx = GraphlyParser.Operation_fltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_operation_flt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.DOT, GraphlyParser.DIGIT]:
                self.state = 965
                self.flt()
                pass
            elif token in [GraphlyParser.NAME]:
                self.state = 966
                self.match(GraphlyParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.PLUS) | (1 << GraphlyParser.MINUS) | (1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0):
                self.state = 969
                self.arithmetic()
                self.state = 972
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GraphlyParser.DOT, GraphlyParser.DIGIT]:
                    self.state = 970
                    self.flt()
                    pass
                elif token in [GraphlyParser.NAME]:
                    self.state = 971
                    self.match(GraphlyParser.NAME)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.DIGIT)
            else:
                return self.getToken(GraphlyParser.DIGIT, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_itr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItr" ):
                listener.enterItr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItr" ):
                listener.exitItr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItr" ):
                return visitor.visitItr(self)
            else:
                return visitor.visitChildren(self)




    def itr(self):

        localctx = GraphlyParser.ItrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_itr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 979
                self.match(GraphlyParser.DIGIT)
                self.state = 982 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.DIGIT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





