# Generated from Graphly.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\38")
        buf.write("\u0406\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\3\2\7\2D\n\2\f\2\16\2G\13\2\3\2")
        buf.write("\3\2\7\2K\n\2\f\2\16\2N\13\2\3\2\5\2Q\n\2\3\2\6\2T\n\2")
        buf.write("\r\2\16\2U\7\2X\n\2\f\2\16\2[\13\2\3\2\3\2\7\2_\n\2\f")
        buf.write("\2\16\2b\13\2\3\2\5\2e\n\2\3\2\6\2h\n\2\r\2\16\2i\3\2")
        buf.write("\3\2\7\2n\n\2\f\2\16\2q\13\2\3\2\5\2t\n\2\3\2\7\2w\n\2")
        buf.write("\f\2\16\2z\13\2\7\2|\n\2\f\2\16\2\177\13\2\3\2\3\2\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\7\3\u008b\n\3\f\3\16\3\u008e")
        buf.write("\13\3\5\3\u0090\n\3\3\4\7\4\u0093\n\4\f\4\16\4\u0096\13")
        buf.write("\4\3\4\3\4\3\4\7\4\u009b\n\4\f\4\16\4\u009e\13\4\3\5\3")
        buf.write("\5\6\5\u00a2\n\5\r\5\16\5\u00a3\3\5\3\5\6\5\u00a8\n\5")
        buf.write("\r\5\16\5\u00a9\3\5\3\5\6\5\u00ae\n\5\r\5\16\5\u00af\3")
        buf.write("\5\3\5\6\5\u00b4\n\5\r\5\16\5\u00b5\3\5\3\5\6\5\u00ba")
        buf.write("\n\5\r\5\16\5\u00bb\3\5\3\5\6\5\u00c0\n\5\r\5\16\5\u00c1")
        buf.write("\3\5\3\5\6\5\u00c6\n\5\r\5\16\5\u00c7\3\5\3\5\6\5\u00cc")
        buf.write("\n\5\r\5\16\5\u00cd\3\5\3\5\3\5\3\5\7\5\u00d4\n\5\f\5")
        buf.write("\16\5\u00d7\13\5\3\5\3\5\3\6\7\6\u00dc\n\6\f\6\16\6\u00df")
        buf.write("\13\6\3\6\3\6\6\6\u00e3\n\6\r\6\16\6\u00e4\3\6\3\6\3\6")
        buf.write("\6\6\u00ea\n\6\r\6\16\6\u00eb\3\6\3\6\6\6\u00f0\n\6\r")
        buf.write("\6\16\6\u00f1\3\6\7\6\u00f5\n\6\f\6\16\6\u00f8\13\6\3")
        buf.write("\6\7\6\u00fb\n\6\f\6\16\6\u00fe\13\6\3\6\3\6\6\6\u0102")
        buf.write("\n\6\r\6\16\6\u0103\3\6\3\6\3\6\5\6\u0109\n\6\3\6\7\6")
        buf.write("\u010c\n\6\f\6\16\6\u010f\13\6\3\6\3\6\3\7\3\7\6\7\u0115")
        buf.write("\n\7\r\7\16\7\u0116\3\7\3\7\3\7\7\7\u011c\n\7\f\7\16\7")
        buf.write("\u011f\13\7\3\7\3\7\3\b\3\b\3\b\3\b\5\b\u0127\n\b\3\t")
        buf.write("\7\t\u012a\n\t\f\t\16\t\u012d\13\t\3\t\3\t\6\t\u0131\n")
        buf.write("\t\r\t\16\t\u0132\3\t\3\t\7\t\u0137\n\t\f\t\16\t\u013a")
        buf.write("\13\t\3\t\3\t\7\t\u013e\n\t\f\t\16\t\u0141\13\t\3\t\3")
        buf.write("\t\7\t\u0145\n\t\f\t\16\t\u0148\13\t\3\t\3\t\7\t\u014c")
        buf.write("\n\t\f\t\16\t\u014f\13\t\3\t\3\t\3\n\7\n\u0154\n\n\f\n")
        buf.write("\16\n\u0157\13\n\3\n\3\n\6\n\u015b\n\n\r\n\16\n\u015c")
        buf.write("\3\n\3\n\7\n\u0161\n\n\f\n\16\n\u0164\13\n\3\n\3\n\7\n")
        buf.write("\u0168\n\n\f\n\16\n\u016b\13\n\3\n\3\n\7\n\u016f\n\n\f")
        buf.write("\n\16\n\u0172\13\n\3\n\3\n\6\n\u0176\n\n\r\n\16\n\u0177")
        buf.write("\3\n\3\n\3\13\7\13\u017d\n\13\f\13\16\13\u0180\13\13\3")
        buf.write("\13\3\13\6\13\u0184\n\13\r\13\16\13\u0185\3\13\3\13\7")
        buf.write("\13\u018a\n\13\f\13\16\13\u018d\13\13\3\13\3\13\7\13\u0191")
        buf.write("\n\13\f\13\16\13\u0194\13\13\3\13\3\13\7\13\u0198\n\13")
        buf.write("\f\13\16\13\u019b\13\13\3\13\3\13\7\13\u019f\n\13\f\13")
        buf.write("\16\13\u01a2\13\13\3\13\3\13\3\f\7\f\u01a7\n\f\f\f\16")
        buf.write("\f\u01aa\13\f\3\f\3\f\6\f\u01ae\n\f\r\f\16\f\u01af\3\f")
        buf.write("\3\f\7\f\u01b4\n\f\f\f\16\f\u01b7\13\f\3\f\3\f\7\f\u01bb")
        buf.write("\n\f\f\f\16\f\u01be\13\f\3\f\3\f\3\r\7\r\u01c3\n\r\f\r")
        buf.write("\16\r\u01c6\13\r\3\r\3\r\7\r\u01ca\n\r\f\r\16\r\u01cd")
        buf.write("\13\r\3\r\3\r\7\r\u01d1\n\r\f\r\16\r\u01d4\13\r\3\r\3")
        buf.write("\r\7\r\u01d8\n\r\f\r\16\r\u01db\13\r\3\r\3\r\3\16\3\16")
        buf.write("\5\16\u01e1\n\16\3\17\7\17\u01e4\n\17\f\17\16\17\u01e7")
        buf.write("\13\17\3\17\3\17\7\17\u01eb\n\17\f\17\16\17\u01ee\13\17")
        buf.write("\3\17\3\17\7\17\u01f2\n\17\f\17\16\17\u01f5\13\17\3\17")
        buf.write("\3\17\7\17\u01f9\n\17\f\17\16\17\u01fc\13\17\3\17\3\17")
        buf.write("\6\17\u0200\n\17\r\17\16\17\u0201\3\17\3\17\7\17\u0206")
        buf.write("\n\17\f\17\16\17\u0209\13\17\3\17\3\17\7\17\u020d\n\17")
        buf.write("\f\17\16\17\u0210\13\17\3\17\3\17\7\17\u0214\n\17\f\17")
        buf.write("\16\17\u0217\13\17\3\17\3\17\7\17\u021b\n\17\f\17\16\17")
        buf.write("\u021e\13\17\3\17\3\17\7\17\u0222\n\17\f\17\16\17\u0225")
        buf.write("\13\17\7\17\u0227\n\17\f\17\16\17\u022a\13\17\3\20\3\20")
        buf.write("\5\20\u022e\n\20\3\21\7\21\u0231\n\21\f\21\16\21\u0234")
        buf.write("\13\21\3\21\3\21\6\21\u0238\n\21\r\21\16\21\u0239\3\21")
        buf.write("\3\21\7\21\u023e\n\21\f\21\16\21\u0241\13\21\3\21\3\21")
        buf.write("\7\21\u0245\n\21\f\21\16\21\u0248\13\21\3\21\3\21\3\22")
        buf.write("\7\22\u024d\n\22\f\22\16\22\u0250\13\22\3\22\3\22\6\22")
        buf.write("\u0254\n\22\r\22\16\22\u0255\3\22\3\22\7\22\u025a\n\22")
        buf.write("\f\22\16\22\u025d\13\22\3\22\3\22\7\22\u0261\n\22\f\22")
        buf.write("\16\22\u0264\13\22\3\22\3\22\3\23\7\23\u0269\n\23\f\23")
        buf.write("\16\23\u026c\13\23\3\23\3\23\7\23\u0270\n\23\f\23\16\23")
        buf.write("\u0273\13\23\3\23\3\23\7\23\u0277\n\23\f\23\16\23\u027a")
        buf.write("\13\23\3\23\3\23\7\23\u027e\n\23\f\23\16\23\u0281\13\23")
        buf.write("\3\23\3\23\7\23\u0285\n\23\f\23\16\23\u0288\13\23\3\23")
        buf.write("\3\23\7\23\u028c\n\23\f\23\16\23\u028f\13\23\3\23\3\23")
        buf.write("\7\23\u0293\n\23\f\23\16\23\u0296\13\23\3\23\3\23\3\24")
        buf.write("\7\24\u029b\n\24\f\24\16\24\u029e\13\24\3\24\3\24\6\24")
        buf.write("\u02a2\n\24\r\24\16\24\u02a3\3\24\3\24\3\25\3\25\3\25")
        buf.write("\3\25\3\25\5\25\u02ad\n\25\3\26\7\26\u02b0\n\26\f\26\16")
        buf.write("\26\u02b3\13\26\3\26\3\26\6\26\u02b7\n\26\r\26\16\26\u02b8")
        buf.write("\3\26\3\26\7\26\u02bd\n\26\f\26\16\26\u02c0\13\26\3\26")
        buf.write("\3\26\7\26\u02c4\n\26\f\26\16\26\u02c7\13\26\3\26\3\26")
        buf.write("\3\27\7\27\u02cc\n\27\f\27\16\27\u02cf\13\27\3\27\3\27")
        buf.write("\6\27\u02d3\n\27\r\27\16\27\u02d4\3\27\3\27\7\27\u02d9")
        buf.write("\n\27\f\27\16\27\u02dc\13\27\3\27\3\27\7\27\u02e0\n\27")
        buf.write("\f\27\16\27\u02e3\13\27\3\27\3\27\7\27\u02e7\n\27\f\27")
        buf.write("\16\27\u02ea\13\27\3\27\3\27\7\27\u02ee\n\27\f\27\16\27")
        buf.write("\u02f1\13\27\3\27\3\27\3\30\7\30\u02f6\n\30\f\30\16\30")
        buf.write("\u02f9\13\30\3\30\3\30\6\30\u02fd\n\30\r\30\16\30\u02fe")
        buf.write("\3\30\3\30\7\30\u0303\n\30\f\30\16\30\u0306\13\30\3\30")
        buf.write("\3\30\7\30\u030a\n\30\f\30\16\30\u030d\13\30\3\30\3\30")
        buf.write("\3\31\7\31\u0312\n\31\f\31\16\31\u0315\13\31\3\31\3\31")
        buf.write("\6\31\u0319\n\31\r\31\16\31\u031a\3\31\3\31\7\31\u031f")
        buf.write("\n\31\f\31\16\31\u0322\13\31\3\31\3\31\7\31\u0326\n\31")
        buf.write("\f\31\16\31\u0329\13\31\3\31\3\31\7\31\u032d\n\31\f\31")
        buf.write("\16\31\u0330\13\31\3\31\3\31\7\31\u0334\n\31\f\31\16\31")
        buf.write("\u0337\13\31\3\31\3\31\3\32\7\32\u033c\n\32\f\32\16\32")
        buf.write("\u033f\13\32\3\32\3\32\6\32\u0343\n\32\r\32\16\32\u0344")
        buf.write("\3\32\3\32\7\32\u0349\n\32\f\32\16\32\u034c\13\32\3\32")
        buf.write("\3\32\7\32\u0350\n\32\f\32\16\32\u0353\13\32\3\32\3\32")
        buf.write("\7\32\u0357\n\32\f\32\16\32\u035a\13\32\3\32\3\32\7\32")
        buf.write("\u035e\n\32\f\32\16\32\u0361\13\32\3\32\3\32\3\33\3\33")
        buf.write("\3\33\7\33\u0368\n\33\f\33\16\33\u036b\13\33\3\33\3\33")
        buf.write("\7\33\u036f\n\33\f\33\16\33\u0372\13\33\3\33\3\33\3\33")
        buf.write("\3\33\7\33\u0378\n\33\f\33\16\33\u037b\13\33\3\33\3\33")
        buf.write("\3\33\7\33\u0380\n\33\f\33\16\33\u0383\13\33\3\33\3\33")
        buf.write("\3\33\7\33\u0388\n\33\f\33\16\33\u038b\13\33\3\33\3\33")
        buf.write("\5\33\u038f\n\33\3\33\3\33\7\33\u0393\n\33\f\33\16\33")
        buf.write("\u0396\13\33\3\33\3\33\7\33\u039a\n\33\f\33\16\33\u039d")
        buf.write("\13\33\3\33\3\33\3\33\7\33\u03a2\n\33\f\33\16\33\u03a5")
        buf.write("\13\33\3\33\3\33\7\33\u03a9\n\33\f\33\16\33\u03ac\13\33")
        buf.write("\3\33\3\33\3\33\7\33\u03b1\n\33\f\33\16\33\u03b4\13\33")
        buf.write("\3\33\3\33\7\33\u03b8\n\33\f\33\16\33\u03bb\13\33\3\33")
        buf.write("\3\33\3\33\7\33\u03c0\n\33\f\33\16\33\u03c3\13\33\3\33")
        buf.write("\3\33\7\33\u03c7\n\33\f\33\16\33\u03ca\13\33\3\33\3\33")
        buf.write("\3\33\7\33\u03cf\n\33\f\33\16\33\u03d2\13\33\3\33\3\33")
        buf.write("\7\33\u03d6\n\33\f\33\16\33\u03d9\13\33\3\33\7\33\u03dc")
        buf.write("\n\33\f\33\16\33\u03df\13\33\3\34\3\34\3\34\5\34\u03e4")
        buf.write("\n\34\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u03ee")
        buf.write("\n\36\3\37\3\37\3\37\3 \7 \u03f4\n \f \16 \u03f7\13 \3")
        buf.write(" \5 \u03fa\n \3 \6 \u03fd\n \r \16 \u03fe\3!\6!\u0402")
        buf.write("\n!\r!\16!\u0403\3!\2\3\64\"\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@\2\7\3\2 \"\3\2")
        buf.write("+-\3\2)*\4\2##/\63\3\2)-\2\u048b\2Y\3\2\2\2\4\u008f\3")
        buf.write("\2\2\2\6\u009c\3\2\2\2\b\u009f\3\2\2\2\n\u00dd\3\2\2\2")
        buf.write("\f\u0112\3\2\2\2\16\u0126\3\2\2\2\20\u012b\3\2\2\2\22")
        buf.write("\u0155\3\2\2\2\24\u017e\3\2\2\2\26\u01a8\3\2\2\2\30\u01c4")
        buf.write("\3\2\2\2\32\u01e0\3\2\2\2\34\u01e5\3\2\2\2\36\u022d\3")
        buf.write("\2\2\2 \u0232\3\2\2\2\"\u024e\3\2\2\2$\u026a\3\2\2\2&")
        buf.write("\u029c\3\2\2\2(\u02ac\3\2\2\2*\u02b1\3\2\2\2,\u02cd\3")
        buf.write("\2\2\2.\u02f7\3\2\2\2\60\u0313\3\2\2\2\62\u033d\3\2\2")
        buf.write("\2\64\u038e\3\2\2\2\66\u03e3\3\2\2\28\u03e5\3\2\2\2:\u03ed")
        buf.write("\3\2\2\2<\u03ef\3\2\2\2>\u03f9\3\2\2\2@\u0401\3\2\2\2")
        buf.write("BD\7\3\2\2CB\3\2\2\2DG\3\2\2\2EC\3\2\2\2EF\3\2\2\2FH\3")
        buf.write("\2\2\2GE\3\2\2\2HL\5\4\3\2IK\7&\2\2JI\3\2\2\2KN\3\2\2")
        buf.write("\2LJ\3\2\2\2LM\3\2\2\2MP\3\2\2\2NL\3\2\2\2OQ\7(\2\2PO")
        buf.write("\3\2\2\2PQ\3\2\2\2QS\3\2\2\2RT\7\3\2\2SR\3\2\2\2TU\3\2")
        buf.write("\2\2US\3\2\2\2UV\3\2\2\2VX\3\2\2\2WE\3\2\2\2X[\3\2\2\2")
        buf.write("YW\3\2\2\2YZ\3\2\2\2Z\\\3\2\2\2[Y\3\2\2\2\\`\5$\23\2]")
        buf.write("_\7&\2\2^]\3\2\2\2_b\3\2\2\2`^\3\2\2\2`a\3\2\2\2ad\3\2")
        buf.write("\2\2b`\3\2\2\2ce\7(\2\2dc\3\2\2\2de\3\2\2\2e}\3\2\2\2")
        buf.write("fh\7\3\2\2gf\3\2\2\2hi\3\2\2\2ig\3\2\2\2ij\3\2\2\2jk\3")
        buf.write("\2\2\2ko\5\4\3\2ln\7&\2\2ml\3\2\2\2nq\3\2\2\2om\3\2\2")
        buf.write("\2op\3\2\2\2ps\3\2\2\2qo\3\2\2\2rt\7(\2\2sr\3\2\2\2st")
        buf.write("\3\2\2\2tx\3\2\2\2uw\7\3\2\2vu\3\2\2\2wz\3\2\2\2xv\3\2")
        buf.write("\2\2xy\3\2\2\2y|\3\2\2\2zx\3\2\2\2{g\3\2\2\2|\177\3\2")
        buf.write("\2\2}{\3\2\2\2}~\3\2\2\2~\u0080\3\2\2\2\177}\3\2\2\2\u0080")
        buf.write("\u0081\7\2\2\3\u0081\3\3\2\2\2\u0082\u0090\5\16\b\2\u0083")
        buf.write("\u0090\5\36\20\2\u0084\u0090\5&\24\2\u0085\u0090\5(\25")
        buf.write("\2\u0086\u0090\5\34\17\2\u0087\u0090\5\b\5\2\u0088\u0090")
        buf.write("\5\n\6\2\u0089\u008b\7&\2\2\u008a\u0089\3\2\2\2\u008b")
        buf.write("\u008e\3\2\2\2\u008c\u008a\3\2\2\2\u008c\u008d\3\2\2\2")
        buf.write("\u008d\u0090\3\2\2\2\u008e\u008c\3\2\2\2\u008f\u0082\3")
        buf.write("\2\2\2\u008f\u0083\3\2\2\2\u008f\u0084\3\2\2\2\u008f\u0085")
        buf.write("\3\2\2\2\u008f\u0086\3\2\2\2\u008f\u0087\3\2\2\2\u008f")
        buf.write("\u0088\3\2\2\2\u008f\u008c\3\2\2\2\u0090\5\3\2\2\2\u0091")
        buf.write("\u0093\7&\2\2\u0092\u0091\3\2\2\2\u0093\u0096\3\2\2\2")
        buf.write("\u0094\u0092\3\2\2\2\u0094\u0095\3\2\2\2\u0095\u0097\3")
        buf.write("\2\2\2\u0096\u0094\3\2\2\2\u0097\u0098\5\4\3\2\u0098\u0099")
        buf.write("\7\3\2\2\u0099\u009b\3\2\2\2\u009a\u0094\3\2\2\2\u009b")
        buf.write("\u009e\3\2\2\2\u009c\u009a\3\2\2\2\u009c\u009d\3\2\2\2")
        buf.write("\u009d\7\3\2\2\2\u009e\u009c\3\2\2\2\u009f\u00a1\7\4\2")
        buf.write("\2\u00a0\u00a2\7&\2\2\u00a1\u00a0\3\2\2\2\u00a2\u00a3")
        buf.write("\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a3\u00a4\3\2\2\2\u00a4")
        buf.write("\u00a5\3\2\2\2\u00a5\u00a7\78\2\2\u00a6\u00a8\7&\2\2\u00a7")
        buf.write("\u00a6\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00a7\3\2\2\2")
        buf.write("\u00a9\u00aa\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab\u00ad\7")
        buf.write("\5\2\2\u00ac\u00ae\7&\2\2\u00ad\u00ac\3\2\2\2\u00ae\u00af")
        buf.write("\3\2\2\2\u00af\u00ad\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0")
        buf.write("\u00b1\3\2\2\2\u00b1\u00b3\5\64\33\2\u00b2\u00b4\7&\2")
        buf.write("\2\u00b3\u00b2\3\2\2\2\u00b4\u00b5\3\2\2\2\u00b5\u00b3")
        buf.write("\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7")
        buf.write("\u00b9\7\6\2\2\u00b8\u00ba\7&\2\2\u00b9\u00b8\3\2\2\2")
        buf.write("\u00ba\u00bb\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bb\u00bc\3")
        buf.write("\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\u00bf\5\64\33\2\u00be")
        buf.write("\u00c0\7&\2\2\u00bf\u00be\3\2\2\2\u00c0\u00c1\3\2\2\2")
        buf.write("\u00c1\u00bf\3\2\2\2\u00c1\u00c2\3\2\2\2\u00c2\u00c3\3")
        buf.write("\2\2\2\u00c3\u00c5\7\7\2\2\u00c4\u00c6\7&\2\2\u00c5\u00c4")
        buf.write("\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00c5\3\2\2\2\u00c7")
        buf.write("\u00c8\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00cb\5\64\33")
        buf.write("\2\u00ca\u00cc\7&\2\2\u00cb\u00ca\3\2\2\2\u00cc\u00cd")
        buf.write("\3\2\2\2\u00cd\u00cb\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce")
        buf.write("\u00cf\3\2\2\2\u00cf\u00d0\7\b\2\2\u00d0\u00d1\7\3\2\2")
        buf.write("\u00d1\u00d5\5\6\4\2\u00d2\u00d4\7&\2\2\u00d3\u00d2\3")
        buf.write("\2\2\2\u00d4\u00d7\3\2\2\2\u00d5\u00d3\3\2\2\2\u00d5\u00d6")
        buf.write("\3\2\2\2\u00d6\u00d8\3\2\2\2\u00d7\u00d5\3\2\2\2\u00d8")
        buf.write("\u00d9\7\t\2\2\u00d9\t\3\2\2\2\u00da\u00dc\7&\2\2\u00db")
        buf.write("\u00da\3\2\2\2\u00dc\u00df\3\2\2\2\u00dd\u00db\3\2\2\2")
        buf.write("\u00dd\u00de\3\2\2\2\u00de\u00e0\3\2\2\2\u00df\u00dd\3")
        buf.write("\2\2\2\u00e0\u00e2\7\n\2\2\u00e1\u00e3\7&\2\2\u00e2\u00e1")
        buf.write("\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e4")
        buf.write("\u00e5\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00f6\5\f\7\2")
        buf.write("\u00e7\u00e9\7\13\2\2\u00e8\u00ea\7&\2\2\u00e9\u00e8\3")
        buf.write("\2\2\2\u00ea\u00eb\3\2\2\2\u00eb\u00e9\3\2\2\2\u00eb\u00ec")
        buf.write("\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed\u00ef\7\n\2\2\u00ee")
        buf.write("\u00f0\7&\2\2\u00ef\u00ee\3\2\2\2\u00f0\u00f1\3\2\2\2")
        buf.write("\u00f1\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f3\3")
        buf.write("\2\2\2\u00f3\u00f5\5\f\7\2\u00f4\u00e7\3\2\2\2\u00f5\u00f8")
        buf.write("\3\2\2\2\u00f6\u00f4\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7")
        buf.write("\u00fc\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f9\u00fb\7&\2\2")
        buf.write("\u00fa\u00f9\3\2\2\2\u00fb\u00fe\3\2\2\2\u00fc\u00fa\3")
        buf.write("\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u0108\3\2\2\2\u00fe\u00fc")
        buf.write("\3\2\2\2\u00ff\u0101\7\13\2\2\u0100\u0102\7&\2\2\u0101")
        buf.write("\u0100\3\2\2\2\u0102\u0103\3\2\2\2\u0103\u0101\3\2\2\2")
        buf.write("\u0103\u0104\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u0106\7")
        buf.write("\b\2\2\u0106\u0107\7\3\2\2\u0107\u0109\5\6\4\2\u0108\u00ff")
        buf.write("\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u010d\3\2\2\2\u010a")
        buf.write("\u010c\7&\2\2\u010b\u010a\3\2\2\2\u010c\u010f\3\2\2\2")
        buf.write("\u010d\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u0110\3")
        buf.write("\2\2\2\u010f\u010d\3\2\2\2\u0110\u0111\7\t\2\2\u0111\13")
        buf.write("\3\2\2\2\u0112\u0114\5\64\33\2\u0113\u0115\7&\2\2\u0114")
        buf.write("\u0113\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0114\3\2\2\2")
        buf.write("\u0116\u0117\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u0119\7")
        buf.write("\b\2\2\u0119\u011d\7\3\2\2\u011a\u011c\7&\2\2\u011b\u011a")
        buf.write("\3\2\2\2\u011c\u011f\3\2\2\2\u011d\u011b\3\2\2\2\u011d")
        buf.write("\u011e\3\2\2\2\u011e\u0120\3\2\2\2\u011f\u011d\3\2\2\2")
        buf.write("\u0120\u0121\5\6\4\2\u0121\r\3\2\2\2\u0122\u0127\5\20")
        buf.write("\t\2\u0123\u0127\5\22\n\2\u0124\u0127\5\24\13\2\u0125")
        buf.write("\u0127\5\26\f\2\u0126\u0122\3\2\2\2\u0126\u0123\3\2\2")
        buf.write("\2\u0126\u0124\3\2\2\2\u0126\u0125\3\2\2\2\u0127\17\3")
        buf.write("\2\2\2\u0128\u012a\7&\2\2\u0129\u0128\3\2\2\2\u012a\u012d")
        buf.write("\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c")
        buf.write("\u012e\3\2\2\2\u012d\u012b\3\2\2\2\u012e\u0130\7\f\2\2")
        buf.write("\u012f\u0131\7&\2\2\u0130\u012f\3\2\2\2\u0131\u0132\3")
        buf.write("\2\2\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0134")
        buf.write("\3\2\2\2\u0134\u0138\78\2\2\u0135\u0137\7&\2\2\u0136\u0135")
        buf.write("\3\2\2\2\u0137\u013a\3\2\2\2\u0138\u0136\3\2\2\2\u0138")
        buf.write("\u0139\3\2\2\2\u0139\u013b\3\2\2\2\u013a\u0138\3\2\2\2")
        buf.write("\u013b\u013f\7\r\2\2\u013c\u013e\7&\2\2\u013d\u013c\3")
        buf.write("\2\2\2\u013e\u0141\3\2\2\2\u013f\u013d\3\2\2\2\u013f\u0140")
        buf.write("\3\2\2\2\u0140\u0142\3\2\2\2\u0141\u013f\3\2\2\2\u0142")
        buf.write("\u0146\5\64\33\2\u0143\u0145\7&\2\2\u0144\u0143\3\2\2")
        buf.write("\2\u0145\u0148\3\2\2\2\u0146\u0144\3\2\2\2\u0146\u0147")
        buf.write("\3\2\2\2\u0147\u0149\3\2\2\2\u0148\u0146\3\2\2\2\u0149")
        buf.write("\u014d\7\16\2\2\u014a\u014c\7&\2\2\u014b\u014a\3\2\2\2")
        buf.write("\u014c\u014f\3\2\2\2\u014d\u014b\3\2\2\2\u014d\u014e\3")
        buf.write("\2\2\2\u014e\u0150\3\2\2\2\u014f\u014d\3\2\2\2\u0150\u0151")
        buf.write("\5\64\33\2\u0151\21\3\2\2\2\u0152\u0154\7&\2\2\u0153\u0152")
        buf.write("\3\2\2\2\u0154\u0157\3\2\2\2\u0155\u0153\3\2\2\2\u0155")
        buf.write("\u0156\3\2\2\2\u0156\u0158\3\2\2\2\u0157\u0155\3\2\2\2")
        buf.write("\u0158\u015a\7\17\2\2\u0159\u015b\7&\2\2\u015a\u0159\3")
        buf.write("\2\2\2\u015b\u015c\3\2\2\2\u015c\u015a\3\2\2\2\u015c\u015d")
        buf.write("\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u0162\78\2\2\u015f")
        buf.write("\u0161\7&\2\2\u0160\u015f\3\2\2\2\u0161\u0164\3\2\2\2")
        buf.write("\u0162\u0160\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0165\3")
        buf.write("\2\2\2\u0164\u0162\3\2\2\2\u0165\u0169\7\r\2\2\u0166\u0168")
        buf.write("\7&\2\2\u0167\u0166\3\2\2\2\u0168\u016b\3\2\2\2\u0169")
        buf.write("\u0167\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016c\3\2\2\2")
        buf.write("\u016b\u0169\3\2\2\2\u016c\u0170\78\2\2\u016d\u016f\7")
        buf.write("&\2\2\u016e\u016d\3\2\2\2\u016f\u0172\3\2\2\2\u0170\u016e")
        buf.write("\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0173\3\2\2\2\u0172")
        buf.write("\u0170\3\2\2\2\u0173\u0175\7\16\2\2\u0174\u0176\7&\2\2")
        buf.write("\u0175\u0174\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0175\3")
        buf.write("\2\2\2\u0177\u0178\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u017a")
        buf.write("\78\2\2\u017a\23\3\2\2\2\u017b\u017d\7&\2\2\u017c\u017b")
        buf.write("\3\2\2\2\u017d\u0180\3\2\2\2\u017e\u017c\3\2\2\2\u017e")
        buf.write("\u017f\3\2\2\2\u017f\u0181\3\2\2\2\u0180\u017e\3\2\2\2")
        buf.write("\u0181\u0183\7\20\2\2\u0182\u0184\7&\2\2\u0183\u0182\3")
        buf.write("\2\2\2\u0184\u0185\3\2\2\2\u0185\u0183\3\2\2\2\u0185\u0186")
        buf.write("\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u018b\78\2\2\u0188")
        buf.write("\u018a\7&\2\2\u0189\u0188\3\2\2\2\u018a\u018d\3\2\2\2")
        buf.write("\u018b\u0189\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018e\3")
        buf.write("\2\2\2\u018d\u018b\3\2\2\2\u018e\u0192\7\r\2\2\u018f\u0191")
        buf.write("\7&\2\2\u0190\u018f\3\2\2\2\u0191\u0194\3\2\2\2\u0192")
        buf.write("\u0190\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u0195\3\2\2\2")
        buf.write("\u0194\u0192\3\2\2\2\u0195\u0199\78\2\2\u0196\u0198\7")
        buf.write("&\2\2\u0197\u0196\3\2\2\2\u0198\u019b\3\2\2\2\u0199\u0197")
        buf.write("\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019c\3\2\2\2\u019b")
        buf.write("\u0199\3\2\2\2\u019c\u01a0\7\16\2\2\u019d\u019f\7&\2\2")
        buf.write("\u019e\u019d\3\2\2\2\u019f\u01a2\3\2\2\2\u01a0\u019e\3")
        buf.write("\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a3\3\2\2\2\u01a2\u01a0")
        buf.write("\3\2\2\2\u01a3\u01a4\5\64\33\2\u01a4\25\3\2\2\2\u01a5")
        buf.write("\u01a7\7&\2\2\u01a6\u01a5\3\2\2\2\u01a7\u01aa\3\2\2\2")
        buf.write("\u01a8\u01a6\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01ab\3")
        buf.write("\2\2\2\u01aa\u01a8\3\2\2\2\u01ab\u01ad\7\21\2\2\u01ac")
        buf.write("\u01ae\7&\2\2\u01ad\u01ac\3\2\2\2\u01ae\u01af\3\2\2\2")
        buf.write("\u01af\u01ad\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u01b1\3")
        buf.write("\2\2\2\u01b1\u01b5\78\2\2\u01b2\u01b4\7&\2\2\u01b3\u01b2")
        buf.write("\3\2\2\2\u01b4\u01b7\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b5")
        buf.write("\u01b6\3\2\2\2\u01b6\u01b8\3\2\2\2\u01b7\u01b5\3\2\2\2")
        buf.write("\u01b8\u01bc\7\r\2\2\u01b9\u01bb\7&\2\2\u01ba\u01b9\3")
        buf.write("\2\2\2\u01bb\u01be\3\2\2\2\u01bc\u01ba\3\2\2\2\u01bc\u01bd")
        buf.write("\3\2\2\2\u01bd\u01bf\3\2\2\2\u01be\u01bc\3\2\2\2\u01bf")
        buf.write("\u01c0\78\2\2\u01c0\27\3\2\2\2\u01c1\u01c3\7&\2\2\u01c2")
        buf.write("\u01c1\3\2\2\2\u01c3\u01c6\3\2\2\2\u01c4\u01c2\3\2\2\2")
        buf.write("\u01c4\u01c5\3\2\2\2\u01c5\u01c7\3\2\2\2\u01c6\u01c4\3")
        buf.write("\2\2\2\u01c7\u01cb\78\2\2\u01c8\u01ca\7&\2\2\u01c9\u01c8")
        buf.write("\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cb")
        buf.write("\u01cc\3\2\2\2\u01cc\u01ce\3\2\2\2\u01cd\u01cb\3\2\2\2")
        buf.write("\u01ce\u01d2\7\22\2\2\u01cf\u01d1\7&\2\2\u01d0\u01cf\3")
        buf.write("\2\2\2\u01d1\u01d4\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d2\u01d3")
        buf.write("\3\2\2\2\u01d3\u01d5\3\2\2\2\u01d4\u01d2\3\2\2\2\u01d5")
        buf.write("\u01d9\5\64\33\2\u01d6\u01d8\7&\2\2\u01d7\u01d6\3\2\2")
        buf.write("\2\u01d8\u01db\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da")
        buf.write("\3\2\2\2\u01da\u01dc\3\2\2\2\u01db\u01d9\3\2\2\2\u01dc")
        buf.write("\u01dd\7\23\2\2\u01dd\31\3\2\2\2\u01de\u01e1\78\2\2\u01df")
        buf.write("\u01e1\5\30\r\2\u01e0\u01de\3\2\2\2\u01e0\u01df\3\2\2")
        buf.write("\2\u01e1\33\3\2\2\2\u01e2\u01e4\7&\2\2\u01e3\u01e2\3\2")
        buf.write("\2\2\u01e4\u01e7\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e5\u01e6")
        buf.write("\3\2\2\2\u01e6\u01e8\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e8")
        buf.write("\u01ec\7\24\2\2\u01e9\u01eb\7&\2\2\u01ea\u01e9\3\2\2\2")
        buf.write("\u01eb\u01ee\3\2\2\2\u01ec\u01ea\3\2\2\2\u01ec\u01ed\3")
        buf.write("\2\2\2\u01ed\u01ef\3\2\2\2\u01ee\u01ec\3\2\2\2\u01ef\u01f3")
        buf.write("\7\61\2\2\u01f0\u01f2\7&\2\2\u01f1\u01f0\3\2\2\2\u01f2")
        buf.write("\u01f5\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3\u01f4\3\2\2\2")
        buf.write("\u01f4\u01f6\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f6\u01fa\7")
        buf.write("\64\2\2\u01f7\u01f9\7&\2\2\u01f8\u01f7\3\2\2\2\u01f9\u01fc")
        buf.write("\3\2\2\2\u01fa\u01f8\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb")
        buf.write("\u01fd\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fd\u01ff\7\60\2")
        buf.write("\2\u01fe\u0200\7&\2\2\u01ff\u01fe\3\2\2\2\u0200\u0201")
        buf.write("\3\2\2\2\u0201\u01ff\3\2\2\2\u0201\u0202\3\2\2\2\u0202")
        buf.write("\u0203\3\2\2\2\u0203\u0207\78\2\2\u0204\u0206\7&\2\2\u0205")
        buf.write("\u0204\3\2\2\2\u0206\u0209\3\2\2\2\u0207\u0205\3\2\2\2")
        buf.write("\u0207\u0208\3\2\2\2\u0208\u020a\3\2\2\2\u0209\u0207\3")
        buf.write("\2\2\2\u020a\u020e\7\r\2\2\u020b\u020d\7&\2\2\u020c\u020b")
        buf.write("\3\2\2\2\u020d\u0210\3\2\2\2\u020e\u020c\3\2\2\2\u020e")
        buf.write("\u020f\3\2\2\2\u020f\u0211\3\2\2\2\u0210\u020e\3\2\2\2")
        buf.write("\u0211\u0215\78\2\2\u0212\u0214\7&\2\2\u0213\u0212\3\2")
        buf.write("\2\2\u0214\u0217\3\2\2\2\u0215\u0213\3\2\2\2\u0215\u0216")
        buf.write("\3\2\2\2\u0216\u0228\3\2\2\2\u0217\u0215\3\2\2\2\u0218")
        buf.write("\u021c\7\16\2\2\u0219\u021b\7&\2\2\u021a\u0219\3\2\2\2")
        buf.write("\u021b\u021e\3\2\2\2\u021c\u021a\3\2\2\2\u021c\u021d\3")
        buf.write("\2\2\2\u021d\u021f\3\2\2\2\u021e\u021c\3\2\2\2\u021f\u0223")
        buf.write("\78\2\2\u0220\u0222\7&\2\2\u0221\u0220\3\2\2\2\u0222\u0225")
        buf.write("\3\2\2\2\u0223\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224")
        buf.write("\u0227\3\2\2\2\u0225\u0223\3\2\2\2\u0226\u0218\3\2\2\2")
        buf.write("\u0227\u022a\3\2\2\2\u0228\u0226\3\2\2\2\u0228\u0229\3")
        buf.write("\2\2\2\u0229\35\3\2\2\2\u022a\u0228\3\2\2\2\u022b\u022e")
        buf.write("\5 \21\2\u022c\u022e\5\"\22\2\u022d\u022b\3\2\2\2\u022d")
        buf.write("\u022c\3\2\2\2\u022e\37\3\2\2\2\u022f\u0231\7&\2\2\u0230")
        buf.write("\u022f\3\2\2\2\u0231\u0234\3\2\2\2\u0232\u0230\3\2\2\2")
        buf.write("\u0232\u0233\3\2\2\2\u0233\u0235\3\2\2\2\u0234\u0232\3")
        buf.write("\2\2\2\u0235\u0237\7\25\2\2\u0236\u0238\7&\2\2\u0237\u0236")
        buf.write("\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u0237\3\2\2\2\u0239")
        buf.write("\u023a\3\2\2\2\u023a\u023b\3\2\2\2\u023b\u023f\78\2\2")
        buf.write("\u023c\u023e\7&\2\2\u023d\u023c\3\2\2\2\u023e\u0241\3")
        buf.write("\2\2\2\u023f\u023d\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0242")
        buf.write("\3\2\2\2\u0241\u023f\3\2\2\2\u0242\u0246\7\r\2\2\u0243")
        buf.write("\u0245\7&\2\2\u0244\u0243\3\2\2\2\u0245\u0248\3\2\2\2")
        buf.write("\u0246\u0244\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0249\3")
        buf.write("\2\2\2\u0248\u0246\3\2\2\2\u0249\u024a\5\64\33\2\u024a")
        buf.write("!\3\2\2\2\u024b\u024d\7&\2\2\u024c\u024b\3\2\2\2\u024d")
        buf.write("\u0250\3\2\2\2\u024e\u024c\3\2\2\2\u024e\u024f\3\2\2\2")
        buf.write("\u024f\u0251\3\2\2\2\u0250\u024e\3\2\2\2\u0251\u0253\7")
        buf.write("\26\2\2\u0252\u0254\7&\2\2\u0253\u0252\3\2\2\2\u0254\u0255")
        buf.write("\3\2\2\2\u0255\u0253\3\2\2\2\u0255\u0256\3\2\2\2\u0256")
        buf.write("\u0257\3\2\2\2\u0257\u025b\78\2\2\u0258\u025a\7&\2\2\u0259")
        buf.write("\u0258\3\2\2\2\u025a\u025d\3\2\2\2\u025b\u0259\3\2\2\2")
        buf.write("\u025b\u025c\3\2\2\2\u025c\u025e\3\2\2\2\u025d\u025b\3")
        buf.write("\2\2\2\u025e\u0262\7\r\2\2\u025f\u0261\7&\2\2\u0260\u025f")
        buf.write("\3\2\2\2\u0261\u0264\3\2\2\2\u0262\u0260\3\2\2\2\u0262")
        buf.write("\u0263\3\2\2\2\u0263\u0265\3\2\2\2\u0264\u0262\3\2\2\2")
        buf.write("\u0265\u0266\5\64\33\2\u0266#\3\2\2\2\u0267\u0269\7&\2")
        buf.write("\2\u0268\u0267\3\2\2\2\u0269\u026c\3\2\2\2\u026a\u0268")
        buf.write("\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026d\3\2\2\2\u026c")
        buf.write("\u026a\3\2\2\2\u026d\u0271\7\27\2\2\u026e\u0270\7&\2\2")
        buf.write("\u026f\u026e\3\2\2\2\u0270\u0273\3\2\2\2\u0271\u026f\3")
        buf.write("\2\2\2\u0271\u0272\3\2\2\2\u0272\u0274\3\2\2\2\u0273\u0271")
        buf.write("\3\2\2\2\u0274\u0278\7\r\2\2\u0275\u0277\7&\2\2\u0276")
        buf.write("\u0275\3\2\2\2\u0277\u027a\3\2\2\2\u0278\u0276\3\2\2\2")
        buf.write("\u0278\u0279\3\2\2\2\u0279\u027b\3\2\2\2\u027a\u0278\3")
        buf.write("\2\2\2\u027b\u027f\5\64\33\2\u027c\u027e\7&\2\2\u027d")
        buf.write("\u027c\3\2\2\2\u027e\u0281\3\2\2\2\u027f\u027d\3\2\2\2")
        buf.write("\u027f\u0280\3\2\2\2\u0280\u0282\3\2\2\2\u0281\u027f\3")
        buf.write("\2\2\2\u0282\u0286\7\16\2\2\u0283\u0285\7&\2\2\u0284\u0283")
        buf.write("\3\2\2\2\u0285\u0288\3\2\2\2\u0286\u0284\3\2\2\2\u0286")
        buf.write("\u0287\3\2\2\2\u0287\u0289\3\2\2\2\u0288\u0286\3\2\2\2")
        buf.write("\u0289\u028d\5\64\33\2\u028a\u028c\7&\2\2\u028b\u028a")
        buf.write("\3\2\2\2\u028c\u028f\3\2\2\2\u028d\u028b\3\2\2\2\u028d")
        buf.write("\u028e\3\2\2\2\u028e\u0290\3\2\2\2\u028f\u028d\3\2\2\2")
        buf.write("\u0290\u0294\7\16\2\2\u0291\u0293\7&\2\2\u0292\u0291\3")
        buf.write("\2\2\2\u0293\u0296\3\2\2\2\u0294\u0292\3\2\2\2\u0294\u0295")
        buf.write("\3\2\2\2\u0295\u0297\3\2\2\2\u0296\u0294\3\2\2\2\u0297")
        buf.write("\u0298\7\65\2\2\u0298%\3\2\2\2\u0299\u029b\7&\2\2\u029a")
        buf.write("\u0299\3\2\2\2\u029b\u029e\3\2\2\2\u029c\u029a\3\2\2\2")
        buf.write("\u029c\u029d\3\2\2\2\u029d\u029f\3\2\2\2\u029e\u029c\3")
        buf.write("\2\2\2\u029f\u02a1\7\30\2\2\u02a0\u02a2\7&\2\2\u02a1\u02a0")
        buf.write("\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02a1\3\2\2\2\u02a3")
        buf.write("\u02a4\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\u02a6\5\32\16")
        buf.write("\2\u02a6\'\3\2\2\2\u02a7\u02ad\5*\26\2\u02a8\u02ad\5,")
        buf.write("\27\2\u02a9\u02ad\5.\30\2\u02aa\u02ad\5\60\31\2\u02ab")
        buf.write("\u02ad\5\62\32\2\u02ac\u02a7\3\2\2\2\u02ac\u02a8\3\2\2")
        buf.write("\2\u02ac\u02a9\3\2\2\2\u02ac\u02aa\3\2\2\2\u02ac\u02ab")
        buf.write("\3\2\2\2\u02ad)\3\2\2\2\u02ae\u02b0\7&\2\2\u02af\u02ae")
        buf.write("\3\2\2\2\u02b0\u02b3\3\2\2\2\u02b1\u02af\3\2\2\2\u02b1")
        buf.write("\u02b2\3\2\2\2\u02b2\u02b4\3\2\2\2\u02b3\u02b1\3\2\2\2")
        buf.write("\u02b4\u02b6\7\31\2\2\u02b5\u02b7\7&\2\2\u02b6\u02b5\3")
        buf.write("\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02b6\3\2\2\2\u02b8\u02b9")
        buf.write("\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02be\5\32\16\2\u02bb")
        buf.write("\u02bd\7&\2\2\u02bc\u02bb\3\2\2\2\u02bd\u02c0\3\2\2\2")
        buf.write("\u02be\u02bc\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c1\3")
        buf.write("\2\2\2\u02c0\u02be\3\2\2\2\u02c1\u02c5\7\r\2\2\u02c2\u02c4")
        buf.write("\7&\2\2\u02c3\u02c2\3\2\2\2\u02c4\u02c7\3\2\2\2\u02c5")
        buf.write("\u02c3\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02c8\3\2\2\2")
        buf.write("\u02c7\u02c5\3\2\2\2\u02c8\u02c9\7\65\2\2\u02c9+\3\2\2")
        buf.write("\2\u02ca\u02cc\7&\2\2\u02cb\u02ca\3\2\2\2\u02cc\u02cf")
        buf.write("\3\2\2\2\u02cd\u02cb\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce")
        buf.write("\u02d0\3\2\2\2\u02cf\u02cd\3\2\2\2\u02d0\u02d2\7\32\2")
        buf.write("\2\u02d1\u02d3\7&\2\2\u02d2\u02d1\3\2\2\2\u02d3\u02d4")
        buf.write("\3\2\2\2\u02d4\u02d2\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5")
        buf.write("\u02d6\3\2\2\2\u02d6\u02da\5\32\16\2\u02d7\u02d9\7&\2")
        buf.write("\2\u02d8\u02d7\3\2\2\2\u02d9\u02dc\3\2\2\2\u02da\u02d8")
        buf.write("\3\2\2\2\u02da\u02db\3\2\2\2\u02db\u02dd\3\2\2\2\u02dc")
        buf.write("\u02da\3\2\2\2\u02dd\u02e1\7\r\2\2\u02de\u02e0\7&\2\2")
        buf.write("\u02df\u02de\3\2\2\2\u02e0\u02e3\3\2\2\2\u02e1\u02df\3")
        buf.write("\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e4\3\2\2\2\u02e3\u02e1")
        buf.write("\3\2\2\2\u02e4\u02e8\5\64\33\2\u02e5\u02e7\7&\2\2\u02e6")
        buf.write("\u02e5\3\2\2\2\u02e7\u02ea\3\2\2\2\u02e8\u02e6\3\2\2\2")
        buf.write("\u02e8\u02e9\3\2\2\2\u02e9\u02eb\3\2\2\2\u02ea\u02e8\3")
        buf.write("\2\2\2\u02eb\u02ef\7\16\2\2\u02ec\u02ee\7&\2\2\u02ed\u02ec")
        buf.write("\3\2\2\2\u02ee\u02f1\3\2\2\2\u02ef\u02ed\3\2\2\2\u02ef")
        buf.write("\u02f0\3\2\2\2\u02f0\u02f2\3\2\2\2\u02f1\u02ef\3\2\2\2")
        buf.write("\u02f2\u02f3\5\64\33\2\u02f3-\3\2\2\2\u02f4\u02f6\7&\2")
        buf.write("\2\u02f5\u02f4\3\2\2\2\u02f6\u02f9\3\2\2\2\u02f7\u02f5")
        buf.write("\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02fa\3\2\2\2\u02f9")
        buf.write("\u02f7\3\2\2\2\u02fa\u02fc\7\33\2\2\u02fb\u02fd\7&\2\2")
        buf.write("\u02fc\u02fb\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u02fc\3")
        buf.write("\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0300\3\2\2\2\u0300\u0304")
        buf.write("\5\32\16\2\u0301\u0303\7&\2\2\u0302\u0301\3\2\2\2\u0303")
        buf.write("\u0306\3\2\2\2\u0304\u0302\3\2\2\2\u0304\u0305\3\2\2\2")
        buf.write("\u0305\u0307\3\2\2\2\u0306\u0304\3\2\2\2\u0307\u030b\7")
        buf.write("\r\2\2\u0308\u030a\7&\2\2\u0309\u0308\3\2\2\2\u030a\u030d")
        buf.write("\3\2\2\2\u030b\u0309\3\2\2\2\u030b\u030c\3\2\2\2\u030c")
        buf.write("\u030e\3\2\2\2\u030d\u030b\3\2\2\2\u030e\u030f\5\32\16")
        buf.write("\2\u030f/\3\2\2\2\u0310\u0312\7&\2\2\u0311\u0310\3\2\2")
        buf.write("\2\u0312\u0315\3\2\2\2\u0313\u0311\3\2\2\2\u0313\u0314")
        buf.write("\3\2\2\2\u0314\u0316\3\2\2\2\u0315\u0313\3\2\2\2\u0316")
        buf.write("\u0318\7\34\2\2\u0317\u0319\7&\2\2\u0318\u0317\3\2\2\2")
        buf.write("\u0319\u031a\3\2\2\2\u031a\u0318\3\2\2\2\u031a\u031b\3")
        buf.write("\2\2\2\u031b\u031c\3\2\2\2\u031c\u0320\5\32\16\2\u031d")
        buf.write("\u031f\7&\2\2\u031e\u031d\3\2\2\2\u031f\u0322\3\2\2\2")
        buf.write("\u0320\u031e\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0323\3")
        buf.write("\2\2\2\u0322\u0320\3\2\2\2\u0323\u0327\7\r\2\2\u0324\u0326")
        buf.write("\7&\2\2\u0325\u0324\3\2\2\2\u0326\u0329\3\2\2\2\u0327")
        buf.write("\u0325\3\2\2\2\u0327\u0328\3\2\2\2\u0328\u032a\3\2\2\2")
        buf.write("\u0329\u0327\3\2\2\2\u032a\u032e\5\64\33\2\u032b\u032d")
        buf.write("\7&\2\2\u032c\u032b\3\2\2\2\u032d\u0330\3\2\2\2\u032e")
        buf.write("\u032c\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0331\3\2\2\2")
        buf.write("\u0330\u032e\3\2\2\2\u0331\u0335\7\16\2\2\u0332\u0334")
        buf.write("\7&\2\2\u0333\u0332\3\2\2\2\u0334\u0337\3\2\2\2\u0335")
        buf.write("\u0333\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u0338\3\2\2\2")
        buf.write("\u0337\u0335\3\2\2\2\u0338\u0339\5\32\16\2\u0339\61\3")
        buf.write("\2\2\2\u033a\u033c\7&\2\2\u033b\u033a\3\2\2\2\u033c\u033f")
        buf.write("\3\2\2\2\u033d\u033b\3\2\2\2\u033d\u033e\3\2\2\2\u033e")
        buf.write("\u0340\3\2\2\2\u033f\u033d\3\2\2\2\u0340\u0342\7\35\2")
        buf.write("\2\u0341\u0343\7&\2\2\u0342\u0341\3\2\2\2\u0343\u0344")
        buf.write("\3\2\2\2\u0344\u0342\3\2\2\2\u0344\u0345\3\2\2\2\u0345")
        buf.write("\u0346\3\2\2\2\u0346\u034a\5\32\16\2\u0347\u0349\7&\2")
        buf.write("\2\u0348\u0347\3\2\2\2\u0349\u034c\3\2\2\2\u034a\u0348")
        buf.write("\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034d\3\2\2\2\u034c")
        buf.write("\u034a\3\2\2\2\u034d\u0351\7\r\2\2\u034e\u0350\7&\2\2")
        buf.write("\u034f\u034e\3\2\2\2\u0350\u0353\3\2\2\2\u0351\u034f\3")
        buf.write("\2\2\2\u0351\u0352\3\2\2\2\u0352\u0354\3\2\2\2\u0353\u0351")
        buf.write("\3\2\2\2\u0354\u0358\5\64\33\2\u0355\u0357\7&\2\2\u0356")
        buf.write("\u0355\3\2\2\2\u0357\u035a\3\2\2\2\u0358\u0356\3\2\2\2")
        buf.write("\u0358\u0359\3\2\2\2\u0359\u035b\3\2\2\2\u035a\u0358\3")
        buf.write("\2\2\2\u035b\u035f\7\16\2\2\u035c\u035e\7&\2\2\u035d\u035c")
        buf.write("\3\2\2\2\u035e\u0361\3\2\2\2\u035f\u035d\3\2\2\2\u035f")
        buf.write("\u0360\3\2\2\2\u0360\u0362\3\2\2\2\u0361\u035f\3\2\2\2")
        buf.write("\u0362\u0363\5\32\16\2\u0363\63\3\2\2\2\u0364\u0365\b")
        buf.write("\33\1\2\u0365\u0369\7\36\2\2\u0366\u0368\7&\2\2\u0367")
        buf.write("\u0366\3\2\2\2\u0368\u036b\3\2\2\2\u0369\u0367\3\2\2\2")
        buf.write("\u0369\u036a\3\2\2\2\u036a\u036c\3\2\2\2\u036b\u0369\3")
        buf.write("\2\2\2\u036c\u0370\5\64\33\2\u036d\u036f\7&\2\2\u036e")
        buf.write("\u036d\3\2\2\2\u036f\u0372\3\2\2\2\u0370\u036e\3\2\2\2")
        buf.write("\u0370\u0371\3\2\2\2\u0371\u0373\3\2\2\2\u0372\u0370\3")
        buf.write("\2\2\2\u0373\u0374\7\37\2\2\u0374\u038f\3\2\2\2\u0375")
        buf.write("\u0379\t\2\2\2\u0376\u0378\7&\2\2\u0377\u0376\3\2\2\2")
        buf.write("\u0378\u037b\3\2\2\2\u0379\u0377\3\2\2\2\u0379\u037a\3")
        buf.write("\2\2\2\u037a\u037c\3\2\2\2\u037b\u0379\3\2\2\2\u037c\u038f")
        buf.write("\5\64\33\13\u037d\u0381\7*\2\2\u037e\u0380\7&\2\2\u037f")
        buf.write("\u037e\3\2\2\2\u0380\u0383\3\2\2\2\u0381\u037f\3\2\2\2")
        buf.write("\u0381\u0382\3\2\2\2\u0382\u0384\3\2\2\2\u0383\u0381\3")
        buf.write("\2\2\2\u0384\u038f\5\64\33\n\u0385\u0389\7.\2\2\u0386")
        buf.write("\u0388\7&\2\2\u0387\u0386\3\2\2\2\u0388\u038b\3\2\2\2")
        buf.write("\u0389\u0387\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038c\3")
        buf.write("\2\2\2\u038b\u0389\3\2\2\2\u038c\u038f\5\64\33\6\u038d")
        buf.write("\u038f\5\66\34\2\u038e\u0364\3\2\2\2\u038e\u0375\3\2\2")
        buf.write("\2\u038e\u037d\3\2\2\2\u038e\u0385\3\2\2\2\u038e\u038d")
        buf.write("\3\2\2\2\u038f\u03dd\3\2\2\2\u0390\u0394\f\t\2\2\u0391")
        buf.write("\u0393\7&\2\2\u0392\u0391\3\2\2\2\u0393\u0396\3\2\2\2")
        buf.write("\u0394\u0392\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u0397\3")
        buf.write("\2\2\2\u0396\u0394\3\2\2\2\u0397\u039b\t\3\2\2\u0398\u039a")
        buf.write("\7&\2\2\u0399\u0398\3\2\2\2\u039a\u039d\3\2\2\2\u039b")
        buf.write("\u0399\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039e\3\2\2\2")
        buf.write("\u039d\u039b\3\2\2\2\u039e\u03dc\5\64\33\n\u039f\u03a3")
        buf.write("\f\b\2\2\u03a0\u03a2\7&\2\2\u03a1\u03a0\3\2\2\2\u03a2")
        buf.write("\u03a5\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a3\u03a4\3\2\2\2")
        buf.write("\u03a4\u03a6\3\2\2\2\u03a5\u03a3\3\2\2\2\u03a6\u03aa\t")
        buf.write("\4\2\2\u03a7\u03a9\7&\2\2\u03a8\u03a7\3\2\2\2\u03a9\u03ac")
        buf.write("\3\2\2\2\u03aa\u03a8\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab")
        buf.write("\u03ad\3\2\2\2\u03ac\u03aa\3\2\2\2\u03ad\u03dc\5\64\33")
        buf.write("\t\u03ae\u03b2\f\7\2\2\u03af\u03b1\7&\2\2\u03b0\u03af")
        buf.write("\3\2\2\2\u03b1\u03b4\3\2\2\2\u03b2\u03b0\3\2\2\2\u03b2")
        buf.write("\u03b3\3\2\2\2\u03b3\u03b5\3\2\2\2\u03b4\u03b2\3\2\2\2")
        buf.write("\u03b5\u03b9\t\5\2\2\u03b6\u03b8\7&\2\2\u03b7\u03b6\3")
        buf.write("\2\2\2\u03b8\u03bb\3\2\2\2\u03b9\u03b7\3\2\2\2\u03b9\u03ba")
        buf.write("\3\2\2\2\u03ba\u03bc\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bc")
        buf.write("\u03dc\5\64\33\b\u03bd\u03c1\f\5\2\2\u03be\u03c0\7&\2")
        buf.write("\2\u03bf\u03be\3\2\2\2\u03c0\u03c3\3\2\2\2\u03c1\u03bf")
        buf.write("\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c4\3\2\2\2\u03c3")
        buf.write("\u03c1\3\2\2\2\u03c4\u03c8\7$\2\2\u03c5\u03c7\7&\2\2\u03c6")
        buf.write("\u03c5\3\2\2\2\u03c7\u03ca\3\2\2\2\u03c8\u03c6\3\2\2\2")
        buf.write("\u03c8\u03c9\3\2\2\2\u03c9\u03cb\3\2\2\2\u03ca\u03c8\3")
        buf.write("\2\2\2\u03cb\u03dc\5\64\33\6\u03cc\u03d0\f\4\2\2\u03cd")
        buf.write("\u03cf\7&\2\2\u03ce\u03cd\3\2\2\2\u03cf\u03d2\3\2\2\2")
        buf.write("\u03d0\u03ce\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d3\3")
        buf.write("\2\2\2\u03d2\u03d0\3\2\2\2\u03d3\u03d7\7%\2\2\u03d4\u03d6")
        buf.write("\7&\2\2\u03d5\u03d4\3\2\2\2\u03d6\u03d9\3\2\2\2\u03d7")
        buf.write("\u03d5\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03da\3\2\2\2")
        buf.write("\u03d9\u03d7\3\2\2\2\u03da\u03dc\5\64\33\5\u03db\u0390")
        buf.write("\3\2\2\2\u03db\u039f\3\2\2\2\u03db\u03ae\3\2\2\2\u03db")
        buf.write("\u03bd\3\2\2\2\u03db\u03cc\3\2\2\2\u03dc\u03df\3\2\2\2")
        buf.write("\u03dd\u03db\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\65\3\2")
        buf.write("\2\2\u03df\u03dd\3\2\2\2\u03e0\u03e4\5@!\2\u03e1\u03e4")
        buf.write("\5> \2\u03e2\u03e4\78\2\2\u03e3\u03e0\3\2\2\2\u03e3\u03e1")
        buf.write("\3\2\2\2\u03e3\u03e2\3\2\2\2\u03e4\67\3\2\2\2\u03e5\u03e6")
        buf.write("\t\6\2\2\u03e69\3\2\2\2\u03e7\u03ee\7\60\2\2\u03e8\u03ee")
        buf.write("\7\61\2\2\u03e9\u03ee\7\62\2\2\u03ea\u03ee\7\63\2\2\u03eb")
        buf.write("\u03ee\7/\2\2\u03ec\u03ee\5<\37\2\u03ed\u03e7\3\2\2\2")
        buf.write("\u03ed\u03e8\3\2\2\2\u03ed\u03e9\3\2\2\2\u03ed\u03ea\3")
        buf.write("\2\2\2\u03ed\u03eb\3\2\2\2\u03ed\u03ec\3\2\2\2\u03ee;")
        buf.write("\3\2\2\2\u03ef\u03f0\7.\2\2\u03f0\u03f1\7/\2\2\u03f1=")
        buf.write("\3\2\2\2\u03f2\u03f4\7\67\2\2\u03f3\u03f2\3\2\2\2\u03f4")
        buf.write("\u03f7\3\2\2\2\u03f5\u03f3\3\2\2\2\u03f5\u03f6\3\2\2\2")
        buf.write("\u03f6\u03f8\3\2\2\2\u03f7\u03f5\3\2\2\2\u03f8\u03fa\7")
        buf.write("\66\2\2\u03f9\u03f5\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa")
        buf.write("\u03fc\3\2\2\2\u03fb\u03fd\7\67\2\2\u03fc\u03fb\3\2\2")
        buf.write("\2\u03fd\u03fe\3\2\2\2\u03fe\u03fc\3\2\2\2\u03fe\u03ff")
        buf.write("\3\2\2\2\u03ff?\3\2\2\2\u0400\u0402\7\67\2\2\u0401\u0400")
        buf.write("\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u0401\3\2\2\2\u0403")
        buf.write("\u0404\3\2\2\2\u0404A\3\2\2\2\u0092ELPUY`diosx}\u008c")
        buf.write("\u008f\u0094\u009c\u00a3\u00a9\u00af\u00b5\u00bb\u00c1")
        buf.write("\u00c7\u00cd\u00d5\u00dd\u00e4\u00eb\u00f1\u00f6\u00fc")
        buf.write("\u0103\u0108\u010d\u0116\u011d\u0126\u012b\u0132\u0138")
        buf.write("\u013f\u0146\u014d\u0155\u015c\u0162\u0169\u0170\u0177")
        buf.write("\u017e\u0185\u018b\u0192\u0199\u01a0\u01a8\u01af\u01b5")
        buf.write("\u01bc\u01c4\u01cb\u01d2\u01d9\u01e0\u01e5\u01ec\u01f3")
        buf.write("\u01fa\u0201\u0207\u020e\u0215\u021c\u0223\u0228\u022d")
        buf.write("\u0232\u0239\u023f\u0246\u024e\u0255\u025b\u0262\u026a")
        buf.write("\u0271\u0278\u027f\u0286\u028d\u0294\u029c\u02a3\u02ac")
        buf.write("\u02b1\u02b8\u02be\u02c5\u02cd\u02d4\u02da\u02e1\u02e8")
        buf.write("\u02ef\u02f7\u02fe\u0304\u030b\u0313\u031a\u0320\u0327")
        buf.write("\u032e\u0335\u033d\u0344\u034a\u0351\u0358\u035f\u0369")
        buf.write("\u0370\u0379\u0381\u0389\u038e\u0394\u039b\u03a3\u03aa")
        buf.write("\u03b2\u03b9\u03c1\u03c8\u03d0\u03d7\u03db\u03dd\u03e3")
        buf.write("\u03ed\u03f5\u03f9\u03fe\u0403")
        return buf.getvalue()


class GraphlyParser ( Parser ):

    grammarFileName = "Graphly.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'loop'", "'start'", "'until'", 
                     "'step'", "'then'", "'end'", "'check'", "'else'", "'point'", 
                     "':'", "','", "'segment'", "'circle'", "'polygon'", 
                     "'['", "']'", "'group'", "'num'", "'iterator'", "'canvas'", 
                     "'draw'", "'fill'", "'move'", "'place'", "'rotate'", 
                     "'scale'", "'('", "')'", "'^'", "'_'", "'~'", "'!='", 
                     "'&'", "'|'", "<INVALID>", "'\r'", "<INVALID>", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'!'", "'='", "'>'", "'<'", 
                     "'>='", "'<='", "<INVALID>", "<INVALID>", "'.'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "WS", "CR", "COM_SIGN", "PLUS", "MINUS", "MULTIPLICATION", 
                      "DIVISION", "MODULO", "NEG", "EQ", "GREATER", "LOWER", 
                      "GT", "LT", "TYPE", "COLOR", "DOT", "DIGIT", "NAME" ]

    RULE_program = 0
    RULE_instruction = 1
    RULE_block = 2
    RULE_loop = 3
    RULE_check = 4
    RULE_condition_block = 5
    RULE_shape = 6
    RULE_point = 7
    RULE_segment = 8
    RULE_circle = 9
    RULE_polygon = 10
    RULE_groupMember = 11
    RULE_transformable = 12
    RULE_group = 13
    RULE_type_definition = 14
    RULE_num = 15
    RULE_iterator = 16
    RULE_canvas = 17
    RULE_draw = 18
    RULE_transformation = 19
    RULE_fill = 20
    RULE_move = 21
    RULE_place = 22
    RULE_rotate = 23
    RULE_scale = 24
    RULE_expr = 25
    RULE_atom = 26
    RULE_arithmetic = 27
    RULE_logic = 28
    RULE_neq = 29
    RULE_flt = 30
    RULE_itr = 31

    ruleNames =  [ "program", "instruction", "block", "loop", "check", "condition_block", 
                   "shape", "point", "segment", "circle", "polygon", "groupMember", 
                   "transformable", "group", "type_definition", "num", "iterator", 
                   "canvas", "draw", "transformation", "fill", "move", "place", 
                   "rotate", "scale", "expr", "atom", "arithmetic", "logic", 
                   "neq", "flt", "itr" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    WS=36
    CR=37
    COM_SIGN=38
    PLUS=39
    MINUS=40
    MULTIPLICATION=41
    DIVISION=42
    MODULO=43
    NEG=44
    EQ=45
    GREATER=46
    LOWER=47
    GT=48
    LT=49
    TYPE=50
    COLOR=51
    DOT=52
    DIGIT=53
    NAME=54

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def canvas(self):
            return self.getTypedRuleContext(GraphlyParser.CanvasContext,0)


        def EOF(self):
            return self.getToken(GraphlyParser.EOF, 0)

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def COM_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.COM_SIGN)
            else:
                return self.getToken(GraphlyParser.COM_SIGN, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = GraphlyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 87
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 67
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 64
                            self.match(GraphlyParser.T__0) 
                        self.state = 69
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                    self.state = 70
                    self.instruction()
                    self.state = 74
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==GraphlyParser.WS:
                        self.state = 71
                        self.match(GraphlyParser.WS)
                        self.state = 76
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 78
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==GraphlyParser.COM_SIGN:
                        self.state = 77
                        self.match(GraphlyParser.COM_SIGN)


                    self.state = 81 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 80
                            self.match(GraphlyParser.T__0)

                        else:
                            raise NoViableAltException(self)
                        self.state = 83 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
             
                self.state = 89
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 90
            self.canvas()
            self.state = 94
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 91
                self.match(GraphlyParser.WS)
                self.state = 96
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 98
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.COM_SIGN:
                self.state = 97
                self.match(GraphlyParser.COM_SIGN)


            self.state = 123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__0:
                self.state = 101 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 100
                        self.match(GraphlyParser.T__0)

                    else:
                        raise NoViableAltException(self)
                    self.state = 103 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 105
                self.instruction()
                self.state = 109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 106
                    self.match(GraphlyParser.WS)
                    self.state = 111
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GraphlyParser.COM_SIGN:
                    self.state = 112
                    self.match(GraphlyParser.COM_SIGN)


                self.state = 118
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 115
                        self.match(GraphlyParser.T__0) 
                    self.state = 120
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                self.state = 125
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 126
            self.match(GraphlyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shape(self):
            return self.getTypedRuleContext(GraphlyParser.ShapeContext,0)


        def type_definition(self):
            return self.getTypedRuleContext(GraphlyParser.Type_definitionContext,0)


        def draw(self):
            return self.getTypedRuleContext(GraphlyParser.DrawContext,0)


        def transformation(self):
            return self.getTypedRuleContext(GraphlyParser.TransformationContext,0)


        def group(self):
            return self.getTypedRuleContext(GraphlyParser.GroupContext,0)


        def loop(self):
            return self.getTypedRuleContext(GraphlyParser.LoopContext,0)


        def check(self):
            return self.getTypedRuleContext(GraphlyParser.CheckContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = GraphlyParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instruction)
        try:
            self.state = 141
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 128
                self.shape()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 129
                self.type_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 130
                self.draw()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 131
                self.transformation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 132
                self.group()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 133
                self.loop()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 134
                self.check()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 138
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 135
                        self.match(GraphlyParser.WS) 
                    self.state = 140
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = GraphlyParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 154
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 146
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 143
                            self.match(GraphlyParser.WS) 
                        self.state = 148
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                    self.state = 149
                    self.instruction()
                    self.state = 150
                    self.match(GraphlyParser.T__0) 
                self.state = 156
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.start = None # ExprContext
            self.until = None # ExprContext
            self.step = None # ExprContext

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop" ):
                listener.enterLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop" ):
                listener.exitLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = GraphlyParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 157
            self.match(GraphlyParser.T__1)
            self.state = 159 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 158
                self.match(GraphlyParser.WS)
                self.state = 161 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 163
            localctx.name = self.match(GraphlyParser.NAME)
            self.state = 165 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 164
                self.match(GraphlyParser.WS)
                self.state = 167 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 169
            self.match(GraphlyParser.T__2)
            self.state = 171 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 170
                self.match(GraphlyParser.WS)
                self.state = 173 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 175
            localctx.start = self.expr(0)
            self.state = 177 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 176
                self.match(GraphlyParser.WS)
                self.state = 179 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 181
            self.match(GraphlyParser.T__3)
            self.state = 183 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 182
                self.match(GraphlyParser.WS)
                self.state = 185 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 187
            localctx.until = self.expr(0)
            self.state = 189 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 188
                self.match(GraphlyParser.WS)
                self.state = 191 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 193
            self.match(GraphlyParser.T__4)
            self.state = 195 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 194
                self.match(GraphlyParser.WS)
                self.state = 197 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 199
            localctx.step = self.expr(0)
            self.state = 201 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 200
                self.match(GraphlyParser.WS)
                self.state = 203 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 205
            self.match(GraphlyParser.T__5)
            self.state = 206
            self.match(GraphlyParser.T__0)
            self.state = 207
            self.block()
            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 208
                self.match(GraphlyParser.WS)
                self.state = 213
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 214
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Condition_blockContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Condition_blockContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck" ):
                listener.enterCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck" ):
                listener.exitCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheck" ):
                return visitor.visitCheck(self)
            else:
                return visitor.visitChildren(self)




    def check(self):

        localctx = GraphlyParser.CheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 216
                self.match(GraphlyParser.WS)
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 222
            self.match(GraphlyParser.T__7)
            self.state = 224 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 223
                self.match(GraphlyParser.WS)
                self.state = 226 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 228
            self.condition_block()
            self.state = 244
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 229
                    self.match(GraphlyParser.T__8)
                    self.state = 231 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 230
                        self.match(GraphlyParser.WS)
                        self.state = 233 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 235
                    self.match(GraphlyParser.T__7)
                    self.state = 237 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 236
                        self.match(GraphlyParser.WS)
                        self.state = 239 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 241
                    self.condition_block() 
                self.state = 246
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 250
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 247
                    self.match(GraphlyParser.WS) 
                self.state = 252
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.T__8:
                self.state = 253
                self.match(GraphlyParser.T__8)
                self.state = 255 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 254
                    self.match(GraphlyParser.WS)
                    self.state = 257 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 259
                self.match(GraphlyParser.T__5)
                self.state = 260
                self.match(GraphlyParser.T__0)
                self.state = 261
                self.block()


            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 264
                self.match(GraphlyParser.WS)
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 270
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_condition_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_block" ):
                listener.enterCondition_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_block" ):
                listener.exitCondition_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition_block" ):
                return visitor.visitCondition_block(self)
            else:
                return visitor.visitChildren(self)




    def condition_block(self):

        localctx = GraphlyParser.Condition_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_condition_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.expr(0)
            self.state = 274 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 273
                self.match(GraphlyParser.WS)
                self.state = 276 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 278
            self.match(GraphlyParser.T__5)
            self.state = 279
            self.match(GraphlyParser.T__0)
            self.state = 283
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 280
                    self.match(GraphlyParser.WS) 
                self.state = 285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

            self.state = 286
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShapeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def point(self):
            return self.getTypedRuleContext(GraphlyParser.PointContext,0)


        def segment(self):
            return self.getTypedRuleContext(GraphlyParser.SegmentContext,0)


        def circle(self):
            return self.getTypedRuleContext(GraphlyParser.CircleContext,0)


        def polygon(self):
            return self.getTypedRuleContext(GraphlyParser.PolygonContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_shape

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape" ):
                listener.enterShape(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape" ):
                listener.exitShape(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShape" ):
                return visitor.visitShape(self)
            else:
                return visitor.visitChildren(self)




    def shape(self):

        localctx = GraphlyParser.ShapeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_shape)
        try:
            self.state = 292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 288
                self.point()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 289
                self.segment()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 290
                self.circle()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 291
                self.polygon()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_point

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoint" ):
                listener.enterPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoint" ):
                listener.exitPoint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPoint" ):
                return visitor.visitPoint(self)
            else:
                return visitor.visitChildren(self)




    def point(self):

        localctx = GraphlyParser.PointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_point)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 294
                self.match(GraphlyParser.WS)
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 300
            self.match(GraphlyParser.T__9)
            self.state = 302 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 301
                self.match(GraphlyParser.WS)
                self.state = 304 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 306
            self.match(GraphlyParser.NAME)
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 307
                self.match(GraphlyParser.WS)
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 313
            self.match(GraphlyParser.T__10)
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 314
                self.match(GraphlyParser.WS)
                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 320
            localctx.x = self.expr(0)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 321
                self.match(GraphlyParser.WS)
                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 327
            self.match(GraphlyParser.T__11)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 328
                self.match(GraphlyParser.WS)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 334
            localctx.y = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegment" ):
                listener.enterSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegment" ):
                listener.exitSegment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegment" ):
                return visitor.visitSegment(self)
            else:
                return visitor.visitChildren(self)




    def segment(self):

        localctx = GraphlyParser.SegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 336
                self.match(GraphlyParser.WS)
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 342
            self.match(GraphlyParser.T__12)
            self.state = 344 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 343
                self.match(GraphlyParser.WS)
                self.state = 346 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 348
            self.match(GraphlyParser.NAME)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 349
                self.match(GraphlyParser.WS)
                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 355
            self.match(GraphlyParser.T__10)
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 356
                self.match(GraphlyParser.WS)
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 362
            self.match(GraphlyParser.NAME)
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 363
                self.match(GraphlyParser.WS)
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 369
            self.match(GraphlyParser.T__11)
            self.state = 371 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 370
                self.match(GraphlyParser.WS)
                self.state = 373 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 375
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CircleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_circle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCircle" ):
                listener.enterCircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCircle" ):
                listener.exitCircle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCircle" ):
                return visitor.visitCircle(self)
            else:
                return visitor.visitChildren(self)




    def circle(self):

        localctx = GraphlyParser.CircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_circle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 377
                self.match(GraphlyParser.WS)
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 383
            self.match(GraphlyParser.T__13)
            self.state = 385 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 384
                self.match(GraphlyParser.WS)
                self.state = 387 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 389
            self.match(GraphlyParser.NAME)
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 390
                self.match(GraphlyParser.WS)
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 396
            self.match(GraphlyParser.T__10)
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 397
                self.match(GraphlyParser.WS)
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 403
            self.match(GraphlyParser.NAME)
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 404
                self.match(GraphlyParser.WS)
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 410
            self.match(GraphlyParser.T__11)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 411
                self.match(GraphlyParser.WS)
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 417
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolygonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_polygon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolygon" ):
                listener.enterPolygon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolygon" ):
                listener.exitPolygon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolygon" ):
                return visitor.visitPolygon(self)
            else:
                return visitor.visitChildren(self)




    def polygon(self):

        localctx = GraphlyParser.PolygonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_polygon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 419
                self.match(GraphlyParser.WS)
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 425
            self.match(GraphlyParser.T__14)
            self.state = 427 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 426
                self.match(GraphlyParser.WS)
                self.state = 429 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 431
            self.match(GraphlyParser.NAME)
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 432
                self.match(GraphlyParser.WS)
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 438
            self.match(GraphlyParser.T__10)
            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 439
                self.match(GraphlyParser.WS)
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 445
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_groupMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupMember" ):
                listener.enterGroupMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupMember" ):
                listener.exitGroupMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupMember" ):
                return visitor.visitGroupMember(self)
            else:
                return visitor.visitChildren(self)




    def groupMember(self):

        localctx = GraphlyParser.GroupMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_groupMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 447
                self.match(GraphlyParser.WS)
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 453
            self.match(GraphlyParser.NAME)
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 454
                self.match(GraphlyParser.WS)
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 460
            self.match(GraphlyParser.T__15)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 461
                self.match(GraphlyParser.WS)
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 467
            self.expr(0)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 468
                self.match(GraphlyParser.WS)
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 474
            self.match(GraphlyParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def groupMember(self):
            return self.getTypedRuleContext(GraphlyParser.GroupMemberContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformable" ):
                listener.enterTransformable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformable" ):
                listener.exitTransformable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformable" ):
                return visitor.visitTransformable(self)
            else:
                return visitor.visitChildren(self)




    def transformable(self):

        localctx = GraphlyParser.TransformableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_transformable)
        try:
            self.state = 478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.match(GraphlyParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 477
                self.groupMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)

        def TYPE(self):
            return self.getToken(GraphlyParser.TYPE, 0)

        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = GraphlyParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 480
                self.match(GraphlyParser.WS)
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 486
            self.match(GraphlyParser.T__17)
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 487
                self.match(GraphlyParser.WS)
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 493
            self.match(GraphlyParser.LOWER)
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 494
                self.match(GraphlyParser.WS)
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 500
            self.match(GraphlyParser.TYPE)
            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 501
                self.match(GraphlyParser.WS)
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 507
            self.match(GraphlyParser.GREATER)
            self.state = 509 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 508
                self.match(GraphlyParser.WS)
                self.state = 511 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 513
            self.match(GraphlyParser.NAME)
            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 514
                self.match(GraphlyParser.WS)
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 520
            self.match(GraphlyParser.T__10)
            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 521
                self.match(GraphlyParser.WS)
                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 527
            self.match(GraphlyParser.NAME)
            self.state = 531
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 528
                    self.match(GraphlyParser.WS) 
                self.state = 533
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__11:
                self.state = 534
                self.match(GraphlyParser.T__11)
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 535
                    self.match(GraphlyParser.WS)
                    self.state = 540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 541
                self.match(GraphlyParser.NAME)
                self.state = 545
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 542
                        self.match(GraphlyParser.WS) 
                    self.state = 547
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num(self):
            return self.getTypedRuleContext(GraphlyParser.NumContext,0)


        def iterator(self):
            return self.getTypedRuleContext(GraphlyParser.IteratorContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_definition" ):
                listener.enterType_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_definition" ):
                listener.exitType_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_definition" ):
                return visitor.visitType_definition(self)
            else:
                return visitor.visitChildren(self)




    def type_definition(self):

        localctx = GraphlyParser.Type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_type_definition)
        try:
            self.state = 555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 553
                self.num()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 554
                self.iterator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_num

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum" ):
                listener.enterNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum" ):
                listener.exitNum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum" ):
                return visitor.visitNum(self)
            else:
                return visitor.visitChildren(self)




    def num(self):

        localctx = GraphlyParser.NumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_num)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 557
                self.match(GraphlyParser.WS)
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 563
            self.match(GraphlyParser.T__18)
            self.state = 565 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 564
                self.match(GraphlyParser.WS)
                self.state = 567 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 569
            self.match(GraphlyParser.NAME)
            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 570
                self.match(GraphlyParser.WS)
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 576
            self.match(GraphlyParser.T__10)
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 577
                self.match(GraphlyParser.WS)
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 583
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterator" ):
                listener.enterIterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterator" ):
                listener.exitIterator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterator" ):
                return visitor.visitIterator(self)
            else:
                return visitor.visitChildren(self)




    def iterator(self):

        localctx = GraphlyParser.IteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 585
                self.match(GraphlyParser.WS)
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 591
            self.match(GraphlyParser.T__19)
            self.state = 593 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 592
                self.match(GraphlyParser.WS)
                self.state = 595 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 597
            self.match(GraphlyParser.NAME)
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 598
                self.match(GraphlyParser.WS)
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 604
            self.match(GraphlyParser.T__10)
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 605
                self.match(GraphlyParser.WS)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 611
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CanvasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_canvas

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCanvas" ):
                listener.enterCanvas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCanvas" ):
                listener.exitCanvas(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCanvas" ):
                return visitor.visitCanvas(self)
            else:
                return visitor.visitChildren(self)




    def canvas(self):

        localctx = GraphlyParser.CanvasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_canvas)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 613
                self.match(GraphlyParser.WS)
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 619
            self.match(GraphlyParser.T__20)
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 620
                self.match(GraphlyParser.WS)
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 626
            self.match(GraphlyParser.T__10)
            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 627
                self.match(GraphlyParser.WS)
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 633
            localctx.x = self.expr(0)
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 634
                self.match(GraphlyParser.WS)
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 640
            self.match(GraphlyParser.T__11)
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 641
                self.match(GraphlyParser.WS)
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 647
            localctx.y = self.expr(0)
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 648
                self.match(GraphlyParser.WS)
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 654
            self.match(GraphlyParser.T__11)
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 655
                self.match(GraphlyParser.WS)
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 661
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DrawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_draw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDraw" ):
                listener.enterDraw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDraw" ):
                listener.exitDraw(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDraw" ):
                return visitor.visitDraw(self)
            else:
                return visitor.visitChildren(self)




    def draw(self):

        localctx = GraphlyParser.DrawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_draw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 663
                self.match(GraphlyParser.WS)
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 669
            self.match(GraphlyParser.T__21)
            self.state = 671 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 670
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 673 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 675
            localctx.arg = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fill(self):
            return self.getTypedRuleContext(GraphlyParser.FillContext,0)


        def move(self):
            return self.getTypedRuleContext(GraphlyParser.MoveContext,0)


        def place(self):
            return self.getTypedRuleContext(GraphlyParser.PlaceContext,0)


        def rotate(self):
            return self.getTypedRuleContext(GraphlyParser.RotateContext,0)


        def scale(self):
            return self.getTypedRuleContext(GraphlyParser.ScaleContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformation" ):
                listener.enterTransformation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformation" ):
                listener.exitTransformation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformation" ):
                return visitor.visitTransformation(self)
            else:
                return visitor.visitChildren(self)




    def transformation(self):

        localctx = GraphlyParser.TransformationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_transformation)
        try:
            self.state = 682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 677
                self.fill()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 678
                self.move()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 679
                self.place()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 680
                self.rotate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 681
                self.scale()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FillContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_fill

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFill" ):
                listener.enterFill(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFill" ):
                listener.exitFill(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFill" ):
                return visitor.visitFill(self)
            else:
                return visitor.visitChildren(self)




    def fill(self):

        localctx = GraphlyParser.FillContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fill)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 684
                self.match(GraphlyParser.WS)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 690
            self.match(GraphlyParser.T__22)
            self.state = 692 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 691
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 694 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

            self.state = 696
            localctx.arg = self.transformable()
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 697
                self.match(GraphlyParser.WS)
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 703
            self.match(GraphlyParser.T__10)
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 704
                self.match(GraphlyParser.WS)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 710
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext
            self.dx = None # ExprContext
            self.dy = None # ExprContext

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMove" ):
                return visitor.visitMove(self)
            else:
                return visitor.visitChildren(self)




    def move(self):

        localctx = GraphlyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 712
                self.match(GraphlyParser.WS)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 718
            self.match(GraphlyParser.T__23)
            self.state = 720 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 719
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 722 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

            self.state = 724
            localctx.arg = self.transformable()
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 725
                self.match(GraphlyParser.WS)
                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 731
            self.match(GraphlyParser.T__10)
            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 732
                self.match(GraphlyParser.WS)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 738
            localctx.dx = self.expr(0)
            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 739
                self.match(GraphlyParser.WS)
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 745
            self.match(GraphlyParser.T__11)
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 746
                self.match(GraphlyParser.WS)
                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 752
            localctx.dy = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_place

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlace" ):
                listener.enterPlace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlace" ):
                listener.exitPlace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = GraphlyParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_place)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 754
                self.match(GraphlyParser.WS)
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 760
            self.match(GraphlyParser.T__24)
            self.state = 762 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 761
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 764 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

            self.state = 766
            localctx.arg1 = self.transformable()
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 767
                self.match(GraphlyParser.WS)
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 773
            self.match(GraphlyParser.T__10)
            self.state = 777
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 774
                    self.match(GraphlyParser.WS) 
                self.state = 779
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

            self.state = 780
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RotateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.angle = None # ExprContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_rotate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRotate" ):
                listener.enterRotate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRotate" ):
                listener.exitRotate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRotate" ):
                return visitor.visitRotate(self)
            else:
                return visitor.visitChildren(self)




    def rotate(self):

        localctx = GraphlyParser.RotateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_rotate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 782
                self.match(GraphlyParser.WS)
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 788
            self.match(GraphlyParser.T__25)
            self.state = 790 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 789
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 792 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 794
            localctx.arg1 = self.transformable()
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 795
                self.match(GraphlyParser.WS)
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 801
            self.match(GraphlyParser.T__10)
            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 802
                self.match(GraphlyParser.WS)
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 808
            localctx.angle = self.expr(0)
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 809
                self.match(GraphlyParser.WS)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 815
            self.match(GraphlyParser.T__11)
            self.state = 819
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 816
                    self.match(GraphlyParser.WS) 
                self.state = 821
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

            self.state = 822
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.k = None # ExprContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScale" ):
                listener.enterScale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScale" ):
                listener.exitScale(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScale" ):
                return visitor.visitScale(self)
            else:
                return visitor.visitChildren(self)




    def scale(self):

        localctx = GraphlyParser.ScaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_scale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 824
                self.match(GraphlyParser.WS)
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 830
            self.match(GraphlyParser.T__26)
            self.state = 832 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 831
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 834 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

            self.state = 836
            localctx.arg1 = self.transformable()
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 837
                self.match(GraphlyParser.WS)
                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 843
            self.match(GraphlyParser.T__10)
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 844
                self.match(GraphlyParser.WS)
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 850
            localctx.k = self.expr(0)
            self.state = 854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 851
                self.match(GraphlyParser.WS)
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 857
            self.match(GraphlyParser.T__11)
            self.state = 861
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 858
                    self.match(GraphlyParser.WS) 
                self.state = 863
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

            self.state = 864
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MinusOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)
        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinusOpExpr" ):
                listener.enterMinusOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinusOpExpr" ):
                listener.exitMinusOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinusOpExpr" ):
                return visitor.visitMinusOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class RoundingOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoundingOpExpr" ):
                listener.enterRoundingOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoundingOpExpr" ):
                listener.exitRoundingOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoundingOpExpr" ):
                return visitor.visitRoundingOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class BooleanOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def LT(self):
            return self.getToken(GraphlyParser.LT, 0)
        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)
        def GT(self):
            return self.getToken(GraphlyParser.GT, 0)
        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)
        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOpExpr" ):
                listener.enterBooleanOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOpExpr" ):
                listener.exitBooleanOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOpExpr" ):
                return visitor.visitBooleanOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def MULTIPLICATION(self):
            return self.getToken(GraphlyParser.MULTIPLICATION, 0)
        def DIVISION(self):
            return self.getToken(GraphlyParser.DIVISION, 0)
        def MODULO(self):
            return self.getToken(GraphlyParser.MODULO, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)
        def PLUS(self):
            return self.getToken(GraphlyParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOpExpr" ):
                listener.enterArithmeticOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOpExpr" ):
                listener.exitArithmeticOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOpExpr" ):
                return visitor.visitArithmeticOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class NegationOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEG(self):
            return self.getToken(GraphlyParser.NEG, 0)
        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegationOpExpr" ):
                listener.enterNegationOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegationOpExpr" ):
                listener.exitNegationOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNegationOpExpr" ):
                return visitor.visitNegationOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class AtomExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(GraphlyParser.AtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomExpr" ):
                listener.enterAtomExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomExpr" ):
                listener.exitAtomExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomExpr" ):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpr" ):
                listener.enterParenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpr" ):
                listener.exitParenExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpr" ):
                return visitor.visitParenExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GraphlyParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.T__27]:
                localctx = GraphlyParser.ParenExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 867
                self.match(GraphlyParser.T__27)
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 868
                    self.match(GraphlyParser.WS)
                    self.state = 873
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 874
                self.expr(0)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 875
                    self.match(GraphlyParser.WS)
                    self.state = 880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 881
                self.match(GraphlyParser.T__28)
                pass
            elif token in [GraphlyParser.T__29, GraphlyParser.T__30, GraphlyParser.T__31]:
                localctx = GraphlyParser.RoundingOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 883
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__29) | (1 << GraphlyParser.T__30) | (1 << GraphlyParser.T__31))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 884
                    self.match(GraphlyParser.WS)
                    self.state = 889
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 890
                self.expr(9)
                pass
            elif token in [GraphlyParser.MINUS]:
                localctx = GraphlyParser.MinusOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 891
                self.match(GraphlyParser.MINUS)
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 892
                    self.match(GraphlyParser.WS)
                    self.state = 897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 898
                self.expr(8)
                pass
            elif token in [GraphlyParser.NEG]:
                localctx = GraphlyParser.NegationOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 899
                self.match(GraphlyParser.NEG)
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 900
                    self.match(GraphlyParser.WS)
                    self.state = 905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 906
                self.expr(4)
                pass
            elif token in [GraphlyParser.DOT, GraphlyParser.DIGIT, GraphlyParser.NAME]:
                localctx = GraphlyParser.AtomExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 907
                self.atom()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 987
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 985
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                    if la_ == 1:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 910
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 914
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 911
                            self.match(GraphlyParser.WS)
                            self.state = 916
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 917
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 921
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 918
                            self.match(GraphlyParser.WS)
                            self.state = 923
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 924
                        localctx.right = self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 925
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 929
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 926
                            self.match(GraphlyParser.WS)
                            self.state = 931
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 932
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==GraphlyParser.PLUS or _la==GraphlyParser.MINUS):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 936
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 933
                            self.match(GraphlyParser.WS)
                            self.state = 938
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 939
                        localctx.right = self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 940
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 944
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 941
                            self.match(GraphlyParser.WS)
                            self.state = 946
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 947
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__32) | (1 << GraphlyParser.EQ) | (1 << GraphlyParser.GREATER) | (1 << GraphlyParser.LOWER) | (1 << GraphlyParser.GT) | (1 << GraphlyParser.LT))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 951
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 948
                            self.match(GraphlyParser.WS)
                            self.state = 953
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 954
                        localctx.right = self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 955
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 959
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 956
                            self.match(GraphlyParser.WS)
                            self.state = 961
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 962
                        localctx.op = self.match(GraphlyParser.T__33)
                        self.state = 966
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 963
                            self.match(GraphlyParser.WS)
                            self.state = 968
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 969
                        localctx.right = self.expr(4)
                        pass

                    elif la_ == 5:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 970
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 974
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 971
                            self.match(GraphlyParser.WS)
                            self.state = 976
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 977
                        localctx.op = self.match(GraphlyParser.T__34)
                        self.state = 981
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 978
                            self.match(GraphlyParser.WS)
                            self.state = 983
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 984
                        localctx.right = self.expr(3)
                        pass

             
                self.state = 989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_atom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class VarAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarAtom" ):
                listener.enterVarAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarAtom" ):
                listener.exitVarAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarAtom" ):
                return visitor.visitVarAtom(self)
            else:
                return visitor.visitChildren(self)


    class IntAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def itr(self):
            return self.getTypedRuleContext(GraphlyParser.ItrContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntAtom" ):
                listener.enterIntAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntAtom" ):
                listener.exitIntAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntAtom" ):
                return visitor.visitIntAtom(self)
            else:
                return visitor.visitChildren(self)


    class FltAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def flt(self):
            return self.getTypedRuleContext(GraphlyParser.FltContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFltAtom" ):
                listener.enterFltAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFltAtom" ):
                listener.exitFltAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFltAtom" ):
                return visitor.visitFltAtom(self)
            else:
                return visitor.visitChildren(self)



    def atom(self):

        localctx = GraphlyParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_atom)
        try:
            self.state = 993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.IntAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 990
                self.itr()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.FltAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                self.flt()
                pass

            elif la_ == 3:
                localctx = GraphlyParser.VarAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 992
                self.match(GraphlyParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(GraphlyParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)

        def MULTIPLICATION(self):
            return self.getToken(GraphlyParser.MULTIPLICATION, 0)

        def DIVISION(self):
            return self.getToken(GraphlyParser.DIVISION, 0)

        def MODULO(self):
            return self.getToken(GraphlyParser.MODULO, 0)

        def getRuleIndex(self):
            return GraphlyParser.RULE_arithmetic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic" ):
                listener.enterArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic" ):
                listener.exitArithmetic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmetic" ):
                return visitor.visitArithmetic(self)
            else:
                return visitor.visitChildren(self)




    def arithmetic(self):

        localctx = GraphlyParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_arithmetic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.PLUS) | (1 << GraphlyParser.MINUS) | (1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)

        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)

        def GT(self):
            return self.getToken(GraphlyParser.GT, 0)

        def LT(self):
            return self.getToken(GraphlyParser.LT, 0)

        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)

        def neq(self):
            return self.getTypedRuleContext(GraphlyParser.NeqContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_logic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic" ):
                listener.enterLogic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic" ):
                listener.exitLogic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogic" ):
                return visitor.visitLogic(self)
            else:
                return visitor.visitChildren(self)




    def logic(self):

        localctx = GraphlyParser.LogicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_logic)
        try:
            self.state = 1003
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.GREATER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 997
                self.match(GraphlyParser.GREATER)
                pass
            elif token in [GraphlyParser.LOWER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 998
                self.match(GraphlyParser.LOWER)
                pass
            elif token in [GraphlyParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 999
                self.match(GraphlyParser.GT)
                pass
            elif token in [GraphlyParser.LT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1000
                self.match(GraphlyParser.LT)
                pass
            elif token in [GraphlyParser.EQ]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1001
                self.match(GraphlyParser.EQ)
                pass
            elif token in [GraphlyParser.NEG]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1002
                self.neq()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEG(self):
            return self.getToken(GraphlyParser.NEG, 0)

        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)

        def getRuleIndex(self):
            return GraphlyParser.RULE_neq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNeq" ):
                listener.enterNeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNeq" ):
                listener.exitNeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNeq" ):
                return visitor.visitNeq(self)
            else:
                return visitor.visitChildren(self)




    def neq(self):

        localctx = GraphlyParser.NeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_neq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(GraphlyParser.NEG)
            self.state = 1006
            self.match(GraphlyParser.EQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FltContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(GraphlyParser.DOT, 0)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.DIGIT)
            else:
                return self.getToken(GraphlyParser.DIGIT, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_flt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlt" ):
                listener.enterFlt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlt" ):
                listener.exitFlt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlt" ):
                return visitor.visitFlt(self)
            else:
                return visitor.visitChildren(self)




    def flt(self):

        localctx = GraphlyParser.FltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_flt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.DIGIT:
                    self.state = 1008
                    self.match(GraphlyParser.DIGIT)
                    self.state = 1013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1014
                self.match(GraphlyParser.DOT)


            self.state = 1018 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1017
                    self.match(GraphlyParser.DIGIT)

                else:
                    raise NoViableAltException(self)
                self.state = 1020 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.DIGIT)
            else:
                return self.getToken(GraphlyParser.DIGIT, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_itr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItr" ):
                listener.enterItr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItr" ):
                listener.exitItr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItr" ):
                return visitor.visitItr(self)
            else:
                return visitor.visitChildren(self)




    def itr(self):

        localctx = GraphlyParser.ItrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_itr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1022
                    self.match(GraphlyParser.DIGIT)

                else:
                    raise NoViableAltException(self)
                self.state = 1025 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[25] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         




