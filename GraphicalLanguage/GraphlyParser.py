# Generated from Graphly.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\39")
        buf.write("\u0443\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\3\2\7\2F\n\2\f\2\16\2I")
        buf.write("\13\2\3\2\3\2\7\2M\n\2\f\2\16\2P\13\2\3\2\5\2S\n\2\3\2")
        buf.write("\6\2V\n\2\r\2\16\2W\7\2Z\n\2\f\2\16\2]\13\2\3\2\3\2\7")
        buf.write("\2a\n\2\f\2\16\2d\13\2\3\2\5\2g\n\2\3\2\6\2j\n\2\r\2\16")
        buf.write("\2k\3\2\3\2\7\2p\n\2\f\2\16\2s\13\2\3\2\5\2v\n\2\3\2\7")
        buf.write("\2y\n\2\f\2\16\2|\13\2\7\2~\n\2\f\2\16\2\u0081\13\2\3")
        buf.write("\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\7\3\u008e\n")
        buf.write("\3\f\3\16\3\u0091\13\3\5\3\u0093\n\3\3\4\7\4\u0096\n\4")
        buf.write("\f\4\16\4\u0099\13\4\3\4\3\4\3\4\7\4\u009e\n\4\f\4\16")
        buf.write("\4\u00a1\13\4\3\5\3\5\6\5\u00a5\n\5\r\5\16\5\u00a6\3\5")
        buf.write("\3\5\6\5\u00ab\n\5\r\5\16\5\u00ac\3\5\3\5\6\5\u00b1\n")
        buf.write("\5\r\5\16\5\u00b2\3\5\3\5\6\5\u00b7\n\5\r\5\16\5\u00b8")
        buf.write("\3\5\3\5\6\5\u00bd\n\5\r\5\16\5\u00be\3\5\3\5\6\5\u00c3")
        buf.write("\n\5\r\5\16\5\u00c4\3\5\3\5\6\5\u00c9\n\5\r\5\16\5\u00ca")
        buf.write("\3\5\3\5\6\5\u00cf\n\5\r\5\16\5\u00d0\3\5\3\5\3\5\3\5")
        buf.write("\7\5\u00d7\n\5\f\5\16\5\u00da\13\5\3\5\3\5\3\6\7\6\u00df")
        buf.write("\n\6\f\6\16\6\u00e2\13\6\3\6\3\6\6\6\u00e6\n\6\r\6\16")
        buf.write("\6\u00e7\3\6\3\6\3\6\6\6\u00ed\n\6\r\6\16\6\u00ee\3\6")
        buf.write("\3\6\6\6\u00f3\n\6\r\6\16\6\u00f4\3\6\7\6\u00f8\n\6\f")
        buf.write("\6\16\6\u00fb\13\6\3\6\7\6\u00fe\n\6\f\6\16\6\u0101\13")
        buf.write("\6\3\6\3\6\6\6\u0105\n\6\r\6\16\6\u0106\3\6\3\6\3\6\5")
        buf.write("\6\u010c\n\6\3\6\7\6\u010f\n\6\f\6\16\6\u0112\13\6\3\6")
        buf.write("\3\6\3\7\3\7\6\7\u0118\n\7\r\7\16\7\u0119\3\7\3\7\3\7")
        buf.write("\7\7\u011f\n\7\f\7\16\7\u0122\13\7\3\7\3\7\3\b\3\b\3\b")
        buf.write("\3\b\5\b\u012a\n\b\3\t\7\t\u012d\n\t\f\t\16\t\u0130\13")
        buf.write("\t\3\t\3\t\6\t\u0134\n\t\r\t\16\t\u0135\3\t\3\t\7\t\u013a")
        buf.write("\n\t\f\t\16\t\u013d\13\t\3\t\3\t\7\t\u0141\n\t\f\t\16")
        buf.write("\t\u0144\13\t\3\t\3\t\7\t\u0148\n\t\f\t\16\t\u014b\13")
        buf.write("\t\3\t\3\t\7\t\u014f\n\t\f\t\16\t\u0152\13\t\3\t\3\t\3")
        buf.write("\n\7\n\u0157\n\n\f\n\16\n\u015a\13\n\3\n\3\n\6\n\u015e")
        buf.write("\n\n\r\n\16\n\u015f\3\n\3\n\7\n\u0164\n\n\f\n\16\n\u0167")
        buf.write("\13\n\3\n\3\n\7\n\u016b\n\n\f\n\16\n\u016e\13\n\3\n\3")
        buf.write("\n\7\n\u0172\n\n\f\n\16\n\u0175\13\n\3\n\3\n\6\n\u0179")
        buf.write("\n\n\r\n\16\n\u017a\3\n\3\n\3\13\7\13\u0180\n\13\f\13")
        buf.write("\16\13\u0183\13\13\3\13\3\13\6\13\u0187\n\13\r\13\16\13")
        buf.write("\u0188\3\13\3\13\7\13\u018d\n\13\f\13\16\13\u0190\13\13")
        buf.write("\3\13\3\13\7\13\u0194\n\13\f\13\16\13\u0197\13\13\3\13")
        buf.write("\3\13\7\13\u019b\n\13\f\13\16\13\u019e\13\13\3\13\3\13")
        buf.write("\7\13\u01a2\n\13\f\13\16\13\u01a5\13\13\3\13\3\13\3\f")
        buf.write("\7\f\u01aa\n\f\f\f\16\f\u01ad\13\f\3\f\3\f\6\f\u01b1\n")
        buf.write("\f\r\f\16\f\u01b2\3\f\3\f\7\f\u01b7\n\f\f\f\16\f\u01ba")
        buf.write("\13\f\3\f\3\f\7\f\u01be\n\f\f\f\16\f\u01c1\13\f\3\f\3")
        buf.write("\f\3\r\7\r\u01c6\n\r\f\r\16\r\u01c9\13\r\3\r\3\r\7\r\u01cd")
        buf.write("\n\r\f\r\16\r\u01d0\13\r\3\r\3\r\7\r\u01d4\n\r\f\r\16")
        buf.write("\r\u01d7\13\r\3\r\3\r\7\r\u01db\n\r\f\r\16\r\u01de\13")
        buf.write("\r\3\r\3\r\3\16\3\16\5\16\u01e4\n\16\3\17\7\17\u01e7\n")
        buf.write("\17\f\17\16\17\u01ea\13\17\3\17\3\17\7\17\u01ee\n\17\f")
        buf.write("\17\16\17\u01f1\13\17\3\17\3\17\7\17\u01f5\n\17\f\17\16")
        buf.write("\17\u01f8\13\17\3\17\3\17\7\17\u01fc\n\17\f\17\16\17\u01ff")
        buf.write("\13\17\3\17\3\17\6\17\u0203\n\17\r\17\16\17\u0204\3\17")
        buf.write("\3\17\7\17\u0209\n\17\f\17\16\17\u020c\13\17\3\17\3\17")
        buf.write("\7\17\u0210\n\17\f\17\16\17\u0213\13\17\3\17\3\17\7\17")
        buf.write("\u0217\n\17\f\17\16\17\u021a\13\17\3\17\3\17\7\17\u021e")
        buf.write("\n\17\f\17\16\17\u0221\13\17\3\17\3\17\7\17\u0225\n\17")
        buf.write("\f\17\16\17\u0228\13\17\7\17\u022a\n\17\f\17\16\17\u022d")
        buf.write("\13\17\3\20\3\20\5\20\u0231\n\20\3\21\7\21\u0234\n\21")
        buf.write("\f\21\16\21\u0237\13\21\3\21\3\21\6\21\u023b\n\21\r\21")
        buf.write("\16\21\u023c\3\21\3\21\7\21\u0241\n\21\f\21\16\21\u0244")
        buf.write("\13\21\3\21\3\21\7\21\u0248\n\21\f\21\16\21\u024b\13\21")
        buf.write("\3\21\3\21\3\22\7\22\u0250\n\22\f\22\16\22\u0253\13\22")
        buf.write("\3\22\3\22\6\22\u0257\n\22\r\22\16\22\u0258\3\22\3\22")
        buf.write("\7\22\u025d\n\22\f\22\16\22\u0260\13\22\3\22\3\22\7\22")
        buf.write("\u0264\n\22\f\22\16\22\u0267\13\22\3\22\3\22\3\23\7\23")
        buf.write("\u026c\n\23\f\23\16\23\u026f\13\23\3\23\3\23\7\23\u0273")
        buf.write("\n\23\f\23\16\23\u0276\13\23\3\23\3\23\7\23\u027a\n\23")
        buf.write("\f\23\16\23\u027d\13\23\3\23\3\23\7\23\u0281\n\23\f\23")
        buf.write("\16\23\u0284\13\23\3\23\3\23\7\23\u0288\n\23\f\23\16\23")
        buf.write("\u028b\13\23\3\23\3\23\7\23\u028f\n\23\f\23\16\23\u0292")
        buf.write("\13\23\3\23\3\23\7\23\u0296\n\23\f\23\16\23\u0299\13\23")
        buf.write("\3\23\3\23\3\24\7\24\u029e\n\24\f\24\16\24\u02a1\13\24")
        buf.write("\3\24\3\24\6\24\u02a5\n\24\r\24\16\24\u02a6\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\25\3\25\5\25\u02b0\n\25\3\26\7\26\u02b3")
        buf.write("\n\26\f\26\16\26\u02b6\13\26\3\26\3\26\6\26\u02ba\n\26")
        buf.write("\r\26\16\26\u02bb\3\26\3\26\7\26\u02c0\n\26\f\26\16\26")
        buf.write("\u02c3\13\26\3\26\3\26\7\26\u02c7\n\26\f\26\16\26\u02ca")
        buf.write("\13\26\3\26\3\26\3\27\7\27\u02cf\n\27\f\27\16\27\u02d2")
        buf.write("\13\27\3\27\3\27\6\27\u02d6\n\27\r\27\16\27\u02d7\3\27")
        buf.write("\3\27\7\27\u02dc\n\27\f\27\16\27\u02df\13\27\3\27\3\27")
        buf.write("\7\27\u02e3\n\27\f\27\16\27\u02e6\13\27\3\27\3\27\7\27")
        buf.write("\u02ea\n\27\f\27\16\27\u02ed\13\27\3\27\3\27\7\27\u02f1")
        buf.write("\n\27\f\27\16\27\u02f4\13\27\3\27\3\27\3\30\7\30\u02f9")
        buf.write("\n\30\f\30\16\30\u02fc\13\30\3\30\3\30\6\30\u0300\n\30")
        buf.write("\r\30\16\30\u0301\3\30\3\30\7\30\u0306\n\30\f\30\16\30")
        buf.write("\u0309\13\30\3\30\3\30\7\30\u030d\n\30\f\30\16\30\u0310")
        buf.write("\13\30\3\30\3\30\3\31\7\31\u0315\n\31\f\31\16\31\u0318")
        buf.write("\13\31\3\31\3\31\6\31\u031c\n\31\r\31\16\31\u031d\3\31")
        buf.write("\3\31\7\31\u0322\n\31\f\31\16\31\u0325\13\31\3\31\3\31")
        buf.write("\7\31\u0329\n\31\f\31\16\31\u032c\13\31\3\31\3\31\7\31")
        buf.write("\u0330\n\31\f\31\16\31\u0333\13\31\3\31\3\31\7\31\u0337")
        buf.write("\n\31\f\31\16\31\u033a\13\31\3\31\3\31\3\32\7\32\u033f")
        buf.write("\n\32\f\32\16\32\u0342\13\32\3\32\3\32\6\32\u0346\n\32")
        buf.write("\r\32\16\32\u0347\3\32\3\32\7\32\u034c\n\32\f\32\16\32")
        buf.write("\u034f\13\32\3\32\3\32\7\32\u0353\n\32\f\32\16\32\u0356")
        buf.write("\13\32\3\32\3\32\7\32\u035a\n\32\f\32\16\32\u035d\13\32")
        buf.write("\3\32\3\32\7\32\u0361\n\32\f\32\16\32\u0364\13\32\3\32")
        buf.write("\3\32\3\33\7\33\u0369\n\33\f\33\16\33\u036c\13\33\3\33")
        buf.write("\3\33\6\33\u0370\n\33\r\33\16\33\u0371\3\33\3\33\7\33")
        buf.write("\u0376\n\33\f\33\16\33\u0379\13\33\3\33\3\33\7\33\u037d")
        buf.write("\n\33\f\33\16\33\u0380\13\33\3\33\3\33\3\33\7\33\u0385")
        buf.write("\n\33\f\33\16\33\u0388\13\33\3\33\3\33\6\33\u038c\n\33")
        buf.write("\r\33\16\33\u038d\3\33\3\33\7\33\u0392\n\33\f\33\16\33")
        buf.write("\u0395\13\33\3\33\3\33\7\33\u0399\n\33\f\33\16\33\u039c")
        buf.write("\13\33\3\33\3\33\5\33\u03a0\n\33\3\34\3\34\3\34\7\34\u03a5")
        buf.write("\n\34\f\34\16\34\u03a8\13\34\3\34\3\34\7\34\u03ac\n\34")
        buf.write("\f\34\16\34\u03af\13\34\3\34\3\34\3\34\3\34\7\34\u03b5")
        buf.write("\n\34\f\34\16\34\u03b8\13\34\3\34\3\34\3\34\7\34\u03bd")
        buf.write("\n\34\f\34\16\34\u03c0\13\34\3\34\3\34\3\34\7\34\u03c5")
        buf.write("\n\34\f\34\16\34\u03c8\13\34\3\34\3\34\5\34\u03cc\n\34")
        buf.write("\3\34\3\34\7\34\u03d0\n\34\f\34\16\34\u03d3\13\34\3\34")
        buf.write("\3\34\7\34\u03d7\n\34\f\34\16\34\u03da\13\34\3\34\3\34")
        buf.write("\3\34\7\34\u03df\n\34\f\34\16\34\u03e2\13\34\3\34\3\34")
        buf.write("\7\34\u03e6\n\34\f\34\16\34\u03e9\13\34\3\34\3\34\3\34")
        buf.write("\7\34\u03ee\n\34\f\34\16\34\u03f1\13\34\3\34\3\34\7\34")
        buf.write("\u03f5\n\34\f\34\16\34\u03f8\13\34\3\34\3\34\3\34\7\34")
        buf.write("\u03fd\n\34\f\34\16\34\u0400\13\34\3\34\3\34\7\34\u0404")
        buf.write("\n\34\f\34\16\34\u0407\13\34\3\34\3\34\3\34\7\34\u040c")
        buf.write("\n\34\f\34\16\34\u040f\13\34\3\34\3\34\7\34\u0413\n\34")
        buf.write("\f\34\16\34\u0416\13\34\3\34\7\34\u0419\n\34\f\34\16\34")
        buf.write("\u041c\13\34\3\35\3\35\3\35\5\35\u0421\n\35\3\36\3\36")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u042b\n\37\3 \3 \3")
        buf.write(" \3!\7!\u0431\n!\f!\16!\u0434\13!\3!\5!\u0437\n!\3!\6")
        buf.write("!\u043a\n!\r!\16!\u043b\3\"\6\"\u043f\n\"\r\"\16\"\u0440")
        buf.write("\3\"\2\3\66#\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:<>@B\2\7\3\2!#\3\2,.\3\2*+\4\2$$\60")
        buf.write("\64\3\2*.\2\u04d1\2[\3\2\2\2\4\u0092\3\2\2\2\6\u009f\3")
        buf.write("\2\2\2\b\u00a2\3\2\2\2\n\u00e0\3\2\2\2\f\u0115\3\2\2\2")
        buf.write("\16\u0129\3\2\2\2\20\u012e\3\2\2\2\22\u0158\3\2\2\2\24")
        buf.write("\u0181\3\2\2\2\26\u01ab\3\2\2\2\30\u01c7\3\2\2\2\32\u01e3")
        buf.write("\3\2\2\2\34\u01e8\3\2\2\2\36\u0230\3\2\2\2 \u0235\3\2")
        buf.write("\2\2\"\u0251\3\2\2\2$\u026d\3\2\2\2&\u029f\3\2\2\2(\u02af")
        buf.write("\3\2\2\2*\u02b4\3\2\2\2,\u02d0\3\2\2\2.\u02fa\3\2\2\2")
        buf.write("\60\u0316\3\2\2\2\62\u0340\3\2\2\2\64\u039f\3\2\2\2\66")
        buf.write("\u03cb\3\2\2\28\u0420\3\2\2\2:\u0422\3\2\2\2<\u042a\3")
        buf.write("\2\2\2>\u042c\3\2\2\2@\u0436\3\2\2\2B\u043e\3\2\2\2DF")
        buf.write("\7\3\2\2ED\3\2\2\2FI\3\2\2\2GE\3\2\2\2GH\3\2\2\2HJ\3\2")
        buf.write("\2\2IG\3\2\2\2JN\5\4\3\2KM\7\'\2\2LK\3\2\2\2MP\3\2\2\2")
        buf.write("NL\3\2\2\2NO\3\2\2\2OR\3\2\2\2PN\3\2\2\2QS\7)\2\2RQ\3")
        buf.write("\2\2\2RS\3\2\2\2SU\3\2\2\2TV\7\3\2\2UT\3\2\2\2VW\3\2\2")
        buf.write("\2WU\3\2\2\2WX\3\2\2\2XZ\3\2\2\2YG\3\2\2\2Z]\3\2\2\2[")
        buf.write("Y\3\2\2\2[\\\3\2\2\2\\^\3\2\2\2][\3\2\2\2^b\5$\23\2_a")
        buf.write("\7\'\2\2`_\3\2\2\2ad\3\2\2\2b`\3\2\2\2bc\3\2\2\2cf\3\2")
        buf.write("\2\2db\3\2\2\2eg\7)\2\2fe\3\2\2\2fg\3\2\2\2g\177\3\2\2")
        buf.write("\2hj\7\3\2\2ih\3\2\2\2jk\3\2\2\2ki\3\2\2\2kl\3\2\2\2l")
        buf.write("m\3\2\2\2mq\5\4\3\2np\7\'\2\2on\3\2\2\2ps\3\2\2\2qo\3")
        buf.write("\2\2\2qr\3\2\2\2ru\3\2\2\2sq\3\2\2\2tv\7)\2\2ut\3\2\2")
        buf.write("\2uv\3\2\2\2vz\3\2\2\2wy\7\3\2\2xw\3\2\2\2y|\3\2\2\2z")
        buf.write("x\3\2\2\2z{\3\2\2\2{~\3\2\2\2|z\3\2\2\2}i\3\2\2\2~\u0081")
        buf.write("\3\2\2\2\177}\3\2\2\2\177\u0080\3\2\2\2\u0080\u0082\3")
        buf.write("\2\2\2\u0081\177\3\2\2\2\u0082\u0083\7\2\2\3\u0083\3\3")
        buf.write("\2\2\2\u0084\u0093\5\16\b\2\u0085\u0093\5\36\20\2\u0086")
        buf.write("\u0093\5&\24\2\u0087\u0093\5(\25\2\u0088\u0093\5\34\17")
        buf.write("\2\u0089\u0093\5\b\5\2\u008a\u0093\5\n\6\2\u008b\u0093")
        buf.write("\5\64\33\2\u008c\u008e\7\'\2\2\u008d\u008c\3\2\2\2\u008e")
        buf.write("\u0091\3\2\2\2\u008f\u008d\3\2\2\2\u008f\u0090\3\2\2\2")
        buf.write("\u0090\u0093\3\2\2\2\u0091\u008f\3\2\2\2\u0092\u0084\3")
        buf.write("\2\2\2\u0092\u0085\3\2\2\2\u0092\u0086\3\2\2\2\u0092\u0087")
        buf.write("\3\2\2\2\u0092\u0088\3\2\2\2\u0092\u0089\3\2\2\2\u0092")
        buf.write("\u008a\3\2\2\2\u0092\u008b\3\2\2\2\u0092\u008f\3\2\2\2")
        buf.write("\u0093\5\3\2\2\2\u0094\u0096\7\'\2\2\u0095\u0094\3\2\2")
        buf.write("\2\u0096\u0099\3\2\2\2\u0097\u0095\3\2\2\2\u0097\u0098")
        buf.write("\3\2\2\2\u0098\u009a\3\2\2\2\u0099\u0097\3\2\2\2\u009a")
        buf.write("\u009b\5\4\3\2\u009b\u009c\7\3\2\2\u009c\u009e\3\2\2\2")
        buf.write("\u009d\u0097\3\2\2\2\u009e\u00a1\3\2\2\2\u009f\u009d\3")
        buf.write("\2\2\2\u009f\u00a0\3\2\2\2\u00a0\7\3\2\2\2\u00a1\u009f")
        buf.write("\3\2\2\2\u00a2\u00a4\7\4\2\2\u00a3\u00a5\7\'\2\2\u00a4")
        buf.write("\u00a3\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00a4\3\2\2\2")
        buf.write("\u00a6\u00a7\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8\u00aa\7")
        buf.write("9\2\2\u00a9\u00ab\7\'\2\2\u00aa\u00a9\3\2\2\2\u00ab\u00ac")
        buf.write("\3\2\2\2\u00ac\u00aa\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad")
        buf.write("\u00ae\3\2\2\2\u00ae\u00b0\7\5\2\2\u00af\u00b1\7\'\2\2")
        buf.write("\u00b0\u00af\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00b0\3")
        buf.write("\2\2\2\u00b2\u00b3\3\2\2\2\u00b3\u00b4\3\2\2\2\u00b4\u00b6")
        buf.write("\5\66\34\2\u00b5\u00b7\7\'\2\2\u00b6\u00b5\3\2\2\2\u00b7")
        buf.write("\u00b8\3\2\2\2\u00b8\u00b6\3\2\2\2\u00b8\u00b9\3\2\2\2")
        buf.write("\u00b9\u00ba\3\2\2\2\u00ba\u00bc\7\6\2\2\u00bb\u00bd\7")
        buf.write("\'\2\2\u00bc\u00bb\3\2\2\2\u00bd\u00be\3\2\2\2\u00be\u00bc")
        buf.write("\3\2\2\2\u00be\u00bf\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0")
        buf.write("\u00c2\5\66\34\2\u00c1\u00c3\7\'\2\2\u00c2\u00c1\3\2\2")
        buf.write("\2\u00c3\u00c4\3\2\2\2\u00c4\u00c2\3\2\2\2\u00c4\u00c5")
        buf.write("\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00c8\7\7\2\2\u00c7")
        buf.write("\u00c9\7\'\2\2\u00c8\u00c7\3\2\2\2\u00c9\u00ca\3\2\2\2")
        buf.write("\u00ca\u00c8\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cc\3")
        buf.write("\2\2\2\u00cc\u00ce\5\66\34\2\u00cd\u00cf\7\'\2\2\u00ce")
        buf.write("\u00cd\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0\u00ce\3\2\2\2")
        buf.write("\u00d0\u00d1\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d3\7")
        buf.write("\b\2\2\u00d3\u00d4\7\3\2\2\u00d4\u00d8\5\6\4\2\u00d5\u00d7")
        buf.write("\7\'\2\2\u00d6\u00d5\3\2\2\2\u00d7\u00da\3\2\2\2\u00d8")
        buf.write("\u00d6\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00db\3\2\2\2")
        buf.write("\u00da\u00d8\3\2\2\2\u00db\u00dc\7\t\2\2\u00dc\t\3\2\2")
        buf.write("\2\u00dd\u00df\7\'\2\2\u00de\u00dd\3\2\2\2\u00df\u00e2")
        buf.write("\3\2\2\2\u00e0\u00de\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1")
        buf.write("\u00e3\3\2\2\2\u00e2\u00e0\3\2\2\2\u00e3\u00e5\7\n\2\2")
        buf.write("\u00e4\u00e6\7\'\2\2\u00e5\u00e4\3\2\2\2\u00e6\u00e7\3")
        buf.write("\2\2\2\u00e7\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00e9")
        buf.write("\3\2\2\2\u00e9\u00f9\5\f\7\2\u00ea\u00ec\7\13\2\2\u00eb")
        buf.write("\u00ed\7\'\2\2\u00ec\u00eb\3\2\2\2\u00ed\u00ee\3\2\2\2")
        buf.write("\u00ee\u00ec\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef\u00f0\3")
        buf.write("\2\2\2\u00f0\u00f2\7\n\2\2\u00f1\u00f3\7\'\2\2\u00f2\u00f1")
        buf.write("\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f4")
        buf.write("\u00f5\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u00f8\5\f\7\2")
        buf.write("\u00f7\u00ea\3\2\2\2\u00f8\u00fb\3\2\2\2\u00f9\u00f7\3")
        buf.write("\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00ff\3\2\2\2\u00fb\u00f9")
        buf.write("\3\2\2\2\u00fc\u00fe\7\'\2\2\u00fd\u00fc\3\2\2\2\u00fe")
        buf.write("\u0101\3\2\2\2\u00ff\u00fd\3\2\2\2\u00ff\u0100\3\2\2\2")
        buf.write("\u0100\u010b\3\2\2\2\u0101\u00ff\3\2\2\2\u0102\u0104\7")
        buf.write("\13\2\2\u0103\u0105\7\'\2\2\u0104\u0103\3\2\2\2\u0105")
        buf.write("\u0106\3\2\2\2\u0106\u0104\3\2\2\2\u0106\u0107\3\2\2\2")
        buf.write("\u0107\u0108\3\2\2\2\u0108\u0109\7\b\2\2\u0109\u010a\7")
        buf.write("\3\2\2\u010a\u010c\5\6\4\2\u010b\u0102\3\2\2\2\u010b\u010c")
        buf.write("\3\2\2\2\u010c\u0110\3\2\2\2\u010d\u010f\7\'\2\2\u010e")
        buf.write("\u010d\3\2\2\2\u010f\u0112\3\2\2\2\u0110\u010e\3\2\2\2")
        buf.write("\u0110\u0111\3\2\2\2\u0111\u0113\3\2\2\2\u0112\u0110\3")
        buf.write("\2\2\2\u0113\u0114\7\t\2\2\u0114\13\3\2\2\2\u0115\u0117")
        buf.write("\5\66\34\2\u0116\u0118\7\'\2\2\u0117\u0116\3\2\2\2\u0118")
        buf.write("\u0119\3\2\2\2\u0119\u0117\3\2\2\2\u0119\u011a\3\2\2\2")
        buf.write("\u011a\u011b\3\2\2\2\u011b\u011c\7\b\2\2\u011c\u0120\7")
        buf.write("\3\2\2\u011d\u011f\7\'\2\2\u011e\u011d\3\2\2\2\u011f\u0122")
        buf.write("\3\2\2\2\u0120\u011e\3\2\2\2\u0120\u0121\3\2\2\2\u0121")
        buf.write("\u0123\3\2\2\2\u0122\u0120\3\2\2\2\u0123\u0124\5\6\4\2")
        buf.write("\u0124\r\3\2\2\2\u0125\u012a\5\20\t\2\u0126\u012a\5\22")
        buf.write("\n\2\u0127\u012a\5\24\13\2\u0128\u012a\5\26\f\2\u0129")
        buf.write("\u0125\3\2\2\2\u0129\u0126\3\2\2\2\u0129\u0127\3\2\2\2")
        buf.write("\u0129\u0128\3\2\2\2\u012a\17\3\2\2\2\u012b\u012d\7\'")
        buf.write("\2\2\u012c\u012b\3\2\2\2\u012d\u0130\3\2\2\2\u012e\u012c")
        buf.write("\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u0131\3\2\2\2\u0130")
        buf.write("\u012e\3\2\2\2\u0131\u0133\7\f\2\2\u0132\u0134\7\'\2\2")
        buf.write("\u0133\u0132\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0133\3")
        buf.write("\2\2\2\u0135\u0136\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u013b")
        buf.write("\79\2\2\u0138\u013a\7\'\2\2\u0139\u0138\3\2\2\2\u013a")
        buf.write("\u013d\3\2\2\2\u013b\u0139\3\2\2\2\u013b\u013c\3\2\2\2")
        buf.write("\u013c\u013e\3\2\2\2\u013d\u013b\3\2\2\2\u013e\u0142\7")
        buf.write("\r\2\2\u013f\u0141\7\'\2\2\u0140\u013f\3\2\2\2\u0141\u0144")
        buf.write("\3\2\2\2\u0142\u0140\3\2\2\2\u0142\u0143\3\2\2\2\u0143")
        buf.write("\u0145\3\2\2\2\u0144\u0142\3\2\2\2\u0145\u0149\5\66\34")
        buf.write("\2\u0146\u0148\7\'\2\2\u0147\u0146\3\2\2\2\u0148\u014b")
        buf.write("\3\2\2\2\u0149\u0147\3\2\2\2\u0149\u014a\3\2\2\2\u014a")
        buf.write("\u014c\3\2\2\2\u014b\u0149\3\2\2\2\u014c\u0150\7\16\2")
        buf.write("\2\u014d\u014f\7\'\2\2\u014e\u014d\3\2\2\2\u014f\u0152")
        buf.write("\3\2\2\2\u0150\u014e\3\2\2\2\u0150\u0151\3\2\2\2\u0151")
        buf.write("\u0153\3\2\2\2\u0152\u0150\3\2\2\2\u0153\u0154\5\66\34")
        buf.write("\2\u0154\21\3\2\2\2\u0155\u0157\7\'\2\2\u0156\u0155\3")
        buf.write("\2\2\2\u0157\u015a\3\2\2\2\u0158\u0156\3\2\2\2\u0158\u0159")
        buf.write("\3\2\2\2\u0159\u015b\3\2\2\2\u015a\u0158\3\2\2\2\u015b")
        buf.write("\u015d\7\17\2\2\u015c\u015e\7\'\2\2\u015d\u015c\3\2\2")
        buf.write("\2\u015e\u015f\3\2\2\2\u015f\u015d\3\2\2\2\u015f\u0160")
        buf.write("\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u0165\79\2\2\u0162")
        buf.write("\u0164\7\'\2\2\u0163\u0162\3\2\2\2\u0164\u0167\3\2\2\2")
        buf.write("\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0168\3")
        buf.write("\2\2\2\u0167\u0165\3\2\2\2\u0168\u016c\7\r\2\2\u0169\u016b")
        buf.write("\7\'\2\2\u016a\u0169\3\2\2\2\u016b\u016e\3\2\2\2\u016c")
        buf.write("\u016a\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u016f\3\2\2\2")
        buf.write("\u016e\u016c\3\2\2\2\u016f\u0173\79\2\2\u0170\u0172\7")
        buf.write("\'\2\2\u0171\u0170\3\2\2\2\u0172\u0175\3\2\2\2\u0173\u0171")
        buf.write("\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u0176\3\2\2\2\u0175")
        buf.write("\u0173\3\2\2\2\u0176\u0178\7\16\2\2\u0177\u0179\7\'\2")
        buf.write("\2\u0178\u0177\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u0178")
        buf.write("\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017c\3\2\2\2\u017c")
        buf.write("\u017d\79\2\2\u017d\23\3\2\2\2\u017e\u0180\7\'\2\2\u017f")
        buf.write("\u017e\3\2\2\2\u0180\u0183\3\2\2\2\u0181\u017f\3\2\2\2")
        buf.write("\u0181\u0182\3\2\2\2\u0182\u0184\3\2\2\2\u0183\u0181\3")
        buf.write("\2\2\2\u0184\u0186\7\20\2\2\u0185\u0187\7\'\2\2\u0186")
        buf.write("\u0185\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u0186\3\2\2\2")
        buf.write("\u0188\u0189\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u018e\7")
        buf.write("9\2\2\u018b\u018d\7\'\2\2\u018c\u018b\3\2\2\2\u018d\u0190")
        buf.write("\3\2\2\2\u018e\u018c\3\2\2\2\u018e\u018f\3\2\2\2\u018f")
        buf.write("\u0191\3\2\2\2\u0190\u018e\3\2\2\2\u0191\u0195\7\r\2\2")
        buf.write("\u0192\u0194\7\'\2\2\u0193\u0192\3\2\2\2\u0194\u0197\3")
        buf.write("\2\2\2\u0195\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0198")
        buf.write("\3\2\2\2\u0197\u0195\3\2\2\2\u0198\u019c\79\2\2\u0199")
        buf.write("\u019b\7\'\2\2\u019a\u0199\3\2\2\2\u019b\u019e\3\2\2\2")
        buf.write("\u019c\u019a\3\2\2\2\u019c\u019d\3\2\2\2\u019d\u019f\3")
        buf.write("\2\2\2\u019e\u019c\3\2\2\2\u019f\u01a3\7\16\2\2\u01a0")
        buf.write("\u01a2\7\'\2\2\u01a1\u01a0\3\2\2\2\u01a2\u01a5\3\2\2\2")
        buf.write("\u01a3\u01a1\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a6\3")
        buf.write("\2\2\2\u01a5\u01a3\3\2\2\2\u01a6\u01a7\5\66\34\2\u01a7")
        buf.write("\25\3\2\2\2\u01a8\u01aa\7\'\2\2\u01a9\u01a8\3\2\2\2\u01aa")
        buf.write("\u01ad\3\2\2\2\u01ab\u01a9\3\2\2\2\u01ab\u01ac\3\2\2\2")
        buf.write("\u01ac\u01ae\3\2\2\2\u01ad\u01ab\3\2\2\2\u01ae\u01b0\7")
        buf.write("\21\2\2\u01af\u01b1\7\'\2\2\u01b0\u01af\3\2\2\2\u01b1")
        buf.write("\u01b2\3\2\2\2\u01b2\u01b0\3\2\2\2\u01b2\u01b3\3\2\2\2")
        buf.write("\u01b3\u01b4\3\2\2\2\u01b4\u01b8\79\2\2\u01b5\u01b7\7")
        buf.write("\'\2\2\u01b6\u01b5\3\2\2\2\u01b7\u01ba\3\2\2\2\u01b8\u01b6")
        buf.write("\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01bb\3\2\2\2\u01ba")
        buf.write("\u01b8\3\2\2\2\u01bb\u01bf\7\r\2\2\u01bc\u01be\7\'\2\2")
        buf.write("\u01bd\u01bc\3\2\2\2\u01be\u01c1\3\2\2\2\u01bf\u01bd\3")
        buf.write("\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c2\3\2\2\2\u01c1\u01bf")
        buf.write("\3\2\2\2\u01c2\u01c3\79\2\2\u01c3\27\3\2\2\2\u01c4\u01c6")
        buf.write("\7\'\2\2\u01c5\u01c4\3\2\2\2\u01c6\u01c9\3\2\2\2\u01c7")
        buf.write("\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01ca\3\2\2\2")
        buf.write("\u01c9\u01c7\3\2\2\2\u01ca\u01ce\79\2\2\u01cb\u01cd\7")
        buf.write("\'\2\2\u01cc\u01cb\3\2\2\2\u01cd\u01d0\3\2\2\2\u01ce\u01cc")
        buf.write("\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u01d1\3\2\2\2\u01d0")
        buf.write("\u01ce\3\2\2\2\u01d1\u01d5\7\22\2\2\u01d2\u01d4\7\'\2")
        buf.write("\2\u01d3\u01d2\3\2\2\2\u01d4\u01d7\3\2\2\2\u01d5\u01d3")
        buf.write("\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d8\3\2\2\2\u01d7")
        buf.write("\u01d5\3\2\2\2\u01d8\u01dc\5\66\34\2\u01d9\u01db\7\'\2")
        buf.write("\2\u01da\u01d9\3\2\2\2\u01db\u01de\3\2\2\2\u01dc\u01da")
        buf.write("\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01df\3\2\2\2\u01de")
        buf.write("\u01dc\3\2\2\2\u01df\u01e0\7\23\2\2\u01e0\31\3\2\2\2\u01e1")
        buf.write("\u01e4\79\2\2\u01e2\u01e4\5\30\r\2\u01e3\u01e1\3\2\2\2")
        buf.write("\u01e3\u01e2\3\2\2\2\u01e4\33\3\2\2\2\u01e5\u01e7\7\'")
        buf.write("\2\2\u01e6\u01e5\3\2\2\2\u01e7\u01ea\3\2\2\2\u01e8\u01e6")
        buf.write("\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01eb\3\2\2\2\u01ea")
        buf.write("\u01e8\3\2\2\2\u01eb\u01ef\7\24\2\2\u01ec\u01ee\7\'\2")
        buf.write("\2\u01ed\u01ec\3\2\2\2\u01ee\u01f1\3\2\2\2\u01ef\u01ed")
        buf.write("\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f2\3\2\2\2\u01f1")
        buf.write("\u01ef\3\2\2\2\u01f2\u01f6\7\62\2\2\u01f3\u01f5\7\'\2")
        buf.write("\2\u01f4\u01f3\3\2\2\2\u01f5\u01f8\3\2\2\2\u01f6\u01f4")
        buf.write("\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f9\3\2\2\2\u01f8")
        buf.write("\u01f6\3\2\2\2\u01f9\u01fd\7\65\2\2\u01fa\u01fc\7\'\2")
        buf.write("\2\u01fb\u01fa\3\2\2\2\u01fc\u01ff\3\2\2\2\u01fd\u01fb")
        buf.write("\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\u0200\3\2\2\2\u01ff")
        buf.write("\u01fd\3\2\2\2\u0200\u0202\7\61\2\2\u0201\u0203\7\'\2")
        buf.write("\2\u0202\u0201\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0202")
        buf.write("\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u0206\3\2\2\2\u0206")
        buf.write("\u020a\79\2\2\u0207\u0209\7\'\2\2\u0208\u0207\3\2\2\2")
        buf.write("\u0209\u020c\3\2\2\2\u020a\u0208\3\2\2\2\u020a\u020b\3")
        buf.write("\2\2\2\u020b\u020d\3\2\2\2\u020c\u020a\3\2\2\2\u020d\u0211")
        buf.write("\7\r\2\2\u020e\u0210\7\'\2\2\u020f\u020e\3\2\2\2\u0210")
        buf.write("\u0213\3\2\2\2\u0211\u020f\3\2\2\2\u0211\u0212\3\2\2\2")
        buf.write("\u0212\u0214\3\2\2\2\u0213\u0211\3\2\2\2\u0214\u0218\7")
        buf.write("9\2\2\u0215\u0217\7\'\2\2\u0216\u0215\3\2\2\2\u0217\u021a")
        buf.write("\3\2\2\2\u0218\u0216\3\2\2\2\u0218\u0219\3\2\2\2\u0219")
        buf.write("\u022b\3\2\2\2\u021a\u0218\3\2\2\2\u021b\u021f\7\16\2")
        buf.write("\2\u021c\u021e\7\'\2\2\u021d\u021c\3\2\2\2\u021e\u0221")
        buf.write("\3\2\2\2\u021f\u021d\3\2\2\2\u021f\u0220\3\2\2\2\u0220")
        buf.write("\u0222\3\2\2\2\u0221\u021f\3\2\2\2\u0222\u0226\79\2\2")
        buf.write("\u0223\u0225\7\'\2\2\u0224\u0223\3\2\2\2\u0225\u0228\3")
        buf.write("\2\2\2\u0226\u0224\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u022a")
        buf.write("\3\2\2\2\u0228\u0226\3\2\2\2\u0229\u021b\3\2\2\2\u022a")
        buf.write("\u022d\3\2\2\2\u022b\u0229\3\2\2\2\u022b\u022c\3\2\2\2")
        buf.write("\u022c\35\3\2\2\2\u022d\u022b\3\2\2\2\u022e\u0231\5 \21")
        buf.write("\2\u022f\u0231\5\"\22\2\u0230\u022e\3\2\2\2\u0230\u022f")
        buf.write("\3\2\2\2\u0231\37\3\2\2\2\u0232\u0234\7\'\2\2\u0233\u0232")
        buf.write("\3\2\2\2\u0234\u0237\3\2\2\2\u0235\u0233\3\2\2\2\u0235")
        buf.write("\u0236\3\2\2\2\u0236\u0238\3\2\2\2\u0237\u0235\3\2\2\2")
        buf.write("\u0238\u023a\7\25\2\2\u0239\u023b\7\'\2\2\u023a\u0239")
        buf.write("\3\2\2\2\u023b\u023c\3\2\2\2\u023c\u023a\3\2\2\2\u023c")
        buf.write("\u023d\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u0242\79\2\2")
        buf.write("\u023f\u0241\7\'\2\2\u0240\u023f\3\2\2\2\u0241\u0244\3")
        buf.write("\2\2\2\u0242\u0240\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0245")
        buf.write("\3\2\2\2\u0244\u0242\3\2\2\2\u0245\u0249\7\r\2\2\u0246")
        buf.write("\u0248\7\'\2\2\u0247\u0246\3\2\2\2\u0248\u024b\3\2\2\2")
        buf.write("\u0249\u0247\3\2\2\2\u0249\u024a\3\2\2\2\u024a\u024c\3")
        buf.write("\2\2\2\u024b\u0249\3\2\2\2\u024c\u024d\5\66\34\2\u024d")
        buf.write("!\3\2\2\2\u024e\u0250\7\'\2\2\u024f\u024e\3\2\2\2\u0250")
        buf.write("\u0253\3\2\2\2\u0251\u024f\3\2\2\2\u0251\u0252\3\2\2\2")
        buf.write("\u0252\u0254\3\2\2\2\u0253\u0251\3\2\2\2\u0254\u0256\7")
        buf.write("\26\2\2\u0255\u0257\7\'\2\2\u0256\u0255\3\2\2\2\u0257")
        buf.write("\u0258\3\2\2\2\u0258\u0256\3\2\2\2\u0258\u0259\3\2\2\2")
        buf.write("\u0259\u025a\3\2\2\2\u025a\u025e\79\2\2\u025b\u025d\7")
        buf.write("\'\2\2\u025c\u025b\3\2\2\2\u025d\u0260\3\2\2\2\u025e\u025c")
        buf.write("\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0261\3\2\2\2\u0260")
        buf.write("\u025e\3\2\2\2\u0261\u0265\7\r\2\2\u0262\u0264\7\'\2\2")
        buf.write("\u0263\u0262\3\2\2\2\u0264\u0267\3\2\2\2\u0265\u0263\3")
        buf.write("\2\2\2\u0265\u0266\3\2\2\2\u0266\u0268\3\2\2\2\u0267\u0265")
        buf.write("\3\2\2\2\u0268\u0269\5\66\34\2\u0269#\3\2\2\2\u026a\u026c")
        buf.write("\7\'\2\2\u026b\u026a\3\2\2\2\u026c\u026f\3\2\2\2\u026d")
        buf.write("\u026b\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u0270\3\2\2\2")
        buf.write("\u026f\u026d\3\2\2\2\u0270\u0274\7\27\2\2\u0271\u0273")
        buf.write("\7\'\2\2\u0272\u0271\3\2\2\2\u0273\u0276\3\2\2\2\u0274")
        buf.write("\u0272\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u0277\3\2\2\2")
        buf.write("\u0276\u0274\3\2\2\2\u0277\u027b\7\r\2\2\u0278\u027a\7")
        buf.write("\'\2\2\u0279\u0278\3\2\2\2\u027a\u027d\3\2\2\2\u027b\u0279")
        buf.write("\3\2\2\2\u027b\u027c\3\2\2\2\u027c\u027e\3\2\2\2\u027d")
        buf.write("\u027b\3\2\2\2\u027e\u0282\5\66\34\2\u027f\u0281\7\'\2")
        buf.write("\2\u0280\u027f\3\2\2\2\u0281\u0284\3\2\2\2\u0282\u0280")
        buf.write("\3\2\2\2\u0282\u0283\3\2\2\2\u0283\u0285\3\2\2\2\u0284")
        buf.write("\u0282\3\2\2\2\u0285\u0289\7\16\2\2\u0286\u0288\7\'\2")
        buf.write("\2\u0287\u0286\3\2\2\2\u0288\u028b\3\2\2\2\u0289\u0287")
        buf.write("\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u028c\3\2\2\2\u028b")
        buf.write("\u0289\3\2\2\2\u028c\u0290\5\66\34\2\u028d\u028f\7\'\2")
        buf.write("\2\u028e\u028d\3\2\2\2\u028f\u0292\3\2\2\2\u0290\u028e")
        buf.write("\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0293\3\2\2\2\u0292")
        buf.write("\u0290\3\2\2\2\u0293\u0297\7\16\2\2\u0294\u0296\7\'\2")
        buf.write("\2\u0295\u0294\3\2\2\2\u0296\u0299\3\2\2\2\u0297\u0295")
        buf.write("\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u029a\3\2\2\2\u0299")
        buf.write("\u0297\3\2\2\2\u029a\u029b\7\66\2\2\u029b%\3\2\2\2\u029c")
        buf.write("\u029e\7\'\2\2\u029d\u029c\3\2\2\2\u029e\u02a1\3\2\2\2")
        buf.write("\u029f\u029d\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a2\3")
        buf.write("\2\2\2\u02a1\u029f\3\2\2\2\u02a2\u02a4\7\30\2\2\u02a3")
        buf.write("\u02a5\7\'\2\2\u02a4\u02a3\3\2\2\2\u02a5\u02a6\3\2\2\2")
        buf.write("\u02a6\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a8\3")
        buf.write("\2\2\2\u02a8\u02a9\5\32\16\2\u02a9\'\3\2\2\2\u02aa\u02b0")
        buf.write("\5*\26\2\u02ab\u02b0\5,\27\2\u02ac\u02b0\5.\30\2\u02ad")
        buf.write("\u02b0\5\60\31\2\u02ae\u02b0\5\62\32\2\u02af\u02aa\3\2")
        buf.write("\2\2\u02af\u02ab\3\2\2\2\u02af\u02ac\3\2\2\2\u02af\u02ad")
        buf.write("\3\2\2\2\u02af\u02ae\3\2\2\2\u02b0)\3\2\2\2\u02b1\u02b3")
        buf.write("\7\'\2\2\u02b2\u02b1\3\2\2\2\u02b3\u02b6\3\2\2\2\u02b4")
        buf.write("\u02b2\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b7\3\2\2\2")
        buf.write("\u02b6\u02b4\3\2\2\2\u02b7\u02b9\7\31\2\2\u02b8\u02ba")
        buf.write("\7\'\2\2\u02b9\u02b8\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb")
        buf.write("\u02b9\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02bd\3\2\2\2")
        buf.write("\u02bd\u02c1\5\32\16\2\u02be\u02c0\7\'\2\2\u02bf\u02be")
        buf.write("\3\2\2\2\u02c0\u02c3\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c1")
        buf.write("\u02c2\3\2\2\2\u02c2\u02c4\3\2\2\2\u02c3\u02c1\3\2\2\2")
        buf.write("\u02c4\u02c8\7\r\2\2\u02c5\u02c7\7\'\2\2\u02c6\u02c5\3")
        buf.write("\2\2\2\u02c7\u02ca\3\2\2\2\u02c8\u02c6\3\2\2\2\u02c8\u02c9")
        buf.write("\3\2\2\2\u02c9\u02cb\3\2\2\2\u02ca\u02c8\3\2\2\2\u02cb")
        buf.write("\u02cc\7\66\2\2\u02cc+\3\2\2\2\u02cd\u02cf\7\'\2\2\u02ce")
        buf.write("\u02cd\3\2\2\2\u02cf\u02d2\3\2\2\2\u02d0\u02ce\3\2\2\2")
        buf.write("\u02d0\u02d1\3\2\2\2\u02d1\u02d3\3\2\2\2\u02d2\u02d0\3")
        buf.write("\2\2\2\u02d3\u02d5\7\32\2\2\u02d4\u02d6\7\'\2\2\u02d5")
        buf.write("\u02d4\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d5\3\2\2\2")
        buf.write("\u02d7\u02d8\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02dd\5")
        buf.write("\32\16\2\u02da\u02dc\7\'\2\2\u02db\u02da\3\2\2\2\u02dc")
        buf.write("\u02df\3\2\2\2\u02dd\u02db\3\2\2\2\u02dd\u02de\3\2\2\2")
        buf.write("\u02de\u02e0\3\2\2\2\u02df\u02dd\3\2\2\2\u02e0\u02e4\7")
        buf.write("\r\2\2\u02e1\u02e3\7\'\2\2\u02e2\u02e1\3\2\2\2\u02e3\u02e6")
        buf.write("\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5")
        buf.write("\u02e7\3\2\2\2\u02e6\u02e4\3\2\2\2\u02e7\u02eb\5\66\34")
        buf.write("\2\u02e8\u02ea\7\'\2\2\u02e9\u02e8\3\2\2\2\u02ea\u02ed")
        buf.write("\3\2\2\2\u02eb\u02e9\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec")
        buf.write("\u02ee\3\2\2\2\u02ed\u02eb\3\2\2\2\u02ee\u02f2\7\16\2")
        buf.write("\2\u02ef\u02f1\7\'\2\2\u02f0\u02ef\3\2\2\2\u02f1\u02f4")
        buf.write("\3\2\2\2\u02f2\u02f0\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3")
        buf.write("\u02f5\3\2\2\2\u02f4\u02f2\3\2\2\2\u02f5\u02f6\5\66\34")
        buf.write("\2\u02f6-\3\2\2\2\u02f7\u02f9\7\'\2\2\u02f8\u02f7\3\2")
        buf.write("\2\2\u02f9\u02fc\3\2\2\2\u02fa\u02f8\3\2\2\2\u02fa\u02fb")
        buf.write("\3\2\2\2\u02fb\u02fd\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fd")
        buf.write("\u02ff\7\33\2\2\u02fe\u0300\7\'\2\2\u02ff\u02fe\3\2\2")
        buf.write("\2\u0300\u0301\3\2\2\2\u0301\u02ff\3\2\2\2\u0301\u0302")
        buf.write("\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u0307\5\32\16\2\u0304")
        buf.write("\u0306\7\'\2\2\u0305\u0304\3\2\2\2\u0306\u0309\3\2\2\2")
        buf.write("\u0307\u0305\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u030a\3")
        buf.write("\2\2\2\u0309\u0307\3\2\2\2\u030a\u030e\7\r\2\2\u030b\u030d")
        buf.write("\7\'\2\2\u030c\u030b\3\2\2\2\u030d\u0310\3\2\2\2\u030e")
        buf.write("\u030c\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0311\3\2\2\2")
        buf.write("\u0310\u030e\3\2\2\2\u0311\u0312\5\32\16\2\u0312/\3\2")
        buf.write("\2\2\u0313\u0315\7\'\2\2\u0314\u0313\3\2\2\2\u0315\u0318")
        buf.write("\3\2\2\2\u0316\u0314\3\2\2\2\u0316\u0317\3\2\2\2\u0317")
        buf.write("\u0319\3\2\2\2\u0318\u0316\3\2\2\2\u0319\u031b\7\34\2")
        buf.write("\2\u031a\u031c\7\'\2\2\u031b\u031a\3\2\2\2\u031c\u031d")
        buf.write("\3\2\2\2\u031d\u031b\3\2\2\2\u031d\u031e\3\2\2\2\u031e")
        buf.write("\u031f\3\2\2\2\u031f\u0323\5\32\16\2\u0320\u0322\7\'\2")
        buf.write("\2\u0321\u0320\3\2\2\2\u0322\u0325\3\2\2\2\u0323\u0321")
        buf.write("\3\2\2\2\u0323\u0324\3\2\2\2\u0324\u0326\3\2\2\2\u0325")
        buf.write("\u0323\3\2\2\2\u0326\u032a\7\r\2\2\u0327\u0329\7\'\2\2")
        buf.write("\u0328\u0327\3\2\2\2\u0329\u032c\3\2\2\2\u032a\u0328\3")
        buf.write("\2\2\2\u032a\u032b\3\2\2\2\u032b\u032d\3\2\2\2\u032c\u032a")
        buf.write("\3\2\2\2\u032d\u0331\5\66\34\2\u032e\u0330\7\'\2\2\u032f")
        buf.write("\u032e\3\2\2\2\u0330\u0333\3\2\2\2\u0331\u032f\3\2\2\2")
        buf.write("\u0331\u0332\3\2\2\2\u0332\u0334\3\2\2\2\u0333\u0331\3")
        buf.write("\2\2\2\u0334\u0338\7\16\2\2\u0335\u0337\7\'\2\2\u0336")
        buf.write("\u0335\3\2\2\2\u0337\u033a\3\2\2\2\u0338\u0336\3\2\2\2")
        buf.write("\u0338\u0339\3\2\2\2\u0339\u033b\3\2\2\2\u033a\u0338\3")
        buf.write("\2\2\2\u033b\u033c\5\32\16\2\u033c\61\3\2\2\2\u033d\u033f")
        buf.write("\7\'\2\2\u033e\u033d\3\2\2\2\u033f\u0342\3\2\2\2\u0340")
        buf.write("\u033e\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0343\3\2\2\2")
        buf.write("\u0342\u0340\3\2\2\2\u0343\u0345\7\35\2\2\u0344\u0346")
        buf.write("\7\'\2\2\u0345\u0344\3\2\2\2\u0346\u0347\3\2\2\2\u0347")
        buf.write("\u0345\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u0349\3\2\2\2")
        buf.write("\u0349\u034d\5\32\16\2\u034a\u034c\7\'\2\2\u034b\u034a")
        buf.write("\3\2\2\2\u034c\u034f\3\2\2\2\u034d\u034b\3\2\2\2\u034d")
        buf.write("\u034e\3\2\2\2\u034e\u0350\3\2\2\2\u034f\u034d\3\2\2\2")
        buf.write("\u0350\u0354\7\r\2\2\u0351\u0353\7\'\2\2\u0352\u0351\3")
        buf.write("\2\2\2\u0353\u0356\3\2\2\2\u0354\u0352\3\2\2\2\u0354\u0355")
        buf.write("\3\2\2\2\u0355\u0357\3\2\2\2\u0356\u0354\3\2\2\2\u0357")
        buf.write("\u035b\5\66\34\2\u0358\u035a\7\'\2\2\u0359\u0358\3\2\2")
        buf.write("\2\u035a\u035d\3\2\2\2\u035b\u0359\3\2\2\2\u035b\u035c")
        buf.write("\3\2\2\2\u035c\u035e\3\2\2\2\u035d\u035b\3\2\2\2\u035e")
        buf.write("\u0362\7\16\2\2\u035f\u0361\7\'\2\2\u0360\u035f\3\2\2")
        buf.write("\2\u0361\u0364\3\2\2\2\u0362\u0360\3\2\2\2\u0362\u0363")
        buf.write("\3\2\2\2\u0363\u0365\3\2\2\2\u0364\u0362\3\2\2\2\u0365")
        buf.write("\u0366\5\32\16\2\u0366\63\3\2\2\2\u0367\u0369\7\'\2\2")
        buf.write("\u0368\u0367\3\2\2\2\u0369\u036c\3\2\2\2\u036a\u0368\3")
        buf.write("\2\2\2\u036a\u036b\3\2\2\2\u036b\u036d\3\2\2\2\u036c\u036a")
        buf.write("\3\2\2\2\u036d\u036f\7\36\2\2\u036e\u0370\7\'\2\2\u036f")
        buf.write("\u036e\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u036f\3\2\2\2")
        buf.write("\u0371\u0372\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0377\5")
        buf.write("\32\16\2\u0374\u0376\7\'\2\2\u0375\u0374\3\2\2\2\u0376")
        buf.write("\u0379\3\2\2\2\u0377\u0375\3\2\2\2\u0377\u0378\3\2\2\2")
        buf.write("\u0378\u037a\3\2\2\2\u0379\u0377\3\2\2\2\u037a\u037e\7")
        buf.write("\r\2\2\u037b\u037d\7\'\2\2\u037c\u037b\3\2\2\2\u037d\u0380")
        buf.write("\3\2\2\2\u037e\u037c\3\2\2\2\u037e\u037f\3\2\2\2\u037f")
        buf.write("\u0381\3\2\2\2\u0380\u037e\3\2\2\2\u0381\u0382\5\32\16")
        buf.write("\2\u0382\u03a0\3\2\2\2\u0383\u0385\7\'\2\2\u0384\u0383")
        buf.write("\3\2\2\2\u0385\u0388\3\2\2\2\u0386\u0384\3\2\2\2\u0386")
        buf.write("\u0387\3\2\2\2\u0387\u0389\3\2\2\2\u0388\u0386\3\2\2\2")
        buf.write("\u0389\u038b\7\36\2\2\u038a\u038c\7\'\2\2\u038b\u038a")
        buf.write("\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038b\3\2\2\2\u038d")
        buf.write("\u038e\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0393\5\32\16")
        buf.write("\2\u0390\u0392\7\'\2\2\u0391\u0390\3\2\2\2\u0392\u0395")
        buf.write("\3\2\2\2\u0393\u0391\3\2\2\2\u0393\u0394\3\2\2\2\u0394")
        buf.write("\u0396\3\2\2\2\u0395\u0393\3\2\2\2\u0396\u039a\7\r\2\2")
        buf.write("\u0397\u0399\7\'\2\2\u0398\u0397\3\2\2\2\u0399\u039c\3")
        buf.write("\2\2\2\u039a\u0398\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039d")
        buf.write("\3\2\2\2\u039c\u039a\3\2\2\2\u039d\u039e\5\66\34\2\u039e")
        buf.write("\u03a0\3\2\2\2\u039f\u036a\3\2\2\2\u039f\u0386\3\2\2\2")
        buf.write("\u03a0\65\3\2\2\2\u03a1\u03a2\b\34\1\2\u03a2\u03a6\7\37")
        buf.write("\2\2\u03a3\u03a5\7\'\2\2\u03a4\u03a3\3\2\2\2\u03a5\u03a8")
        buf.write("\3\2\2\2\u03a6\u03a4\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7")
        buf.write("\u03a9\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a9\u03ad\5\66\34")
        buf.write("\2\u03aa\u03ac\7\'\2\2\u03ab\u03aa\3\2\2\2\u03ac\u03af")
        buf.write("\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae")
        buf.write("\u03b0\3\2\2\2\u03af\u03ad\3\2\2\2\u03b0\u03b1\7 \2\2")
        buf.write("\u03b1\u03cc\3\2\2\2\u03b2\u03b6\t\2\2\2\u03b3\u03b5\7")
        buf.write("\'\2\2\u03b4\u03b3\3\2\2\2\u03b5\u03b8\3\2\2\2\u03b6\u03b4")
        buf.write("\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u03b9\3\2\2\2\u03b8")
        buf.write("\u03b6\3\2\2\2\u03b9\u03cc\5\66\34\13\u03ba\u03be\7+\2")
        buf.write("\2\u03bb\u03bd\7\'\2\2\u03bc\u03bb\3\2\2\2\u03bd\u03c0")
        buf.write("\3\2\2\2\u03be\u03bc\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf")
        buf.write("\u03c1\3\2\2\2\u03c0\u03be\3\2\2\2\u03c1\u03cc\5\66\34")
        buf.write("\n\u03c2\u03c6\7/\2\2\u03c3\u03c5\7\'\2\2\u03c4\u03c3")
        buf.write("\3\2\2\2\u03c5\u03c8\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c6")
        buf.write("\u03c7\3\2\2\2\u03c7\u03c9\3\2\2\2\u03c8\u03c6\3\2\2\2")
        buf.write("\u03c9\u03cc\5\66\34\6\u03ca\u03cc\58\35\2\u03cb\u03a1")
        buf.write("\3\2\2\2\u03cb\u03b2\3\2\2\2\u03cb\u03ba\3\2\2\2\u03cb")
        buf.write("\u03c2\3\2\2\2\u03cb\u03ca\3\2\2\2\u03cc\u041a\3\2\2\2")
        buf.write("\u03cd\u03d1\f\t\2\2\u03ce\u03d0\7\'\2\2\u03cf\u03ce\3")
        buf.write("\2\2\2\u03d0\u03d3\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d1\u03d2")
        buf.write("\3\2\2\2\u03d2\u03d4\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d4")
        buf.write("\u03d8\t\3\2\2\u03d5\u03d7\7\'\2\2\u03d6\u03d5\3\2\2\2")
        buf.write("\u03d7\u03da\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d8\u03d9\3")
        buf.write("\2\2\2\u03d9\u03db\3\2\2\2\u03da\u03d8\3\2\2\2\u03db\u0419")
        buf.write("\5\66\34\n\u03dc\u03e0\f\b\2\2\u03dd\u03df\7\'\2\2\u03de")
        buf.write("\u03dd\3\2\2\2\u03df\u03e2\3\2\2\2\u03e0\u03de\3\2\2\2")
        buf.write("\u03e0\u03e1\3\2\2\2\u03e1\u03e3\3\2\2\2\u03e2\u03e0\3")
        buf.write("\2\2\2\u03e3\u03e7\t\4\2\2\u03e4\u03e6\7\'\2\2\u03e5\u03e4")
        buf.write("\3\2\2\2\u03e6\u03e9\3\2\2\2\u03e7\u03e5\3\2\2\2\u03e7")
        buf.write("\u03e8\3\2\2\2\u03e8\u03ea\3\2\2\2\u03e9\u03e7\3\2\2\2")
        buf.write("\u03ea\u0419\5\66\34\t\u03eb\u03ef\f\7\2\2\u03ec\u03ee")
        buf.write("\7\'\2\2\u03ed\u03ec\3\2\2\2\u03ee\u03f1\3\2\2\2\u03ef")
        buf.write("\u03ed\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0\u03f2\3\2\2\2")
        buf.write("\u03f1\u03ef\3\2\2\2\u03f2\u03f6\t\5\2\2\u03f3\u03f5\7")
        buf.write("\'\2\2\u03f4\u03f3\3\2\2\2\u03f5\u03f8\3\2\2\2\u03f6\u03f4")
        buf.write("\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f9\3\2\2\2\u03f8")
        buf.write("\u03f6\3\2\2\2\u03f9\u0419\5\66\34\b\u03fa\u03fe\f\5\2")
        buf.write("\2\u03fb\u03fd\7\'\2\2\u03fc\u03fb\3\2\2\2\u03fd\u0400")
        buf.write("\3\2\2\2\u03fe\u03fc\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff")
        buf.write("\u0401\3\2\2\2\u0400\u03fe\3\2\2\2\u0401\u0405\7%\2\2")
        buf.write("\u0402\u0404\7\'\2\2\u0403\u0402\3\2\2\2\u0404\u0407\3")
        buf.write("\2\2\2\u0405\u0403\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408")
        buf.write("\3\2\2\2\u0407\u0405\3\2\2\2\u0408\u0419\5\66\34\6\u0409")
        buf.write("\u040d\f\4\2\2\u040a\u040c\7\'\2\2\u040b\u040a\3\2\2\2")
        buf.write("\u040c\u040f\3\2\2\2\u040d\u040b\3\2\2\2\u040d\u040e\3")
        buf.write("\2\2\2\u040e\u0410\3\2\2\2\u040f\u040d\3\2\2\2\u0410\u0414")
        buf.write("\7&\2\2\u0411\u0413\7\'\2\2\u0412\u0411\3\2\2\2\u0413")
        buf.write("\u0416\3\2\2\2\u0414\u0412\3\2\2\2\u0414\u0415\3\2\2\2")
        buf.write("\u0415\u0417\3\2\2\2\u0416\u0414\3\2\2\2\u0417\u0419\5")
        buf.write("\66\34\5\u0418\u03cd\3\2\2\2\u0418\u03dc\3\2\2\2\u0418")
        buf.write("\u03eb\3\2\2\2\u0418\u03fa\3\2\2\2\u0418\u0409\3\2\2\2")
        buf.write("\u0419\u041c\3\2\2\2\u041a\u0418\3\2\2\2\u041a\u041b\3")
        buf.write("\2\2\2\u041b\67\3\2\2\2\u041c\u041a\3\2\2\2\u041d\u0421")
        buf.write("\5B\"\2\u041e\u0421\5@!\2\u041f\u0421\79\2\2\u0420\u041d")
        buf.write("\3\2\2\2\u0420\u041e\3\2\2\2\u0420\u041f\3\2\2\2\u0421")
        buf.write("9\3\2\2\2\u0422\u0423\t\6\2\2\u0423;\3\2\2\2\u0424\u042b")
        buf.write("\7\61\2\2\u0425\u042b\7\62\2\2\u0426\u042b\7\63\2\2\u0427")
        buf.write("\u042b\7\64\2\2\u0428\u042b\7\60\2\2\u0429\u042b\5> \2")
        buf.write("\u042a\u0424\3\2\2\2\u042a\u0425\3\2\2\2\u042a\u0426\3")
        buf.write("\2\2\2\u042a\u0427\3\2\2\2\u042a\u0428\3\2\2\2\u042a\u0429")
        buf.write("\3\2\2\2\u042b=\3\2\2\2\u042c\u042d\7/\2\2\u042d\u042e")
        buf.write("\7\60\2\2\u042e?\3\2\2\2\u042f\u0431\78\2\2\u0430\u042f")
        buf.write("\3\2\2\2\u0431\u0434\3\2\2\2\u0432\u0430\3\2\2\2\u0432")
        buf.write("\u0433\3\2\2\2\u0433\u0435\3\2\2\2\u0434\u0432\3\2\2\2")
        buf.write("\u0435\u0437\7\67\2\2\u0436\u0432\3\2\2\2\u0436\u0437")
        buf.write("\3\2\2\2\u0437\u0439\3\2\2\2\u0438\u043a\78\2\2\u0439")
        buf.write("\u0438\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u0439\3\2\2\2")
        buf.write("\u043b\u043c\3\2\2\2\u043cA\3\2\2\2\u043d\u043f\78\2\2")
        buf.write("\u043e\u043d\3\2\2\2\u043f\u0440\3\2\2\2\u0440\u043e\3")
        buf.write("\2\2\2\u0440\u0441\3\2\2\2\u0441C\3\2\2\2\u009bGNRW[b")
        buf.write("fkquz\177\u008f\u0092\u0097\u009f\u00a6\u00ac\u00b2\u00b8")
        buf.write("\u00be\u00c4\u00ca\u00d0\u00d8\u00e0\u00e7\u00ee\u00f4")
        buf.write("\u00f9\u00ff\u0106\u010b\u0110\u0119\u0120\u0129\u012e")
        buf.write("\u0135\u013b\u0142\u0149\u0150\u0158\u015f\u0165\u016c")
        buf.write("\u0173\u017a\u0181\u0188\u018e\u0195\u019c\u01a3\u01ab")
        buf.write("\u01b2\u01b8\u01bf\u01c7\u01ce\u01d5\u01dc\u01e3\u01e8")
        buf.write("\u01ef\u01f6\u01fd\u0204\u020a\u0211\u0218\u021f\u0226")
        buf.write("\u022b\u0230\u0235\u023c\u0242\u0249\u0251\u0258\u025e")
        buf.write("\u0265\u026d\u0274\u027b\u0282\u0289\u0290\u0297\u029f")
        buf.write("\u02a6\u02af\u02b4\u02bb\u02c1\u02c8\u02d0\u02d7\u02dd")
        buf.write("\u02e4\u02eb\u02f2\u02fa\u0301\u0307\u030e\u0316\u031d")
        buf.write("\u0323\u032a\u0331\u0338\u0340\u0347\u034d\u0354\u035b")
        buf.write("\u0362\u036a\u0371\u0377\u037e\u0386\u038d\u0393\u039a")
        buf.write("\u039f\u03a6\u03ad\u03b6\u03be\u03c6\u03cb\u03d1\u03d8")
        buf.write("\u03e0\u03e7\u03ef\u03f6\u03fe\u0405\u040d\u0414\u0418")
        buf.write("\u041a\u0420\u042a\u0432\u0436\u043b\u0440")
        return buf.getvalue()


class GraphlyParser ( Parser ):

    grammarFileName = "Graphly.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'loop'", "'start'", "'until'", 
                     "'step'", "'then'", "'end'", "'check'", "'else'", "'point'", 
                     "':'", "','", "'segment'", "'circle'", "'polygon'", 
                     "'['", "']'", "'group'", "'num'", "'iterator'", "'canvas'", 
                     "'draw'", "'fill'", "'move'", "'place'", "'rotate'", 
                     "'scale'", "'assign'", "'('", "')'", "'^'", "'_'", 
                     "'~'", "'!='", "'&'", "'|'", "<INVALID>", "'\r'", "<INVALID>", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'='", "'>'", 
                     "'<'", "'>='", "'<='", "<INVALID>", "<INVALID>", "'.'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "WS", "CR", "COM_SIGN", "PLUS", "MINUS", 
                      "MULTIPLICATION", "DIVISION", "MODULO", "NEG", "EQ", 
                      "GREATER", "LOWER", "GT", "LT", "TYPE", "COLOR", "DOT", 
                      "DIGIT", "NAME" ]

    RULE_program = 0
    RULE_instruction = 1
    RULE_block = 2
    RULE_loop = 3
    RULE_check = 4
    RULE_condition_block = 5
    RULE_shape = 6
    RULE_point = 7
    RULE_segment = 8
    RULE_circle = 9
    RULE_polygon = 10
    RULE_groupMember = 11
    RULE_transformable = 12
    RULE_group = 13
    RULE_type_definition = 14
    RULE_num = 15
    RULE_iterator = 16
    RULE_canvas = 17
    RULE_draw = 18
    RULE_transformation = 19
    RULE_fill = 20
    RULE_move = 21
    RULE_place = 22
    RULE_rotate = 23
    RULE_scale = 24
    RULE_assign = 25
    RULE_expr = 26
    RULE_atom = 27
    RULE_arithmetic = 28
    RULE_logic = 29
    RULE_neq = 30
    RULE_flt = 31
    RULE_itr = 32

    ruleNames =  [ "program", "instruction", "block", "loop", "check", "condition_block", 
                   "shape", "point", "segment", "circle", "polygon", "groupMember", 
                   "transformable", "group", "type_definition", "num", "iterator", 
                   "canvas", "draw", "transformation", "fill", "move", "place", 
                   "rotate", "scale", "assign", "expr", "atom", "arithmetic", 
                   "logic", "neq", "flt", "itr" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    WS=37
    CR=38
    COM_SIGN=39
    PLUS=40
    MINUS=41
    MULTIPLICATION=42
    DIVISION=43
    MODULO=44
    NEG=45
    EQ=46
    GREATER=47
    LOWER=48
    GT=49
    LT=50
    TYPE=51
    COLOR=52
    DOT=53
    DIGIT=54
    NAME=55

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def canvas(self):
            return self.getTypedRuleContext(GraphlyParser.CanvasContext,0)


        def EOF(self):
            return self.getToken(GraphlyParser.EOF, 0)

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def COM_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.COM_SIGN)
            else:
                return self.getToken(GraphlyParser.COM_SIGN, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = GraphlyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 89
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 69
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 66
                            self.match(GraphlyParser.T__0) 
                        self.state = 71
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                    self.state = 72
                    self.instruction()
                    self.state = 76
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==GraphlyParser.WS:
                        self.state = 73
                        self.match(GraphlyParser.WS)
                        self.state = 78
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 80
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==GraphlyParser.COM_SIGN:
                        self.state = 79
                        self.match(GraphlyParser.COM_SIGN)


                    self.state = 83 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 82
                            self.match(GraphlyParser.T__0)

                        else:
                            raise NoViableAltException(self)
                        self.state = 85 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
             
                self.state = 91
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 92
            self.canvas()
            self.state = 96
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 93
                self.match(GraphlyParser.WS)
                self.state = 98
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.COM_SIGN:
                self.state = 99
                self.match(GraphlyParser.COM_SIGN)


            self.state = 125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__0:
                self.state = 103 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 102
                        self.match(GraphlyParser.T__0)

                    else:
                        raise NoViableAltException(self)
                    self.state = 105 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 107
                self.instruction()
                self.state = 111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 108
                    self.match(GraphlyParser.WS)
                    self.state = 113
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GraphlyParser.COM_SIGN:
                    self.state = 114
                    self.match(GraphlyParser.COM_SIGN)


                self.state = 120
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 117
                        self.match(GraphlyParser.T__0) 
                    self.state = 122
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                self.state = 127
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 128
            self.match(GraphlyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shape(self):
            return self.getTypedRuleContext(GraphlyParser.ShapeContext,0)


        def type_definition(self):
            return self.getTypedRuleContext(GraphlyParser.Type_definitionContext,0)


        def draw(self):
            return self.getTypedRuleContext(GraphlyParser.DrawContext,0)


        def transformation(self):
            return self.getTypedRuleContext(GraphlyParser.TransformationContext,0)


        def group(self):
            return self.getTypedRuleContext(GraphlyParser.GroupContext,0)


        def loop(self):
            return self.getTypedRuleContext(GraphlyParser.LoopContext,0)


        def check(self):
            return self.getTypedRuleContext(GraphlyParser.CheckContext,0)


        def assign(self):
            return self.getTypedRuleContext(GraphlyParser.AssignContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = GraphlyParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instruction)
        try:
            self.state = 144
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 130
                self.shape()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 131
                self.type_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 132
                self.draw()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 133
                self.transformation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 134
                self.group()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 135
                self.loop()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 136
                self.check()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 137
                self.assign()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 141
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 138
                        self.match(GraphlyParser.WS) 
                    self.state = 143
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = GraphlyParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 157
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 149
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 146
                            self.match(GraphlyParser.WS) 
                        self.state = 151
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                    self.state = 152
                    self.instruction()
                    self.state = 153
                    self.match(GraphlyParser.T__0) 
                self.state = 159
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.start = None # ExprContext
            self.until = None # ExprContext
            self.step = None # ExprContext

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop" ):
                listener.enterLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop" ):
                listener.exitLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = GraphlyParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 160
            self.match(GraphlyParser.T__1)
            self.state = 162 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 161
                self.match(GraphlyParser.WS)
                self.state = 164 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 166
            localctx.name = self.match(GraphlyParser.NAME)
            self.state = 168 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 167
                self.match(GraphlyParser.WS)
                self.state = 170 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 172
            self.match(GraphlyParser.T__2)
            self.state = 174 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 173
                self.match(GraphlyParser.WS)
                self.state = 176 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 178
            localctx.start = self.expr(0)
            self.state = 180 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 179
                self.match(GraphlyParser.WS)
                self.state = 182 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 184
            self.match(GraphlyParser.T__3)
            self.state = 186 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 185
                self.match(GraphlyParser.WS)
                self.state = 188 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 190
            localctx.until = self.expr(0)
            self.state = 192 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 191
                self.match(GraphlyParser.WS)
                self.state = 194 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 196
            self.match(GraphlyParser.T__4)
            self.state = 198 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 197
                self.match(GraphlyParser.WS)
                self.state = 200 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 202
            localctx.step = self.expr(0)
            self.state = 204 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 203
                self.match(GraphlyParser.WS)
                self.state = 206 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 208
            self.match(GraphlyParser.T__5)
            self.state = 209
            self.match(GraphlyParser.T__0)
            self.state = 210
            self.block()
            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 211
                self.match(GraphlyParser.WS)
                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 217
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Condition_blockContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Condition_blockContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck" ):
                listener.enterCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck" ):
                listener.exitCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheck" ):
                return visitor.visitCheck(self)
            else:
                return visitor.visitChildren(self)




    def check(self):

        localctx = GraphlyParser.CheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 219
                self.match(GraphlyParser.WS)
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 225
            self.match(GraphlyParser.T__7)
            self.state = 227 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 226
                self.match(GraphlyParser.WS)
                self.state = 229 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 231
            self.condition_block()
            self.state = 247
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 232
                    self.match(GraphlyParser.T__8)
                    self.state = 234 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 233
                        self.match(GraphlyParser.WS)
                        self.state = 236 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 238
                    self.match(GraphlyParser.T__7)
                    self.state = 240 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 239
                        self.match(GraphlyParser.WS)
                        self.state = 242 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 244
                    self.condition_block() 
                self.state = 249
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 253
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 250
                    self.match(GraphlyParser.WS) 
                self.state = 255
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.T__8:
                self.state = 256
                self.match(GraphlyParser.T__8)
                self.state = 258 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 257
                    self.match(GraphlyParser.WS)
                    self.state = 260 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 262
                self.match(GraphlyParser.T__5)
                self.state = 263
                self.match(GraphlyParser.T__0)
                self.state = 264
                self.block()


            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 267
                self.match(GraphlyParser.WS)
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 273
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_condition_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_block" ):
                listener.enterCondition_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_block" ):
                listener.exitCondition_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition_block" ):
                return visitor.visitCondition_block(self)
            else:
                return visitor.visitChildren(self)




    def condition_block(self):

        localctx = GraphlyParser.Condition_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_condition_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.expr(0)
            self.state = 277 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 276
                self.match(GraphlyParser.WS)
                self.state = 279 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 281
            self.match(GraphlyParser.T__5)
            self.state = 282
            self.match(GraphlyParser.T__0)
            self.state = 286
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 283
                    self.match(GraphlyParser.WS) 
                self.state = 288
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

            self.state = 289
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShapeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def point(self):
            return self.getTypedRuleContext(GraphlyParser.PointContext,0)


        def segment(self):
            return self.getTypedRuleContext(GraphlyParser.SegmentContext,0)


        def circle(self):
            return self.getTypedRuleContext(GraphlyParser.CircleContext,0)


        def polygon(self):
            return self.getTypedRuleContext(GraphlyParser.PolygonContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_shape

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape" ):
                listener.enterShape(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape" ):
                listener.exitShape(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShape" ):
                return visitor.visitShape(self)
            else:
                return visitor.visitChildren(self)




    def shape(self):

        localctx = GraphlyParser.ShapeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_shape)
        try:
            self.state = 295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 291
                self.point()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 292
                self.segment()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 293
                self.circle()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 294
                self.polygon()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_point

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoint" ):
                listener.enterPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoint" ):
                listener.exitPoint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPoint" ):
                return visitor.visitPoint(self)
            else:
                return visitor.visitChildren(self)




    def point(self):

        localctx = GraphlyParser.PointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_point)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 297
                self.match(GraphlyParser.WS)
                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 303
            self.match(GraphlyParser.T__9)
            self.state = 305 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 304
                self.match(GraphlyParser.WS)
                self.state = 307 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 309
            self.match(GraphlyParser.NAME)
            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 310
                self.match(GraphlyParser.WS)
                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 316
            self.match(GraphlyParser.T__10)
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 317
                self.match(GraphlyParser.WS)
                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 323
            localctx.x = self.expr(0)
            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 324
                self.match(GraphlyParser.WS)
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 330
            self.match(GraphlyParser.T__11)
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 331
                self.match(GraphlyParser.WS)
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 337
            localctx.y = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegment" ):
                listener.enterSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegment" ):
                listener.exitSegment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegment" ):
                return visitor.visitSegment(self)
            else:
                return visitor.visitChildren(self)




    def segment(self):

        localctx = GraphlyParser.SegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 339
                self.match(GraphlyParser.WS)
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 345
            self.match(GraphlyParser.T__12)
            self.state = 347 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 346
                self.match(GraphlyParser.WS)
                self.state = 349 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 351
            self.match(GraphlyParser.NAME)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 352
                self.match(GraphlyParser.WS)
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 358
            self.match(GraphlyParser.T__10)
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 359
                self.match(GraphlyParser.WS)
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 365
            self.match(GraphlyParser.NAME)
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 366
                self.match(GraphlyParser.WS)
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 372
            self.match(GraphlyParser.T__11)
            self.state = 374 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 373
                self.match(GraphlyParser.WS)
                self.state = 376 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 378
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CircleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_circle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCircle" ):
                listener.enterCircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCircle" ):
                listener.exitCircle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCircle" ):
                return visitor.visitCircle(self)
            else:
                return visitor.visitChildren(self)




    def circle(self):

        localctx = GraphlyParser.CircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_circle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 380
                self.match(GraphlyParser.WS)
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 386
            self.match(GraphlyParser.T__13)
            self.state = 388 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 387
                self.match(GraphlyParser.WS)
                self.state = 390 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 392
            self.match(GraphlyParser.NAME)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 393
                self.match(GraphlyParser.WS)
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 399
            self.match(GraphlyParser.T__10)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 400
                self.match(GraphlyParser.WS)
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 406
            self.match(GraphlyParser.NAME)
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 407
                self.match(GraphlyParser.WS)
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 413
            self.match(GraphlyParser.T__11)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 414
                self.match(GraphlyParser.WS)
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 420
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolygonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_polygon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolygon" ):
                listener.enterPolygon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolygon" ):
                listener.exitPolygon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolygon" ):
                return visitor.visitPolygon(self)
            else:
                return visitor.visitChildren(self)




    def polygon(self):

        localctx = GraphlyParser.PolygonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_polygon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 422
                self.match(GraphlyParser.WS)
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 428
            self.match(GraphlyParser.T__14)
            self.state = 430 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 429
                self.match(GraphlyParser.WS)
                self.state = 432 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 434
            self.match(GraphlyParser.NAME)
            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 435
                self.match(GraphlyParser.WS)
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 441
            self.match(GraphlyParser.T__10)
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 442
                self.match(GraphlyParser.WS)
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 448
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_groupMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupMember" ):
                listener.enterGroupMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupMember" ):
                listener.exitGroupMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupMember" ):
                return visitor.visitGroupMember(self)
            else:
                return visitor.visitChildren(self)




    def groupMember(self):

        localctx = GraphlyParser.GroupMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_groupMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 450
                self.match(GraphlyParser.WS)
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 456
            self.match(GraphlyParser.NAME)
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 457
                self.match(GraphlyParser.WS)
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 463
            self.match(GraphlyParser.T__15)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 464
                self.match(GraphlyParser.WS)
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 470
            self.expr(0)
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 471
                self.match(GraphlyParser.WS)
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 477
            self.match(GraphlyParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def groupMember(self):
            return self.getTypedRuleContext(GraphlyParser.GroupMemberContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformable" ):
                listener.enterTransformable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformable" ):
                listener.exitTransformable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformable" ):
                return visitor.visitTransformable(self)
            else:
                return visitor.visitChildren(self)




    def transformable(self):

        localctx = GraphlyParser.TransformableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_transformable)
        try:
            self.state = 481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 479
                self.match(GraphlyParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 480
                self.groupMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)

        def TYPE(self):
            return self.getToken(GraphlyParser.TYPE, 0)

        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = GraphlyParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 483
                self.match(GraphlyParser.WS)
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 489
            self.match(GraphlyParser.T__17)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 490
                self.match(GraphlyParser.WS)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 496
            self.match(GraphlyParser.LOWER)
            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 497
                self.match(GraphlyParser.WS)
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 503
            self.match(GraphlyParser.TYPE)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 504
                self.match(GraphlyParser.WS)
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 510
            self.match(GraphlyParser.GREATER)
            self.state = 512 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 511
                self.match(GraphlyParser.WS)
                self.state = 514 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 516
            self.match(GraphlyParser.NAME)
            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 517
                self.match(GraphlyParser.WS)
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 523
            self.match(GraphlyParser.T__10)
            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 524
                self.match(GraphlyParser.WS)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 530
            self.match(GraphlyParser.NAME)
            self.state = 534
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 531
                    self.match(GraphlyParser.WS) 
                self.state = 536
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__11:
                self.state = 537
                self.match(GraphlyParser.T__11)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 538
                    self.match(GraphlyParser.WS)
                    self.state = 543
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 544
                self.match(GraphlyParser.NAME)
                self.state = 548
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 545
                        self.match(GraphlyParser.WS) 
                    self.state = 550
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num(self):
            return self.getTypedRuleContext(GraphlyParser.NumContext,0)


        def iterator(self):
            return self.getTypedRuleContext(GraphlyParser.IteratorContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_definition" ):
                listener.enterType_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_definition" ):
                listener.exitType_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_definition" ):
                return visitor.visitType_definition(self)
            else:
                return visitor.visitChildren(self)




    def type_definition(self):

        localctx = GraphlyParser.Type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_type_definition)
        try:
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 556
                self.num()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 557
                self.iterator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_num

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum" ):
                listener.enterNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum" ):
                listener.exitNum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum" ):
                return visitor.visitNum(self)
            else:
                return visitor.visitChildren(self)




    def num(self):

        localctx = GraphlyParser.NumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_num)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 560
                self.match(GraphlyParser.WS)
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 566
            self.match(GraphlyParser.T__18)
            self.state = 568 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 567
                self.match(GraphlyParser.WS)
                self.state = 570 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 572
            self.match(GraphlyParser.NAME)
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 573
                self.match(GraphlyParser.WS)
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 579
            self.match(GraphlyParser.T__10)
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 580
                self.match(GraphlyParser.WS)
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 586
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterator" ):
                listener.enterIterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterator" ):
                listener.exitIterator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterator" ):
                return visitor.visitIterator(self)
            else:
                return visitor.visitChildren(self)




    def iterator(self):

        localctx = GraphlyParser.IteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 588
                self.match(GraphlyParser.WS)
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 594
            self.match(GraphlyParser.T__19)
            self.state = 596 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 595
                self.match(GraphlyParser.WS)
                self.state = 598 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 600
            self.match(GraphlyParser.NAME)
            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 601
                self.match(GraphlyParser.WS)
                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 607
            self.match(GraphlyParser.T__10)
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 608
                self.match(GraphlyParser.WS)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 614
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CanvasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_canvas

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCanvas" ):
                listener.enterCanvas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCanvas" ):
                listener.exitCanvas(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCanvas" ):
                return visitor.visitCanvas(self)
            else:
                return visitor.visitChildren(self)




    def canvas(self):

        localctx = GraphlyParser.CanvasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_canvas)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 616
                self.match(GraphlyParser.WS)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 622
            self.match(GraphlyParser.T__20)
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 623
                self.match(GraphlyParser.WS)
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 629
            self.match(GraphlyParser.T__10)
            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 630
                self.match(GraphlyParser.WS)
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 636
            localctx.x = self.expr(0)
            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 637
                self.match(GraphlyParser.WS)
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 643
            self.match(GraphlyParser.T__11)
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 644
                self.match(GraphlyParser.WS)
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 650
            localctx.y = self.expr(0)
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 651
                self.match(GraphlyParser.WS)
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 657
            self.match(GraphlyParser.T__11)
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 658
                self.match(GraphlyParser.WS)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 664
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DrawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_draw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDraw" ):
                listener.enterDraw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDraw" ):
                listener.exitDraw(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDraw" ):
                return visitor.visitDraw(self)
            else:
                return visitor.visitChildren(self)




    def draw(self):

        localctx = GraphlyParser.DrawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_draw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 666
                self.match(GraphlyParser.WS)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 672
            self.match(GraphlyParser.T__21)
            self.state = 674 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 673
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 676 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 678
            localctx.arg = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fill(self):
            return self.getTypedRuleContext(GraphlyParser.FillContext,0)


        def move(self):
            return self.getTypedRuleContext(GraphlyParser.MoveContext,0)


        def place(self):
            return self.getTypedRuleContext(GraphlyParser.PlaceContext,0)


        def rotate(self):
            return self.getTypedRuleContext(GraphlyParser.RotateContext,0)


        def scale(self):
            return self.getTypedRuleContext(GraphlyParser.ScaleContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformation" ):
                listener.enterTransformation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformation" ):
                listener.exitTransformation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformation" ):
                return visitor.visitTransformation(self)
            else:
                return visitor.visitChildren(self)




    def transformation(self):

        localctx = GraphlyParser.TransformationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_transformation)
        try:
            self.state = 685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 680
                self.fill()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 681
                self.move()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 682
                self.place()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 683
                self.rotate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 684
                self.scale()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FillContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_fill

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFill" ):
                listener.enterFill(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFill" ):
                listener.exitFill(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFill" ):
                return visitor.visitFill(self)
            else:
                return visitor.visitChildren(self)




    def fill(self):

        localctx = GraphlyParser.FillContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fill)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 687
                self.match(GraphlyParser.WS)
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 693
            self.match(GraphlyParser.T__22)
            self.state = 695 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 694
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 697 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

            self.state = 699
            localctx.arg = self.transformable()
            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 700
                self.match(GraphlyParser.WS)
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 706
            self.match(GraphlyParser.T__10)
            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 707
                self.match(GraphlyParser.WS)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 713
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext
            self.dx = None # ExprContext
            self.dy = None # ExprContext

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMove" ):
                return visitor.visitMove(self)
            else:
                return visitor.visitChildren(self)




    def move(self):

        localctx = GraphlyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 715
                self.match(GraphlyParser.WS)
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 721
            self.match(GraphlyParser.T__23)
            self.state = 723 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 722
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 725 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

            self.state = 727
            localctx.arg = self.transformable()
            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 728
                self.match(GraphlyParser.WS)
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 734
            self.match(GraphlyParser.T__10)
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 735
                self.match(GraphlyParser.WS)
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 741
            localctx.dx = self.expr(0)
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 742
                self.match(GraphlyParser.WS)
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 748
            self.match(GraphlyParser.T__11)
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 749
                self.match(GraphlyParser.WS)
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 755
            localctx.dy = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_place

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlace" ):
                listener.enterPlace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlace" ):
                listener.exitPlace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = GraphlyParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_place)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 757
                self.match(GraphlyParser.WS)
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 763
            self.match(GraphlyParser.T__24)
            self.state = 765 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 764
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 767 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

            self.state = 769
            localctx.arg1 = self.transformable()
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 770
                self.match(GraphlyParser.WS)
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 776
            self.match(GraphlyParser.T__10)
            self.state = 780
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 777
                    self.match(GraphlyParser.WS) 
                self.state = 782
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

            self.state = 783
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RotateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.angle = None # ExprContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_rotate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRotate" ):
                listener.enterRotate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRotate" ):
                listener.exitRotate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRotate" ):
                return visitor.visitRotate(self)
            else:
                return visitor.visitChildren(self)




    def rotate(self):

        localctx = GraphlyParser.RotateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_rotate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 785
                self.match(GraphlyParser.WS)
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 791
            self.match(GraphlyParser.T__25)
            self.state = 793 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 792
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 795 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 797
            localctx.arg1 = self.transformable()
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 798
                self.match(GraphlyParser.WS)
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 804
            self.match(GraphlyParser.T__10)
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 805
                self.match(GraphlyParser.WS)
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 811
            localctx.angle = self.expr(0)
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 812
                self.match(GraphlyParser.WS)
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 818
            self.match(GraphlyParser.T__11)
            self.state = 822
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 819
                    self.match(GraphlyParser.WS) 
                self.state = 824
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

            self.state = 825
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.k = None # ExprContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScale" ):
                listener.enterScale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScale" ):
                listener.exitScale(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScale" ):
                return visitor.visitScale(self)
            else:
                return visitor.visitChildren(self)




    def scale(self):

        localctx = GraphlyParser.ScaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_scale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 827
                self.match(GraphlyParser.WS)
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 833
            self.match(GraphlyParser.T__26)
            self.state = 835 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 834
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 837 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

            self.state = 839
            localctx.arg1 = self.transformable()
            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 840
                self.match(GraphlyParser.WS)
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 846
            self.match(GraphlyParser.T__10)
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 847
                self.match(GraphlyParser.WS)
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 853
            localctx.k = self.expr(0)
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 854
                self.match(GraphlyParser.WS)
                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 860
            self.match(GraphlyParser.T__11)
            self.state = 864
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 861
                    self.match(GraphlyParser.WS) 
                self.state = 866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

            self.state = 867
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_assign

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NumAssignContext(AssignContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AssignContext
            super().__init__(parser)
            self.arg1 = None # TransformableContext
            self.arg2 = None # ExprContext
            self.copyFrom(ctx)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumAssign" ):
                listener.enterNumAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumAssign" ):
                listener.exitNumAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumAssign" ):
                return visitor.visitNumAssign(self)
            else:
                return visitor.visitChildren(self)


    class CopyAssignContext(AssignContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AssignContext
            super().__init__(parser)
            self.arg1 = None # TransformableContext
            self.arg2 = None # TransformableContext
            self.copyFrom(ctx)

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyAssign" ):
                listener.enterCopyAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyAssign" ):
                listener.exitCopyAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyAssign" ):
                return visitor.visitCopyAssign(self)
            else:
                return visitor.visitChildren(self)



    def assign(self):

        localctx = GraphlyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.CopyAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 869
                    self.match(GraphlyParser.WS)
                    self.state = 874
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 875
                self.match(GraphlyParser.T__27)
                self.state = 877 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 876
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 879 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

                self.state = 881
                localctx.arg1 = self.transformable()
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 882
                    self.match(GraphlyParser.WS)
                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 888
                self.match(GraphlyParser.T__10)
                self.state = 892
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 889
                        self.match(GraphlyParser.WS) 
                    self.state = 894
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

                self.state = 895
                localctx.arg2 = self.transformable()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.NumAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 897
                    self.match(GraphlyParser.WS)
                    self.state = 902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 903
                self.match(GraphlyParser.T__27)
                self.state = 905 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 904
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 907 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                self.state = 909
                localctx.arg1 = self.transformable()
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 910
                    self.match(GraphlyParser.WS)
                    self.state = 915
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 916
                self.match(GraphlyParser.T__10)
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 917
                    self.match(GraphlyParser.WS)
                    self.state = 922
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 923
                localctx.arg2 = self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MinusOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)
        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinusOpExpr" ):
                listener.enterMinusOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinusOpExpr" ):
                listener.exitMinusOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinusOpExpr" ):
                return visitor.visitMinusOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class RoundingOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoundingOpExpr" ):
                listener.enterRoundingOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoundingOpExpr" ):
                listener.exitRoundingOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoundingOpExpr" ):
                return visitor.visitRoundingOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class BooleanOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def LT(self):
            return self.getToken(GraphlyParser.LT, 0)
        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)
        def GT(self):
            return self.getToken(GraphlyParser.GT, 0)
        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)
        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOpExpr" ):
                listener.enterBooleanOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOpExpr" ):
                listener.exitBooleanOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOpExpr" ):
                return visitor.visitBooleanOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def MULTIPLICATION(self):
            return self.getToken(GraphlyParser.MULTIPLICATION, 0)
        def DIVISION(self):
            return self.getToken(GraphlyParser.DIVISION, 0)
        def MODULO(self):
            return self.getToken(GraphlyParser.MODULO, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)
        def PLUS(self):
            return self.getToken(GraphlyParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOpExpr" ):
                listener.enterArithmeticOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOpExpr" ):
                listener.exitArithmeticOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOpExpr" ):
                return visitor.visitArithmeticOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class NegationOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEG(self):
            return self.getToken(GraphlyParser.NEG, 0)
        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegationOpExpr" ):
                listener.enterNegationOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegationOpExpr" ):
                listener.exitNegationOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNegationOpExpr" ):
                return visitor.visitNegationOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class AtomExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(GraphlyParser.AtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomExpr" ):
                listener.enterAtomExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomExpr" ):
                listener.exitAtomExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomExpr" ):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpr" ):
                listener.enterParenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpr" ):
                listener.exitParenExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpr" ):
                return visitor.visitParenExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GraphlyParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.T__28]:
                localctx = GraphlyParser.ParenExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 928
                self.match(GraphlyParser.T__28)
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 929
                    self.match(GraphlyParser.WS)
                    self.state = 934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 935
                self.expr(0)
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 936
                    self.match(GraphlyParser.WS)
                    self.state = 941
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 942
                self.match(GraphlyParser.T__29)
                pass
            elif token in [GraphlyParser.T__30, GraphlyParser.T__31, GraphlyParser.T__32]:
                localctx = GraphlyParser.RoundingOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 944
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__30) | (1 << GraphlyParser.T__31) | (1 << GraphlyParser.T__32))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 945
                    self.match(GraphlyParser.WS)
                    self.state = 950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 951
                self.expr(9)
                pass
            elif token in [GraphlyParser.MINUS]:
                localctx = GraphlyParser.MinusOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 952
                self.match(GraphlyParser.MINUS)
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 953
                    self.match(GraphlyParser.WS)
                    self.state = 958
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 959
                self.expr(8)
                pass
            elif token in [GraphlyParser.NEG]:
                localctx = GraphlyParser.NegationOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 960
                self.match(GraphlyParser.NEG)
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 961
                    self.match(GraphlyParser.WS)
                    self.state = 966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 967
                self.expr(4)
                pass
            elif token in [GraphlyParser.DOT, GraphlyParser.DIGIT, GraphlyParser.NAME]:
                localctx = GraphlyParser.AtomExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 968
                self.atom()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1048
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1046
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                    if la_ == 1:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 971
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 975
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 972
                            self.match(GraphlyParser.WS)
                            self.state = 977
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 978
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 982
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 979
                            self.match(GraphlyParser.WS)
                            self.state = 984
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 985
                        localctx.right = self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 986
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 990
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 987
                            self.match(GraphlyParser.WS)
                            self.state = 992
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 993
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==GraphlyParser.PLUS or _la==GraphlyParser.MINUS):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 997
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 994
                            self.match(GraphlyParser.WS)
                            self.state = 999
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1000
                        localctx.right = self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1001
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1005
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1002
                            self.match(GraphlyParser.WS)
                            self.state = 1007
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1008
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__33) | (1 << GraphlyParser.EQ) | (1 << GraphlyParser.GREATER) | (1 << GraphlyParser.LOWER) | (1 << GraphlyParser.GT) | (1 << GraphlyParser.LT))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1012
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1009
                            self.match(GraphlyParser.WS)
                            self.state = 1014
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1015
                        localctx.right = self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1016
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1020
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1017
                            self.match(GraphlyParser.WS)
                            self.state = 1022
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1023
                        localctx.op = self.match(GraphlyParser.T__34)
                        self.state = 1027
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1024
                            self.match(GraphlyParser.WS)
                            self.state = 1029
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1030
                        localctx.right = self.expr(4)
                        pass

                    elif la_ == 5:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1031
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1035
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1032
                            self.match(GraphlyParser.WS)
                            self.state = 1037
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1038
                        localctx.op = self.match(GraphlyParser.T__35)
                        self.state = 1042
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1039
                            self.match(GraphlyParser.WS)
                            self.state = 1044
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1045
                        localctx.right = self.expr(3)
                        pass

             
                self.state = 1050
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_atom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class VarAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarAtom" ):
                listener.enterVarAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarAtom" ):
                listener.exitVarAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarAtom" ):
                return visitor.visitVarAtom(self)
            else:
                return visitor.visitChildren(self)


    class IntAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def itr(self):
            return self.getTypedRuleContext(GraphlyParser.ItrContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntAtom" ):
                listener.enterIntAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntAtom" ):
                listener.exitIntAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntAtom" ):
                return visitor.visitIntAtom(self)
            else:
                return visitor.visitChildren(self)


    class FltAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def flt(self):
            return self.getTypedRuleContext(GraphlyParser.FltContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFltAtom" ):
                listener.enterFltAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFltAtom" ):
                listener.exitFltAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFltAtom" ):
                return visitor.visitFltAtom(self)
            else:
                return visitor.visitChildren(self)



    def atom(self):

        localctx = GraphlyParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_atom)
        try:
            self.state = 1054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.IntAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1051
                self.itr()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.FltAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1052
                self.flt()
                pass

            elif la_ == 3:
                localctx = GraphlyParser.VarAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1053
                self.match(GraphlyParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(GraphlyParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)

        def MULTIPLICATION(self):
            return self.getToken(GraphlyParser.MULTIPLICATION, 0)

        def DIVISION(self):
            return self.getToken(GraphlyParser.DIVISION, 0)

        def MODULO(self):
            return self.getToken(GraphlyParser.MODULO, 0)

        def getRuleIndex(self):
            return GraphlyParser.RULE_arithmetic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic" ):
                listener.enterArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic" ):
                listener.exitArithmetic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmetic" ):
                return visitor.visitArithmetic(self)
            else:
                return visitor.visitChildren(self)




    def arithmetic(self):

        localctx = GraphlyParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_arithmetic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.PLUS) | (1 << GraphlyParser.MINUS) | (1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)

        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)

        def GT(self):
            return self.getToken(GraphlyParser.GT, 0)

        def LT(self):
            return self.getToken(GraphlyParser.LT, 0)

        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)

        def neq(self):
            return self.getTypedRuleContext(GraphlyParser.NeqContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_logic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic" ):
                listener.enterLogic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic" ):
                listener.exitLogic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogic" ):
                return visitor.visitLogic(self)
            else:
                return visitor.visitChildren(self)




    def logic(self):

        localctx = GraphlyParser.LogicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_logic)
        try:
            self.state = 1064
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.GREATER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1058
                self.match(GraphlyParser.GREATER)
                pass
            elif token in [GraphlyParser.LOWER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1059
                self.match(GraphlyParser.LOWER)
                pass
            elif token in [GraphlyParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1060
                self.match(GraphlyParser.GT)
                pass
            elif token in [GraphlyParser.LT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1061
                self.match(GraphlyParser.LT)
                pass
            elif token in [GraphlyParser.EQ]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1062
                self.match(GraphlyParser.EQ)
                pass
            elif token in [GraphlyParser.NEG]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1063
                self.neq()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEG(self):
            return self.getToken(GraphlyParser.NEG, 0)

        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)

        def getRuleIndex(self):
            return GraphlyParser.RULE_neq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNeq" ):
                listener.enterNeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNeq" ):
                listener.exitNeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNeq" ):
                return visitor.visitNeq(self)
            else:
                return visitor.visitChildren(self)




    def neq(self):

        localctx = GraphlyParser.NeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_neq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.match(GraphlyParser.NEG)
            self.state = 1067
            self.match(GraphlyParser.EQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FltContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(GraphlyParser.DOT, 0)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.DIGIT)
            else:
                return self.getToken(GraphlyParser.DIGIT, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_flt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlt" ):
                listener.enterFlt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlt" ):
                listener.exitFlt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlt" ):
                return visitor.visitFlt(self)
            else:
                return visitor.visitChildren(self)




    def flt(self):

        localctx = GraphlyParser.FltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_flt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.state = 1072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.DIGIT:
                    self.state = 1069
                    self.match(GraphlyParser.DIGIT)
                    self.state = 1074
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1075
                self.match(GraphlyParser.DOT)


            self.state = 1079 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1078
                    self.match(GraphlyParser.DIGIT)

                else:
                    raise NoViableAltException(self)
                self.state = 1081 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.DIGIT)
            else:
                return self.getToken(GraphlyParser.DIGIT, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_itr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItr" ):
                listener.enterItr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItr" ):
                listener.exitItr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItr" ):
                return visitor.visitItr(self)
            else:
                return visitor.visitChildren(self)




    def itr(self):

        localctx = GraphlyParser.ItrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_itr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1083
                    self.match(GraphlyParser.DIGIT)

                else:
                    raise NoViableAltException(self)
                self.state = 1086 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[26] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         




