# Generated from Graphly.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3<")
        buf.write("\u0480\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\3\2\7\2J\n")
        buf.write("\2\f\2\16\2M\13\2\3\2\3\2\7\2Q\n\2\f\2\16\2T\13\2\3\2")
        buf.write("\5\2W\n\2\3\2\6\2Z\n\2\r\2\16\2[\7\2^\n\2\f\2\16\2a\13")
        buf.write("\2\3\2\3\2\7\2e\n\2\f\2\16\2h\13\2\3\2\5\2k\n\2\3\2\6")
        buf.write("\2n\n\2\r\2\16\2o\3\2\3\2\7\2t\n\2\f\2\16\2w\13\2\3\2")
        buf.write("\5\2z\n\2\3\2\7\2}\n\2\f\2\16\2\u0080\13\2\7\2\u0082\n")
        buf.write("\2\f\2\16\2\u0085\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\7\3\u0094\n\3\f\3\16\3\u0097\13\3")
        buf.write("\5\3\u0099\n\3\3\4\7\4\u009c\n\4\f\4\16\4\u009f\13\4\3")
        buf.write("\4\3\4\7\4\u00a3\n\4\f\4\16\4\u00a6\13\4\3\4\3\4\7\4\u00aa")
        buf.write("\n\4\f\4\16\4\u00ad\13\4\3\5\3\5\6\5\u00b1\n\5\r\5\16")
        buf.write("\5\u00b2\3\5\3\5\6\5\u00b7\n\5\r\5\16\5\u00b8\3\5\3\5")
        buf.write("\6\5\u00bd\n\5\r\5\16\5\u00be\3\5\3\5\6\5\u00c3\n\5\r")
        buf.write("\5\16\5\u00c4\3\5\3\5\6\5\u00c9\n\5\r\5\16\5\u00ca\3\5")
        buf.write("\3\5\6\5\u00cf\n\5\r\5\16\5\u00d0\3\5\3\5\6\5\u00d5\n")
        buf.write("\5\r\5\16\5\u00d6\3\5\3\5\6\5\u00db\n\5\r\5\16\5\u00dc")
        buf.write("\3\5\3\5\7\5\u00e1\n\5\f\5\16\5\u00e4\13\5\3\5\3\5\3\5")
        buf.write("\7\5\u00e9\n\5\f\5\16\5\u00ec\13\5\3\5\3\5\3\6\7\6\u00f1")
        buf.write("\n\6\f\6\16\6\u00f4\13\6\3\6\3\6\6\6\u00f8\n\6\r\6\16")
        buf.write("\6\u00f9\3\6\3\6\3\6\6\6\u00ff\n\6\r\6\16\6\u0100\3\6")
        buf.write("\3\6\6\6\u0105\n\6\r\6\16\6\u0106\3\6\7\6\u010a\n\6\f")
        buf.write("\6\16\6\u010d\13\6\3\6\7\6\u0110\n\6\f\6\16\6\u0113\13")
        buf.write("\6\3\6\3\6\6\6\u0117\n\6\r\6\16\6\u0118\3\6\3\6\3\6\5")
        buf.write("\6\u011e\n\6\3\6\7\6\u0121\n\6\f\6\16\6\u0124\13\6\3\6")
        buf.write("\3\6\3\7\3\7\6\7\u012a\n\7\r\7\16\7\u012b\3\7\3\7\3\7")
        buf.write("\7\7\u0131\n\7\f\7\16\7\u0134\13\7\3\7\3\7\3\b\3\b\3\b")
        buf.write("\3\b\5\b\u013c\n\b\3\t\7\t\u013f\n\t\f\t\16\t\u0142\13")
        buf.write("\t\3\t\3\t\6\t\u0146\n\t\r\t\16\t\u0147\3\t\3\t\7\t\u014c")
        buf.write("\n\t\f\t\16\t\u014f\13\t\3\t\3\t\7\t\u0153\n\t\f\t\16")
        buf.write("\t\u0156\13\t\3\t\3\t\7\t\u015a\n\t\f\t\16\t\u015d\13")
        buf.write("\t\3\t\3\t\7\t\u0161\n\t\f\t\16\t\u0164\13\t\3\t\3\t\3")
        buf.write("\n\7\n\u0169\n\n\f\n\16\n\u016c\13\n\3\n\3\n\6\n\u0170")
        buf.write("\n\n\r\n\16\n\u0171\3\n\3\n\7\n\u0176\n\n\f\n\16\n\u0179")
        buf.write("\13\n\3\n\3\n\7\n\u017d\n\n\f\n\16\n\u0180\13\n\3\n\3")
        buf.write("\n\7\n\u0184\n\n\f\n\16\n\u0187\13\n\3\n\3\n\6\n\u018b")
        buf.write("\n\n\r\n\16\n\u018c\3\n\3\n\3\13\7\13\u0192\n\13\f\13")
        buf.write("\16\13\u0195\13\13\3\13\3\13\6\13\u0199\n\13\r\13\16\13")
        buf.write("\u019a\3\13\3\13\7\13\u019f\n\13\f\13\16\13\u01a2\13\13")
        buf.write("\3\13\3\13\7\13\u01a6\n\13\f\13\16\13\u01a9\13\13\3\13")
        buf.write("\3\13\7\13\u01ad\n\13\f\13\16\13\u01b0\13\13\3\13\3\13")
        buf.write("\7\13\u01b4\n\13\f\13\16\13\u01b7\13\13\3\13\3\13\3\f")
        buf.write("\7\f\u01bc\n\f\f\f\16\f\u01bf\13\f\3\f\3\f\6\f\u01c3\n")
        buf.write("\f\r\f\16\f\u01c4\3\f\3\f\7\f\u01c9\n\f\f\f\16\f\u01cc")
        buf.write("\13\f\3\f\3\f\7\f\u01d0\n\f\f\f\16\f\u01d3\13\f\3\f\3")
        buf.write("\f\3\r\7\r\u01d8\n\r\f\r\16\r\u01db\13\r\3\r\3\r\7\r\u01df")
        buf.write("\n\r\f\r\16\r\u01e2\13\r\3\r\3\r\7\r\u01e6\n\r\f\r\16")
        buf.write("\r\u01e9\13\r\3\r\3\r\7\r\u01ed\n\r\f\r\16\r\u01f0\13")
        buf.write("\r\3\r\3\r\3\16\3\16\5\16\u01f6\n\16\3\17\7\17\u01f9\n")
        buf.write("\17\f\17\16\17\u01fc\13\17\3\17\3\17\7\17\u0200\n\17\f")
        buf.write("\17\16\17\u0203\13\17\3\17\3\17\7\17\u0207\n\17\f\17\16")
        buf.write("\17\u020a\13\17\3\17\3\17\7\17\u020e\n\17\f\17\16\17\u0211")
        buf.write("\13\17\3\17\3\17\6\17\u0215\n\17\r\17\16\17\u0216\3\17")
        buf.write("\3\17\7\17\u021b\n\17\f\17\16\17\u021e\13\17\3\17\3\17")
        buf.write("\7\17\u0222\n\17\f\17\16\17\u0225\13\17\3\17\3\17\7\17")
        buf.write("\u0229\n\17\f\17\16\17\u022c\13\17\3\17\3\17\7\17\u0230")
        buf.write("\n\17\f\17\16\17\u0233\13\17\3\17\3\17\7\17\u0237\n\17")
        buf.write("\f\17\16\17\u023a\13\17\7\17\u023c\n\17\f\17\16\17\u023f")
        buf.write("\13\17\3\20\3\20\5\20\u0243\n\20\3\21\7\21\u0246\n\21")
        buf.write("\f\21\16\21\u0249\13\21\3\21\3\21\6\21\u024d\n\21\r\21")
        buf.write("\16\21\u024e\3\21\3\21\7\21\u0253\n\21\f\21\16\21\u0256")
        buf.write("\13\21\3\21\3\21\7\21\u025a\n\21\f\21\16\21\u025d\13\21")
        buf.write("\3\21\3\21\3\22\7\22\u0262\n\22\f\22\16\22\u0265\13\22")
        buf.write("\3\22\3\22\6\22\u0269\n\22\r\22\16\22\u026a\3\22\3\22")
        buf.write("\7\22\u026f\n\22\f\22\16\22\u0272\13\22\3\22\3\22\7\22")
        buf.write("\u0276\n\22\f\22\16\22\u0279\13\22\3\22\3\22\3\23\7\23")
        buf.write("\u027e\n\23\f\23\16\23\u0281\13\23\3\23\3\23\7\23\u0285")
        buf.write("\n\23\f\23\16\23\u0288\13\23\3\23\3\23\7\23\u028c\n\23")
        buf.write("\f\23\16\23\u028f\13\23\3\23\3\23\7\23\u0293\n\23\f\23")
        buf.write("\16\23\u0296\13\23\3\23\3\23\7\23\u029a\n\23\f\23\16\23")
        buf.write("\u029d\13\23\3\23\3\23\7\23\u02a1\n\23\f\23\16\23\u02a4")
        buf.write("\13\23\3\23\3\23\7\23\u02a8\n\23\f\23\16\23\u02ab\13\23")
        buf.write("\3\23\3\23\3\24\7\24\u02b0\n\24\f\24\16\24\u02b3\13\24")
        buf.write("\3\24\3\24\6\24\u02b7\n\24\r\24\16\24\u02b8\3\24\3\24")
        buf.write("\3\25\7\25\u02be\n\25\f\25\16\25\u02c1\13\25\3\25\3\25")
        buf.write("\6\25\u02c5\n\25\r\25\16\25\u02c6\3\25\3\25\7\25\u02cb")
        buf.write("\n\25\f\25\16\25\u02ce\13\25\3\25\3\25\6\25\u02d2\n\25")
        buf.write("\r\25\16\25\u02d3\3\25\3\25\7\25\u02d8\n\25\f\25\16\25")
        buf.write("\u02db\13\25\3\25\3\25\6\25\u02df\n\25\r\25\16\25\u02e0")
        buf.write("\3\25\5\25\u02e4\n\25\3\26\3\26\3\27\3\27\3\27\3\27\3")
        buf.write("\27\5\27\u02ed\n\27\3\30\7\30\u02f0\n\30\f\30\16\30\u02f3")
        buf.write("\13\30\3\30\3\30\6\30\u02f7\n\30\r\30\16\30\u02f8\3\30")
        buf.write("\3\30\7\30\u02fd\n\30\f\30\16\30\u0300\13\30\3\30\3\30")
        buf.write("\7\30\u0304\n\30\f\30\16\30\u0307\13\30\3\30\3\30\3\31")
        buf.write("\7\31\u030c\n\31\f\31\16\31\u030f\13\31\3\31\3\31\6\31")
        buf.write("\u0313\n\31\r\31\16\31\u0314\3\31\3\31\7\31\u0319\n\31")
        buf.write("\f\31\16\31\u031c\13\31\3\31\3\31\7\31\u0320\n\31\f\31")
        buf.write("\16\31\u0323\13\31\3\31\3\31\7\31\u0327\n\31\f\31\16\31")
        buf.write("\u032a\13\31\3\31\3\31\7\31\u032e\n\31\f\31\16\31\u0331")
        buf.write("\13\31\3\31\3\31\3\32\7\32\u0336\n\32\f\32\16\32\u0339")
        buf.write("\13\32\3\32\3\32\6\32\u033d\n\32\r\32\16\32\u033e\3\32")
        buf.write("\3\32\7\32\u0343\n\32\f\32\16\32\u0346\13\32\3\32\3\32")
        buf.write("\7\32\u034a\n\32\f\32\16\32\u034d\13\32\3\32\3\32\3\33")
        buf.write("\7\33\u0352\n\33\f\33\16\33\u0355\13\33\3\33\3\33\6\33")
        buf.write("\u0359\n\33\r\33\16\33\u035a\3\33\3\33\7\33\u035f\n\33")
        buf.write("\f\33\16\33\u0362\13\33\3\33\3\33\7\33\u0366\n\33\f\33")
        buf.write("\16\33\u0369\13\33\3\33\3\33\7\33\u036d\n\33\f\33\16\33")
        buf.write("\u0370\13\33\3\33\3\33\7\33\u0374\n\33\f\33\16\33\u0377")
        buf.write("\13\33\3\33\3\33\3\34\7\34\u037c\n\34\f\34\16\34\u037f")
        buf.write("\13\34\3\34\3\34\6\34\u0383\n\34\r\34\16\34\u0384\3\34")
        buf.write("\3\34\7\34\u0389\n\34\f\34\16\34\u038c\13\34\3\34\3\34")
        buf.write("\7\34\u0390\n\34\f\34\16\34\u0393\13\34\3\34\3\34\7\34")
        buf.write("\u0397\n\34\f\34\16\34\u039a\13\34\3\34\3\34\7\34\u039e")
        buf.write("\n\34\f\34\16\34\u03a1\13\34\3\34\3\34\3\35\7\35\u03a6")
        buf.write("\n\35\f\35\16\35\u03a9\13\35\3\35\3\35\6\35\u03ad\n\35")
        buf.write("\r\35\16\35\u03ae\3\35\3\35\7\35\u03b3\n\35\f\35\16\35")
        buf.write("\u03b6\13\35\3\35\3\35\7\35\u03ba\n\35\f\35\16\35\u03bd")
        buf.write("\13\35\3\35\3\35\3\35\7\35\u03c2\n\35\f\35\16\35\u03c5")
        buf.write("\13\35\3\35\3\35\6\35\u03c9\n\35\r\35\16\35\u03ca\3\35")
        buf.write("\3\35\7\35\u03cf\n\35\f\35\16\35\u03d2\13\35\3\35\3\35")
        buf.write("\7\35\u03d6\n\35\f\35\16\35\u03d9\13\35\3\35\3\35\5\35")
        buf.write("\u03dd\n\35\3\36\3\36\3\36\7\36\u03e2\n\36\f\36\16\36")
        buf.write("\u03e5\13\36\3\36\3\36\7\36\u03e9\n\36\f\36\16\36\u03ec")
        buf.write("\13\36\3\36\3\36\3\36\3\36\7\36\u03f2\n\36\f\36\16\36")
        buf.write("\u03f5\13\36\3\36\3\36\3\36\7\36\u03fa\n\36\f\36\16\36")
        buf.write("\u03fd\13\36\3\36\3\36\3\36\7\36\u0402\n\36\f\36\16\36")
        buf.write("\u0405\13\36\3\36\3\36\5\36\u0409\n\36\3\36\3\36\7\36")
        buf.write("\u040d\n\36\f\36\16\36\u0410\13\36\3\36\3\36\7\36\u0414")
        buf.write("\n\36\f\36\16\36\u0417\13\36\3\36\3\36\3\36\7\36\u041c")
        buf.write("\n\36\f\36\16\36\u041f\13\36\3\36\3\36\7\36\u0423\n\36")
        buf.write("\f\36\16\36\u0426\13\36\3\36\3\36\3\36\7\36\u042b\n\36")
        buf.write("\f\36\16\36\u042e\13\36\3\36\3\36\7\36\u0432\n\36\f\36")
        buf.write("\16\36\u0435\13\36\3\36\3\36\3\36\7\36\u043a\n\36\f\36")
        buf.write("\16\36\u043d\13\36\3\36\3\36\7\36\u0441\n\36\f\36\16\36")
        buf.write("\u0444\13\36\3\36\3\36\3\36\7\36\u0449\n\36\f\36\16\36")
        buf.write("\u044c\13\36\3\36\3\36\7\36\u0450\n\36\f\36\16\36\u0453")
        buf.write("\13\36\3\36\7\36\u0456\n\36\f\36\16\36\u0459\13\36\3\37")
        buf.write("\3\37\3\37\5\37\u045e\n\37\3 \3 \3!\3!\3!\3!\3!\3!\5!")
        buf.write("\u0468\n!\3\"\3\"\3\"\3#\7#\u046e\n#\f#\16#\u0471\13#")
        buf.write("\3#\5#\u0474\n#\3#\6#\u0477\n#\r#\16#\u0478\3$\6$\u047c")
        buf.write("\n$\r$\16$\u047d\3$\2\3:%\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF\2\7\3\2#%\3\2.")
        buf.write("\60\3\2,-\4\2&&\62\66\3\2,\60\2\u0518\2_\3\2\2\2\4\u0098")
        buf.write("\3\2\2\2\6\u00ab\3\2\2\2\b\u00ae\3\2\2\2\n\u00f2\3\2\2")
        buf.write("\2\f\u0127\3\2\2\2\16\u013b\3\2\2\2\20\u0140\3\2\2\2\22")
        buf.write("\u016a\3\2\2\2\24\u0193\3\2\2\2\26\u01bd\3\2\2\2\30\u01d9")
        buf.write("\3\2\2\2\32\u01f5\3\2\2\2\34\u01fa\3\2\2\2\36\u0242\3")
        buf.write("\2\2\2 \u0247\3\2\2\2\"\u0263\3\2\2\2$\u027f\3\2\2\2&")
        buf.write("\u02b1\3\2\2\2(\u02e3\3\2\2\2*\u02e5\3\2\2\2,\u02ec\3")
        buf.write("\2\2\2.\u02f1\3\2\2\2\60\u030d\3\2\2\2\62\u0337\3\2\2")
        buf.write("\2\64\u0353\3\2\2\2\66\u037d\3\2\2\28\u03dc\3\2\2\2:\u0408")
        buf.write("\3\2\2\2<\u045d\3\2\2\2>\u045f\3\2\2\2@\u0467\3\2\2\2")
        buf.write("B\u0469\3\2\2\2D\u0473\3\2\2\2F\u047b\3\2\2\2HJ\7\3\2")
        buf.write("\2IH\3\2\2\2JM\3\2\2\2KI\3\2\2\2KL\3\2\2\2LN\3\2\2\2M")
        buf.write("K\3\2\2\2NR\5\4\3\2OQ\7)\2\2PO\3\2\2\2QT\3\2\2\2RP\3\2")
        buf.write("\2\2RS\3\2\2\2SV\3\2\2\2TR\3\2\2\2UW\7+\2\2VU\3\2\2\2")
        buf.write("VW\3\2\2\2WY\3\2\2\2XZ\7\3\2\2YX\3\2\2\2Z[\3\2\2\2[Y\3")
        buf.write("\2\2\2[\\\3\2\2\2\\^\3\2\2\2]K\3\2\2\2^a\3\2\2\2_]\3\2")
        buf.write("\2\2_`\3\2\2\2`b\3\2\2\2a_\3\2\2\2bf\5$\23\2ce\7)\2\2")
        buf.write("dc\3\2\2\2eh\3\2\2\2fd\3\2\2\2fg\3\2\2\2gj\3\2\2\2hf\3")
        buf.write("\2\2\2ik\7+\2\2ji\3\2\2\2jk\3\2\2\2k\u0083\3\2\2\2ln\7")
        buf.write("\3\2\2ml\3\2\2\2no\3\2\2\2om\3\2\2\2op\3\2\2\2pq\3\2\2")
        buf.write("\2qu\5\4\3\2rt\7)\2\2sr\3\2\2\2tw\3\2\2\2us\3\2\2\2uv")
        buf.write("\3\2\2\2vy\3\2\2\2wu\3\2\2\2xz\7+\2\2yx\3\2\2\2yz\3\2")
        buf.write("\2\2z~\3\2\2\2{}\7\3\2\2|{\3\2\2\2}\u0080\3\2\2\2~|\3")
        buf.write("\2\2\2~\177\3\2\2\2\177\u0082\3\2\2\2\u0080~\3\2\2\2\u0081")
        buf.write("m\3\2\2\2\u0082\u0085\3\2\2\2\u0083\u0081\3\2\2\2\u0083")
        buf.write("\u0084\3\2\2\2\u0084\u0086\3\2\2\2\u0085\u0083\3\2\2\2")
        buf.write("\u0086\u0087\7\2\2\3\u0087\3\3\2\2\2\u0088\u0099\5\16")
        buf.write("\b\2\u0089\u0099\5\36\20\2\u008a\u0099\5&\24\2\u008b\u0099")
        buf.write("\5,\27\2\u008c\u0099\5\34\17\2\u008d\u0099\5\b\5\2\u008e")
        buf.write("\u0099\5\n\6\2\u008f\u0099\58\35\2\u0090\u0099\5(\25\2")
        buf.write("\u0091\u0099\5*\26\2\u0092\u0094\7)\2\2\u0093\u0092\3")
        buf.write("\2\2\2\u0094\u0097\3\2\2\2\u0095\u0093\3\2\2\2\u0095\u0096")
        buf.write("\3\2\2\2\u0096\u0099\3\2\2\2\u0097\u0095\3\2\2\2\u0098")
        buf.write("\u0088\3\2\2\2\u0098\u0089\3\2\2\2\u0098\u008a\3\2\2\2")
        buf.write("\u0098\u008b\3\2\2\2\u0098\u008c\3\2\2\2\u0098\u008d\3")
        buf.write("\2\2\2\u0098\u008e\3\2\2\2\u0098\u008f\3\2\2\2\u0098\u0090")
        buf.write("\3\2\2\2\u0098\u0091\3\2\2\2\u0098\u0095\3\2\2\2\u0099")
        buf.write("\5\3\2\2\2\u009a\u009c\7)\2\2\u009b\u009a\3\2\2\2\u009c")
        buf.write("\u009f\3\2\2\2\u009d\u009b\3\2\2\2\u009d\u009e\3\2\2\2")
        buf.write("\u009e\u00a0\3\2\2\2\u009f\u009d\3\2\2\2\u00a0\u00a4\5")
        buf.write("\4\3\2\u00a1\u00a3\7)\2\2\u00a2\u00a1\3\2\2\2\u00a3\u00a6")
        buf.write("\3\2\2\2\u00a4\u00a2\3\2\2\2\u00a4\u00a5\3\2\2\2\u00a5")
        buf.write("\u00a7\3\2\2\2\u00a6\u00a4\3\2\2\2\u00a7\u00a8\7\3\2\2")
        buf.write("\u00a8\u00aa\3\2\2\2\u00a9\u009d\3\2\2\2\u00aa\u00ad\3")
        buf.write("\2\2\2\u00ab\u00a9\3\2\2\2\u00ab\u00ac\3\2\2\2\u00ac\7")
        buf.write("\3\2\2\2\u00ad\u00ab\3\2\2\2\u00ae\u00b0\7\4\2\2\u00af")
        buf.write("\u00b1\7)\2\2\u00b0\u00af\3\2\2\2\u00b1\u00b2\3\2\2\2")
        buf.write("\u00b2\u00b0\3\2\2\2\u00b2\u00b3\3\2\2\2\u00b3\u00b4\3")
        buf.write("\2\2\2\u00b4\u00b6\7<\2\2\u00b5\u00b7\7)\2\2\u00b6\u00b5")
        buf.write("\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8\u00b6\3\2\2\2\u00b8")
        buf.write("\u00b9\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00bc\7\5\2\2")
        buf.write("\u00bb\u00bd\7)\2\2\u00bc\u00bb\3\2\2\2\u00bd\u00be\3")
        buf.write("\2\2\2\u00be\u00bc\3\2\2\2\u00be\u00bf\3\2\2\2\u00bf\u00c0")
        buf.write("\3\2\2\2\u00c0\u00c2\5:\36\2\u00c1\u00c3\7)\2\2\u00c2")
        buf.write("\u00c1\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4\u00c2\3\2\2\2")
        buf.write("\u00c4\u00c5\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00c8\7")
        buf.write("\6\2\2\u00c7\u00c9\7)\2\2\u00c8\u00c7\3\2\2\2\u00c9\u00ca")
        buf.write("\3\2\2\2\u00ca\u00c8\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb")
        buf.write("\u00cc\3\2\2\2\u00cc\u00ce\5:\36\2\u00cd\u00cf\7)\2\2")
        buf.write("\u00ce\u00cd\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0\u00ce\3")
        buf.write("\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d4")
        buf.write("\7\7\2\2\u00d3\u00d5\7)\2\2\u00d4\u00d3\3\2\2\2\u00d5")
        buf.write("\u00d6\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d6\u00d7\3\2\2\2")
        buf.write("\u00d7\u00d8\3\2\2\2\u00d8\u00da\5:\36\2\u00d9\u00db\7")
        buf.write(")\2\2\u00da\u00d9\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00da")
        buf.write("\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00de\3\2\2\2\u00de")
        buf.write("\u00e2\7\b\2\2\u00df\u00e1\7)\2\2\u00e0\u00df\3\2\2\2")
        buf.write("\u00e1\u00e4\3\2\2\2\u00e2\u00e0\3\2\2\2\u00e2\u00e3\3")
        buf.write("\2\2\2\u00e3\u00e5\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e5\u00e6")
        buf.write("\7\3\2\2\u00e6\u00ea\5\6\4\2\u00e7\u00e9\7)\2\2\u00e8")
        buf.write("\u00e7\3\2\2\2\u00e9\u00ec\3\2\2\2\u00ea\u00e8\3\2\2\2")
        buf.write("\u00ea\u00eb\3\2\2\2\u00eb\u00ed\3\2\2\2\u00ec\u00ea\3")
        buf.write("\2\2\2\u00ed\u00ee\7\t\2\2\u00ee\t\3\2\2\2\u00ef\u00f1")
        buf.write("\7)\2\2\u00f0\u00ef\3\2\2\2\u00f1\u00f4\3\2\2\2\u00f2")
        buf.write("\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\u00f5\3\2\2\2")
        buf.write("\u00f4\u00f2\3\2\2\2\u00f5\u00f7\7\n\2\2\u00f6\u00f8\7")
        buf.write(")\2\2\u00f7\u00f6\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00f7")
        buf.write("\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb")
        buf.write("\u010b\5\f\7\2\u00fc\u00fe\7\13\2\2\u00fd\u00ff\7)\2\2")
        buf.write("\u00fe\u00fd\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u00fe\3")
        buf.write("\2\2\2\u0100\u0101\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0104")
        buf.write("\7\n\2\2\u0103\u0105\7)\2\2\u0104\u0103\3\2\2\2\u0105")
        buf.write("\u0106\3\2\2\2\u0106\u0104\3\2\2\2\u0106\u0107\3\2\2\2")
        buf.write("\u0107\u0108\3\2\2\2\u0108\u010a\5\f\7\2\u0109\u00fc\3")
        buf.write("\2\2\2\u010a\u010d\3\2\2\2\u010b\u0109\3\2\2\2\u010b\u010c")
        buf.write("\3\2\2\2\u010c\u0111\3\2\2\2\u010d\u010b\3\2\2\2\u010e")
        buf.write("\u0110\7)\2\2\u010f\u010e\3\2\2\2\u0110\u0113\3\2\2\2")
        buf.write("\u0111\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u011d\3")
        buf.write("\2\2\2\u0113\u0111\3\2\2\2\u0114\u0116\7\13\2\2\u0115")
        buf.write("\u0117\7)\2\2\u0116\u0115\3\2\2\2\u0117\u0118\3\2\2\2")
        buf.write("\u0118\u0116\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u011a\3")
        buf.write("\2\2\2\u011a\u011b\7\b\2\2\u011b\u011c\7\3\2\2\u011c\u011e")
        buf.write("\5\6\4\2\u011d\u0114\3\2\2\2\u011d\u011e\3\2\2\2\u011e")
        buf.write("\u0122\3\2\2\2\u011f\u0121\7)\2\2\u0120\u011f\3\2\2\2")
        buf.write("\u0121\u0124\3\2\2\2\u0122\u0120\3\2\2\2\u0122\u0123\3")
        buf.write("\2\2\2\u0123\u0125\3\2\2\2\u0124\u0122\3\2\2\2\u0125\u0126")
        buf.write("\7\t\2\2\u0126\13\3\2\2\2\u0127\u0129\5:\36\2\u0128\u012a")
        buf.write("\7)\2\2\u0129\u0128\3\2\2\2\u012a\u012b\3\2\2\2\u012b")
        buf.write("\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d\3\2\2\2")
        buf.write("\u012d\u012e\7\b\2\2\u012e\u0132\7\3\2\2\u012f\u0131\7")
        buf.write(")\2\2\u0130\u012f\3\2\2\2\u0131\u0134\3\2\2\2\u0132\u0130")
        buf.write("\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0135\3\2\2\2\u0134")
        buf.write("\u0132\3\2\2\2\u0135\u0136\5\6\4\2\u0136\r\3\2\2\2\u0137")
        buf.write("\u013c\5\20\t\2\u0138\u013c\5\22\n\2\u0139\u013c\5\24")
        buf.write("\13\2\u013a\u013c\5\26\f\2\u013b\u0137\3\2\2\2\u013b\u0138")
        buf.write("\3\2\2\2\u013b\u0139\3\2\2\2\u013b\u013a\3\2\2\2\u013c")
        buf.write("\17\3\2\2\2\u013d\u013f\7)\2\2\u013e\u013d\3\2\2\2\u013f")
        buf.write("\u0142\3\2\2\2\u0140\u013e\3\2\2\2\u0140\u0141\3\2\2\2")
        buf.write("\u0141\u0143\3\2\2\2\u0142\u0140\3\2\2\2\u0143\u0145\7")
        buf.write("\f\2\2\u0144\u0146\7)\2\2\u0145\u0144\3\2\2\2\u0146\u0147")
        buf.write("\3\2\2\2\u0147\u0145\3\2\2\2\u0147\u0148\3\2\2\2\u0148")
        buf.write("\u0149\3\2\2\2\u0149\u014d\7<\2\2\u014a\u014c\7)\2\2\u014b")
        buf.write("\u014a\3\2\2\2\u014c\u014f\3\2\2\2\u014d\u014b\3\2\2\2")
        buf.write("\u014d\u014e\3\2\2\2\u014e\u0150\3\2\2\2\u014f\u014d\3")
        buf.write("\2\2\2\u0150\u0154\7\r\2\2\u0151\u0153\7)\2\2\u0152\u0151")
        buf.write("\3\2\2\2\u0153\u0156\3\2\2\2\u0154\u0152\3\2\2\2\u0154")
        buf.write("\u0155\3\2\2\2\u0155\u0157\3\2\2\2\u0156\u0154\3\2\2\2")
        buf.write("\u0157\u015b\5:\36\2\u0158\u015a\7)\2\2\u0159\u0158\3")
        buf.write("\2\2\2\u015a\u015d\3\2\2\2\u015b\u0159\3\2\2\2\u015b\u015c")
        buf.write("\3\2\2\2\u015c\u015e\3\2\2\2\u015d\u015b\3\2\2\2\u015e")
        buf.write("\u0162\7\16\2\2\u015f\u0161\7)\2\2\u0160\u015f\3\2\2\2")
        buf.write("\u0161\u0164\3\2\2\2\u0162\u0160\3\2\2\2\u0162\u0163\3")
        buf.write("\2\2\2\u0163\u0165\3\2\2\2\u0164\u0162\3\2\2\2\u0165\u0166")
        buf.write("\5:\36\2\u0166\21\3\2\2\2\u0167\u0169\7)\2\2\u0168\u0167")
        buf.write("\3\2\2\2\u0169\u016c\3\2\2\2\u016a\u0168\3\2\2\2\u016a")
        buf.write("\u016b\3\2\2\2\u016b\u016d\3\2\2\2\u016c\u016a\3\2\2\2")
        buf.write("\u016d\u016f\7\17\2\2\u016e\u0170\7)\2\2\u016f\u016e\3")
        buf.write("\2\2\2\u0170\u0171\3\2\2\2\u0171\u016f\3\2\2\2\u0171\u0172")
        buf.write("\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0177\7<\2\2\u0174")
        buf.write("\u0176\7)\2\2\u0175\u0174\3\2\2\2\u0176\u0179\3\2\2\2")
        buf.write("\u0177\u0175\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u017a\3")
        buf.write("\2\2\2\u0179\u0177\3\2\2\2\u017a\u017e\7\r\2\2\u017b\u017d")
        buf.write("\7)\2\2\u017c\u017b\3\2\2\2\u017d\u0180\3\2\2\2\u017e")
        buf.write("\u017c\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u0181\3\2\2\2")
        buf.write("\u0180\u017e\3\2\2\2\u0181\u0185\7<\2\2\u0182\u0184\7")
        buf.write(")\2\2\u0183\u0182\3\2\2\2\u0184\u0187\3\2\2\2\u0185\u0183")
        buf.write("\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0188\3\2\2\2\u0187")
        buf.write("\u0185\3\2\2\2\u0188\u018a\7\16\2\2\u0189\u018b\7)\2\2")
        buf.write("\u018a\u0189\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018a\3")
        buf.write("\2\2\2\u018c\u018d\3\2\2\2\u018d\u018e\3\2\2\2\u018e\u018f")
        buf.write("\7<\2\2\u018f\23\3\2\2\2\u0190\u0192\7)\2\2\u0191\u0190")
        buf.write("\3\2\2\2\u0192\u0195\3\2\2\2\u0193\u0191\3\2\2\2\u0193")
        buf.write("\u0194\3\2\2\2\u0194\u0196\3\2\2\2\u0195\u0193\3\2\2\2")
        buf.write("\u0196\u0198\7\20\2\2\u0197\u0199\7)\2\2\u0198\u0197\3")
        buf.write("\2\2\2\u0199\u019a\3\2\2\2\u019a\u0198\3\2\2\2\u019a\u019b")
        buf.write("\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u01a0\7<\2\2\u019d")
        buf.write("\u019f\7)\2\2\u019e\u019d\3\2\2\2\u019f\u01a2\3\2\2\2")
        buf.write("\u01a0\u019e\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a3\3")
        buf.write("\2\2\2\u01a2\u01a0\3\2\2\2\u01a3\u01a7\7\r\2\2\u01a4\u01a6")
        buf.write("\7)\2\2\u01a5\u01a4\3\2\2\2\u01a6\u01a9\3\2\2\2\u01a7")
        buf.write("\u01a5\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01aa\3\2\2\2")
        buf.write("\u01a9\u01a7\3\2\2\2\u01aa\u01ae\7<\2\2\u01ab\u01ad\7")
        buf.write(")\2\2\u01ac\u01ab\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae\u01ac")
        buf.write("\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b1\3\2\2\2\u01b0")
        buf.write("\u01ae\3\2\2\2\u01b1\u01b5\7\16\2\2\u01b2\u01b4\7)\2\2")
        buf.write("\u01b3\u01b2\3\2\2\2\u01b4\u01b7\3\2\2\2\u01b5\u01b3\3")
        buf.write("\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b8\3\2\2\2\u01b7\u01b5")
        buf.write("\3\2\2\2\u01b8\u01b9\5:\36\2\u01b9\25\3\2\2\2\u01ba\u01bc")
        buf.write("\7)\2\2\u01bb\u01ba\3\2\2\2\u01bc\u01bf\3\2\2\2\u01bd")
        buf.write("\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01c0\3\2\2\2")
        buf.write("\u01bf\u01bd\3\2\2\2\u01c0\u01c2\7\21\2\2\u01c1\u01c3")
        buf.write("\7)\2\2\u01c2\u01c1\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4")
        buf.write("\u01c2\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01c6\3\2\2\2")
        buf.write("\u01c6\u01ca\7<\2\2\u01c7\u01c9\7)\2\2\u01c8\u01c7\3\2")
        buf.write("\2\2\u01c9\u01cc\3\2\2\2\u01ca\u01c8\3\2\2\2\u01ca\u01cb")
        buf.write("\3\2\2\2\u01cb\u01cd\3\2\2\2\u01cc\u01ca\3\2\2\2\u01cd")
        buf.write("\u01d1\7\r\2\2\u01ce\u01d0\7)\2\2\u01cf\u01ce\3\2\2\2")
        buf.write("\u01d0\u01d3\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d1\u01d2\3")
        buf.write("\2\2\2\u01d2\u01d4\3\2\2\2\u01d3\u01d1\3\2\2\2\u01d4\u01d5")
        buf.write("\7<\2\2\u01d5\27\3\2\2\2\u01d6\u01d8\7)\2\2\u01d7\u01d6")
        buf.write("\3\2\2\2\u01d8\u01db\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9")
        buf.write("\u01da\3\2\2\2\u01da\u01dc\3\2\2\2\u01db\u01d9\3\2\2\2")
        buf.write("\u01dc\u01e0\7<\2\2\u01dd\u01df\7)\2\2\u01de\u01dd\3\2")
        buf.write("\2\2\u01df\u01e2\3\2\2\2\u01e0\u01de\3\2\2\2\u01e0\u01e1")
        buf.write("\3\2\2\2\u01e1\u01e3\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e3")
        buf.write("\u01e7\7\22\2\2\u01e4\u01e6\7)\2\2\u01e5\u01e4\3\2\2\2")
        buf.write("\u01e6\u01e9\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e7\u01e8\3")
        buf.write("\2\2\2\u01e8\u01ea\3\2\2\2\u01e9\u01e7\3\2\2\2\u01ea\u01ee")
        buf.write("\5:\36\2\u01eb\u01ed\7)\2\2\u01ec\u01eb\3\2\2\2\u01ed")
        buf.write("\u01f0\3\2\2\2\u01ee\u01ec\3\2\2\2\u01ee\u01ef\3\2\2\2")
        buf.write("\u01ef\u01f1\3\2\2\2\u01f0\u01ee\3\2\2\2\u01f1\u01f2\7")
        buf.write("\23\2\2\u01f2\31\3\2\2\2\u01f3\u01f6\7<\2\2\u01f4\u01f6")
        buf.write("\5\30\r\2\u01f5\u01f3\3\2\2\2\u01f5\u01f4\3\2\2\2\u01f6")
        buf.write("\33\3\2\2\2\u01f7\u01f9\7)\2\2\u01f8\u01f7\3\2\2\2\u01f9")
        buf.write("\u01fc\3\2\2\2\u01fa\u01f8\3\2\2\2\u01fa\u01fb\3\2\2\2")
        buf.write("\u01fb\u01fd\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fd\u0201\7")
        buf.write("\24\2\2\u01fe\u0200\7)\2\2\u01ff\u01fe\3\2\2\2\u0200\u0203")
        buf.write("\3\2\2\2\u0201\u01ff\3\2\2\2\u0201\u0202\3\2\2\2\u0202")
        buf.write("\u0204\3\2\2\2\u0203\u0201\3\2\2\2\u0204\u0208\7\64\2")
        buf.write("\2\u0205\u0207\7)\2\2\u0206\u0205\3\2\2\2\u0207\u020a")
        buf.write("\3\2\2\2\u0208\u0206\3\2\2\2\u0208\u0209\3\2\2\2\u0209")
        buf.write("\u020b\3\2\2\2\u020a\u0208\3\2\2\2\u020b\u020f\78\2\2")
        buf.write("\u020c\u020e\7)\2\2\u020d\u020c\3\2\2\2\u020e\u0211\3")
        buf.write("\2\2\2\u020f\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0212")
        buf.write("\3\2\2\2\u0211\u020f\3\2\2\2\u0212\u0214\7\63\2\2\u0213")
        buf.write("\u0215\7)\2\2\u0214\u0213\3\2\2\2\u0215\u0216\3\2\2\2")
        buf.write("\u0216\u0214\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0218\3")
        buf.write("\2\2\2\u0218\u021c\7<\2\2\u0219\u021b\7)\2\2\u021a\u0219")
        buf.write("\3\2\2\2\u021b\u021e\3\2\2\2\u021c\u021a\3\2\2\2\u021c")
        buf.write("\u021d\3\2\2\2\u021d\u021f\3\2\2\2\u021e\u021c\3\2\2\2")
        buf.write("\u021f\u0223\7\r\2\2\u0220\u0222\7)\2\2\u0221\u0220\3")
        buf.write("\2\2\2\u0222\u0225\3\2\2\2\u0223\u0221\3\2\2\2\u0223\u0224")
        buf.write("\3\2\2\2\u0224\u0226\3\2\2\2\u0225\u0223\3\2\2\2\u0226")
        buf.write("\u022a\7<\2\2\u0227\u0229\7)\2\2\u0228\u0227\3\2\2\2\u0229")
        buf.write("\u022c\3\2\2\2\u022a\u0228\3\2\2\2\u022a\u022b\3\2\2\2")
        buf.write("\u022b\u023d\3\2\2\2\u022c\u022a\3\2\2\2\u022d\u0231\7")
        buf.write("\16\2\2\u022e\u0230\7)\2\2\u022f\u022e\3\2\2\2\u0230\u0233")
        buf.write("\3\2\2\2\u0231\u022f\3\2\2\2\u0231\u0232\3\2\2\2\u0232")
        buf.write("\u0234\3\2\2\2\u0233\u0231\3\2\2\2\u0234\u0238\7<\2\2")
        buf.write("\u0235\u0237\7)\2\2\u0236\u0235\3\2\2\2\u0237\u023a\3")
        buf.write("\2\2\2\u0238\u0236\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023c")
        buf.write("\3\2\2\2\u023a\u0238\3\2\2\2\u023b\u022d\3\2\2\2\u023c")
        buf.write("\u023f\3\2\2\2\u023d\u023b\3\2\2\2\u023d\u023e\3\2\2\2")
        buf.write("\u023e\35\3\2\2\2\u023f\u023d\3\2\2\2\u0240\u0243\5 \21")
        buf.write("\2\u0241\u0243\5\"\22\2\u0242\u0240\3\2\2\2\u0242\u0241")
        buf.write("\3\2\2\2\u0243\37\3\2\2\2\u0244\u0246\7)\2\2\u0245\u0244")
        buf.write("\3\2\2\2\u0246\u0249\3\2\2\2\u0247\u0245\3\2\2\2\u0247")
        buf.write("\u0248\3\2\2\2\u0248\u024a\3\2\2\2\u0249\u0247\3\2\2\2")
        buf.write("\u024a\u024c\7\25\2\2\u024b\u024d\7)\2\2\u024c\u024b\3")
        buf.write("\2\2\2\u024d\u024e\3\2\2\2\u024e\u024c\3\2\2\2\u024e\u024f")
        buf.write("\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0254\7<\2\2\u0251")
        buf.write("\u0253\7)\2\2\u0252\u0251\3\2\2\2\u0253\u0256\3\2\2\2")
        buf.write("\u0254\u0252\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0257\3")
        buf.write("\2\2\2\u0256\u0254\3\2\2\2\u0257\u025b\7\r\2\2\u0258\u025a")
        buf.write("\7)\2\2\u0259\u0258\3\2\2\2\u025a\u025d\3\2\2\2\u025b")
        buf.write("\u0259\3\2\2\2\u025b\u025c\3\2\2\2\u025c\u025e\3\2\2\2")
        buf.write("\u025d\u025b\3\2\2\2\u025e\u025f\5:\36\2\u025f!\3\2\2")
        buf.write("\2\u0260\u0262\7)\2\2\u0261\u0260\3\2\2\2\u0262\u0265")
        buf.write("\3\2\2\2\u0263\u0261\3\2\2\2\u0263\u0264\3\2\2\2\u0264")
        buf.write("\u0266\3\2\2\2\u0265\u0263\3\2\2\2\u0266\u0268\7\26\2")
        buf.write("\2\u0267\u0269\7)\2\2\u0268\u0267\3\2\2\2\u0269\u026a")
        buf.write("\3\2\2\2\u026a\u0268\3\2\2\2\u026a\u026b\3\2\2\2\u026b")
        buf.write("\u026c\3\2\2\2\u026c\u0270\7<\2\2\u026d\u026f\7)\2\2\u026e")
        buf.write("\u026d\3\2\2\2\u026f\u0272\3\2\2\2\u0270\u026e\3\2\2\2")
        buf.write("\u0270\u0271\3\2\2\2\u0271\u0273\3\2\2\2\u0272\u0270\3")
        buf.write("\2\2\2\u0273\u0277\7\r\2\2\u0274\u0276\7)\2\2\u0275\u0274")
        buf.write("\3\2\2\2\u0276\u0279\3\2\2\2\u0277\u0275\3\2\2\2\u0277")
        buf.write("\u0278\3\2\2\2\u0278\u027a\3\2\2\2\u0279\u0277\3\2\2\2")
        buf.write("\u027a\u027b\5:\36\2\u027b#\3\2\2\2\u027c\u027e\7)\2\2")
        buf.write("\u027d\u027c\3\2\2\2\u027e\u0281\3\2\2\2\u027f\u027d\3")
        buf.write("\2\2\2\u027f\u0280\3\2\2\2\u0280\u0282\3\2\2\2\u0281\u027f")
        buf.write("\3\2\2\2\u0282\u0286\7\27\2\2\u0283\u0285\7)\2\2\u0284")
        buf.write("\u0283\3\2\2\2\u0285\u0288\3\2\2\2\u0286\u0284\3\2\2\2")
        buf.write("\u0286\u0287\3\2\2\2\u0287\u0289\3\2\2\2\u0288\u0286\3")
        buf.write("\2\2\2\u0289\u028d\7\r\2\2\u028a\u028c\7)\2\2\u028b\u028a")
        buf.write("\3\2\2\2\u028c\u028f\3\2\2\2\u028d\u028b\3\2\2\2\u028d")
        buf.write("\u028e\3\2\2\2\u028e\u0290\3\2\2\2\u028f\u028d\3\2\2\2")
        buf.write("\u0290\u0294\5:\36\2\u0291\u0293\7)\2\2\u0292\u0291\3")
        buf.write("\2\2\2\u0293\u0296\3\2\2\2\u0294\u0292\3\2\2\2\u0294\u0295")
        buf.write("\3\2\2\2\u0295\u0297\3\2\2\2\u0296\u0294\3\2\2\2\u0297")
        buf.write("\u029b\7\16\2\2\u0298\u029a\7)\2\2\u0299\u0298\3\2\2\2")
        buf.write("\u029a\u029d\3\2\2\2\u029b\u0299\3\2\2\2\u029b\u029c\3")
        buf.write("\2\2\2\u029c\u029e\3\2\2\2\u029d\u029b\3\2\2\2\u029e\u02a2")
        buf.write("\5:\36\2\u029f\u02a1\7)\2\2\u02a0\u029f\3\2\2\2\u02a1")
        buf.write("\u02a4\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a2\u02a3\3\2\2\2")
        buf.write("\u02a3\u02a5\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a5\u02a9\7")
        buf.write("\16\2\2\u02a6\u02a8\7)\2\2\u02a7\u02a6\3\2\2\2\u02a8\u02ab")
        buf.write("\3\2\2\2\u02a9\u02a7\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa")
        buf.write("\u02ac\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ac\u02ad\79\2\2")
        buf.write("\u02ad%\3\2\2\2\u02ae\u02b0\7)\2\2\u02af\u02ae\3\2\2\2")
        buf.write("\u02b0\u02b3\3\2\2\2\u02b1\u02af\3\2\2\2\u02b1\u02b2\3")
        buf.write("\2\2\2\u02b2\u02b4\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b4\u02b6")
        buf.write("\7\30\2\2\u02b5\u02b7\7)\2\2\u02b6\u02b5\3\2\2\2\u02b7")
        buf.write("\u02b8\3\2\2\2\u02b8\u02b6\3\2\2\2\u02b8\u02b9\3\2\2\2")
        buf.write("\u02b9\u02ba\3\2\2\2\u02ba\u02bb\5\32\16\2\u02bb\'\3\2")
        buf.write("\2\2\u02bc\u02be\7)\2\2\u02bd\u02bc\3\2\2\2\u02be\u02c1")
        buf.write("\3\2\2\2\u02bf\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0")
        buf.write("\u02c2\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c2\u02c4\7\31\2")
        buf.write("\2\u02c3\u02c5\7)\2\2\u02c4\u02c3\3\2\2\2\u02c5\u02c6")
        buf.write("\3\2\2\2\u02c6\u02c4\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7")
        buf.write("\u02c8\3\2\2\2\u02c8\u02e4\5\32\16\2\u02c9\u02cb\7)\2")
        buf.write("\2\u02ca\u02c9\3\2\2\2\u02cb\u02ce\3\2\2\2\u02cc\u02ca")
        buf.write("\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02cf\3\2\2\2\u02ce")
        buf.write("\u02cc\3\2\2\2\u02cf\u02d1\7\31\2\2\u02d0\u02d2\7)\2\2")
        buf.write("\u02d1\u02d0\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d1\3")
        buf.write("\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02e4")
        buf.write("\5:\36\2\u02d6\u02d8\7)\2\2\u02d7\u02d6\3\2\2\2\u02d8")
        buf.write("\u02db\3\2\2\2\u02d9\u02d7\3\2\2\2\u02d9\u02da\3\2\2\2")
        buf.write("\u02da\u02dc\3\2\2\2\u02db\u02d9\3\2\2\2\u02dc\u02de\7")
        buf.write("\31\2\2\u02dd\u02df\7)\2\2\u02de\u02dd\3\2\2\2\u02df\u02e0")
        buf.write("\3\2\2\2\u02e0\u02de\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1")
        buf.write("\u02e2\3\2\2\2\u02e2\u02e4\7\67\2\2\u02e3\u02bf\3\2\2")
        buf.write("\2\u02e3\u02cc\3\2\2\2\u02e3\u02d9\3\2\2\2\u02e4)\3\2")
        buf.write("\2\2\u02e5\u02e6\7\32\2\2\u02e6+\3\2\2\2\u02e7\u02ed\5")
        buf.write(".\30\2\u02e8\u02ed\5\60\31\2\u02e9\u02ed\5\62\32\2\u02ea")
        buf.write("\u02ed\5\64\33\2\u02eb\u02ed\5\66\34\2\u02ec\u02e7\3\2")
        buf.write("\2\2\u02ec\u02e8\3\2\2\2\u02ec\u02e9\3\2\2\2\u02ec\u02ea")
        buf.write("\3\2\2\2\u02ec\u02eb\3\2\2\2\u02ed-\3\2\2\2\u02ee\u02f0")
        buf.write("\7)\2\2\u02ef\u02ee\3\2\2\2\u02f0\u02f3\3\2\2\2\u02f1")
        buf.write("\u02ef\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f4\3\2\2\2")
        buf.write("\u02f3\u02f1\3\2\2\2\u02f4\u02f6\7\33\2\2\u02f5\u02f7")
        buf.write("\7)\2\2\u02f6\u02f5\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8")
        buf.write("\u02f6\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fa\3\2\2\2")
        buf.write("\u02fa\u02fe\5\32\16\2\u02fb\u02fd\7)\2\2\u02fc\u02fb")
        buf.write("\3\2\2\2\u02fd\u0300\3\2\2\2\u02fe\u02fc\3\2\2\2\u02fe")
        buf.write("\u02ff\3\2\2\2\u02ff\u0301\3\2\2\2\u0300\u02fe\3\2\2\2")
        buf.write("\u0301\u0305\7\r\2\2\u0302\u0304\7)\2\2\u0303\u0302\3")
        buf.write("\2\2\2\u0304\u0307\3\2\2\2\u0305\u0303\3\2\2\2\u0305\u0306")
        buf.write("\3\2\2\2\u0306\u0308\3\2\2\2\u0307\u0305\3\2\2\2\u0308")
        buf.write("\u0309\79\2\2\u0309/\3\2\2\2\u030a\u030c\7)\2\2\u030b")
        buf.write("\u030a\3\2\2\2\u030c\u030f\3\2\2\2\u030d\u030b\3\2\2\2")
        buf.write("\u030d\u030e\3\2\2\2\u030e\u0310\3\2\2\2\u030f\u030d\3")
        buf.write("\2\2\2\u0310\u0312\7\34\2\2\u0311\u0313\7)\2\2\u0312\u0311")
        buf.write("\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0312\3\2\2\2\u0314")
        buf.write("\u0315\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u031a\5\32\16")
        buf.write("\2\u0317\u0319\7)\2\2\u0318\u0317\3\2\2\2\u0319\u031c")
        buf.write("\3\2\2\2\u031a\u0318\3\2\2\2\u031a\u031b\3\2\2\2\u031b")
        buf.write("\u031d\3\2\2\2\u031c\u031a\3\2\2\2\u031d\u0321\7\r\2\2")
        buf.write("\u031e\u0320\7)\2\2\u031f\u031e\3\2\2\2\u0320\u0323\3")
        buf.write("\2\2\2\u0321\u031f\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0324")
        buf.write("\3\2\2\2\u0323\u0321\3\2\2\2\u0324\u0328\5:\36\2\u0325")
        buf.write("\u0327\7)\2\2\u0326\u0325\3\2\2\2\u0327\u032a\3\2\2\2")
        buf.write("\u0328\u0326\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u032b\3")
        buf.write("\2\2\2\u032a\u0328\3\2\2\2\u032b\u032f\7\16\2\2\u032c")
        buf.write("\u032e\7)\2\2\u032d\u032c\3\2\2\2\u032e\u0331\3\2\2\2")
        buf.write("\u032f\u032d\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0332\3")
        buf.write("\2\2\2\u0331\u032f\3\2\2\2\u0332\u0333\5:\36\2\u0333\61")
        buf.write("\3\2\2\2\u0334\u0336\7)\2\2\u0335\u0334\3\2\2\2\u0336")
        buf.write("\u0339\3\2\2\2\u0337\u0335\3\2\2\2\u0337\u0338\3\2\2\2")
        buf.write("\u0338\u033a\3\2\2\2\u0339\u0337\3\2\2\2\u033a\u033c\7")
        buf.write("\35\2\2\u033b\u033d\7)\2\2\u033c\u033b\3\2\2\2\u033d\u033e")
        buf.write("\3\2\2\2\u033e\u033c\3\2\2\2\u033e\u033f\3\2\2\2\u033f")
        buf.write("\u0340\3\2\2\2\u0340\u0344\5\32\16\2\u0341\u0343\7)\2")
        buf.write("\2\u0342\u0341\3\2\2\2\u0343\u0346\3\2\2\2\u0344\u0342")
        buf.write("\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0347\3\2\2\2\u0346")
        buf.write("\u0344\3\2\2\2\u0347\u034b\7\r\2\2\u0348\u034a\7)\2\2")
        buf.write("\u0349\u0348\3\2\2\2\u034a\u034d\3\2\2\2\u034b\u0349\3")
        buf.write("\2\2\2\u034b\u034c\3\2\2\2\u034c\u034e\3\2\2\2\u034d\u034b")
        buf.write("\3\2\2\2\u034e\u034f\5\32\16\2\u034f\63\3\2\2\2\u0350")
        buf.write("\u0352\7)\2\2\u0351\u0350\3\2\2\2\u0352\u0355\3\2\2\2")
        buf.write("\u0353\u0351\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0356\3")
        buf.write("\2\2\2\u0355\u0353\3\2\2\2\u0356\u0358\7\36\2\2\u0357")
        buf.write("\u0359\7)\2\2\u0358\u0357\3\2\2\2\u0359\u035a\3\2\2\2")
        buf.write("\u035a\u0358\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035c\3")
        buf.write("\2\2\2\u035c\u0360\5\32\16\2\u035d\u035f\7)\2\2\u035e")
        buf.write("\u035d\3\2\2\2\u035f\u0362\3\2\2\2\u0360\u035e\3\2\2\2")
        buf.write("\u0360\u0361\3\2\2\2\u0361\u0363\3\2\2\2\u0362\u0360\3")
        buf.write("\2\2\2\u0363\u0367\7\r\2\2\u0364\u0366\7)\2\2\u0365\u0364")
        buf.write("\3\2\2\2\u0366\u0369\3\2\2\2\u0367\u0365\3\2\2\2\u0367")
        buf.write("\u0368\3\2\2\2\u0368\u036a\3\2\2\2\u0369\u0367\3\2\2\2")
        buf.write("\u036a\u036e\5:\36\2\u036b\u036d\7)\2\2\u036c\u036b\3")
        buf.write("\2\2\2\u036d\u0370\3\2\2\2\u036e\u036c\3\2\2\2\u036e\u036f")
        buf.write("\3\2\2\2\u036f\u0371\3\2\2\2\u0370\u036e\3\2\2\2\u0371")
        buf.write("\u0375\7\16\2\2\u0372\u0374\7)\2\2\u0373\u0372\3\2\2\2")
        buf.write("\u0374\u0377\3\2\2\2\u0375\u0373\3\2\2\2\u0375\u0376\3")
        buf.write("\2\2\2\u0376\u0378\3\2\2\2\u0377\u0375\3\2\2\2\u0378\u0379")
        buf.write("\5\32\16\2\u0379\65\3\2\2\2\u037a\u037c\7)\2\2\u037b\u037a")
        buf.write("\3\2\2\2\u037c\u037f\3\2\2\2\u037d\u037b\3\2\2\2\u037d")
        buf.write("\u037e\3\2\2\2\u037e\u0380\3\2\2\2\u037f\u037d\3\2\2\2")
        buf.write("\u0380\u0382\7\37\2\2\u0381\u0383\7)\2\2\u0382\u0381\3")
        buf.write("\2\2\2\u0383\u0384\3\2\2\2\u0384\u0382\3\2\2\2\u0384\u0385")
        buf.write("\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u038a\5\32\16\2\u0387")
        buf.write("\u0389\7)\2\2\u0388\u0387\3\2\2\2\u0389\u038c\3\2\2\2")
        buf.write("\u038a\u0388\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038d\3")
        buf.write("\2\2\2\u038c\u038a\3\2\2\2\u038d\u0391\7\r\2\2\u038e\u0390")
        buf.write("\7)\2\2\u038f\u038e\3\2\2\2\u0390\u0393\3\2\2\2\u0391")
        buf.write("\u038f\3\2\2\2\u0391\u0392\3\2\2\2\u0392\u0394\3\2\2\2")
        buf.write("\u0393\u0391\3\2\2\2\u0394\u0398\5:\36\2\u0395\u0397\7")
        buf.write(")\2\2\u0396\u0395\3\2\2\2\u0397\u039a\3\2\2\2\u0398\u0396")
        buf.write("\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039b\3\2\2\2\u039a")
        buf.write("\u0398\3\2\2\2\u039b\u039f\7\16\2\2\u039c\u039e\7)\2\2")
        buf.write("\u039d\u039c\3\2\2\2\u039e\u03a1\3\2\2\2\u039f\u039d\3")
        buf.write("\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a2\3\2\2\2\u03a1\u039f")
        buf.write("\3\2\2\2\u03a2\u03a3\5\32\16\2\u03a3\67\3\2\2\2\u03a4")
        buf.write("\u03a6\7)\2\2\u03a5\u03a4\3\2\2\2\u03a6\u03a9\3\2\2\2")
        buf.write("\u03a7\u03a5\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03aa\3")
        buf.write("\2\2\2\u03a9\u03a7\3\2\2\2\u03aa\u03ac\7 \2\2\u03ab\u03ad")
        buf.write("\7)\2\2\u03ac\u03ab\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae")
        buf.write("\u03ac\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b0\3\2\2\2")
        buf.write("\u03b0\u03b4\5\32\16\2\u03b1\u03b3\7)\2\2\u03b2\u03b1")
        buf.write("\3\2\2\2\u03b3\u03b6\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b4")
        buf.write("\u03b5\3\2\2\2\u03b5\u03b7\3\2\2\2\u03b6\u03b4\3\2\2\2")
        buf.write("\u03b7\u03bb\7\r\2\2\u03b8\u03ba\7)\2\2\u03b9\u03b8\3")
        buf.write("\2\2\2\u03ba\u03bd\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bb\u03bc")
        buf.write("\3\2\2\2\u03bc\u03be\3\2\2\2\u03bd\u03bb\3\2\2\2\u03be")
        buf.write("\u03bf\5\32\16\2\u03bf\u03dd\3\2\2\2\u03c0\u03c2\7)\2")
        buf.write("\2\u03c1\u03c0\3\2\2\2\u03c2\u03c5\3\2\2\2\u03c3\u03c1")
        buf.write("\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c6\3\2\2\2\u03c5")
        buf.write("\u03c3\3\2\2\2\u03c6\u03c8\7 \2\2\u03c7\u03c9\7)\2\2\u03c8")
        buf.write("\u03c7\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03c8\3\2\2\2")
        buf.write("\u03ca\u03cb\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03d0\5")
        buf.write("\32\16\2\u03cd\u03cf\7)\2\2\u03ce\u03cd\3\2\2\2\u03cf")
        buf.write("\u03d2\3\2\2\2\u03d0\u03ce\3\2\2\2\u03d0\u03d1\3\2\2\2")
        buf.write("\u03d1\u03d3\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d3\u03d7\7")
        buf.write("\r\2\2\u03d4\u03d6\7)\2\2\u03d5\u03d4\3\2\2\2\u03d6\u03d9")
        buf.write("\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8")
        buf.write("\u03da\3\2\2\2\u03d9\u03d7\3\2\2\2\u03da\u03db\5:\36\2")
        buf.write("\u03db\u03dd\3\2\2\2\u03dc\u03a7\3\2\2\2\u03dc\u03c3\3")
        buf.write("\2\2\2\u03dd9\3\2\2\2\u03de\u03df\b\36\1\2\u03df\u03e3")
        buf.write("\7!\2\2\u03e0\u03e2\7)\2\2\u03e1\u03e0\3\2\2\2\u03e2\u03e5")
        buf.write("\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4")
        buf.write("\u03e6\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e6\u03ea\5:\36\2")
        buf.write("\u03e7\u03e9\7)\2\2\u03e8\u03e7\3\2\2\2\u03e9\u03ec\3")
        buf.write("\2\2\2\u03ea\u03e8\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ed")
        buf.write("\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ed\u03ee\7\"\2\2\u03ee")
        buf.write("\u0409\3\2\2\2\u03ef\u03f3\t\2\2\2\u03f0\u03f2\7)\2\2")
        buf.write("\u03f1\u03f0\3\2\2\2\u03f2\u03f5\3\2\2\2\u03f3\u03f1\3")
        buf.write("\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f6\3\2\2\2\u03f5\u03f3")
        buf.write("\3\2\2\2\u03f6\u0409\5:\36\13\u03f7\u03fb\7-\2\2\u03f8")
        buf.write("\u03fa\7)\2\2\u03f9\u03f8\3\2\2\2\u03fa\u03fd\3\2\2\2")
        buf.write("\u03fb\u03f9\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fe\3")
        buf.write("\2\2\2\u03fd\u03fb\3\2\2\2\u03fe\u0409\5:\36\n\u03ff\u0403")
        buf.write("\7\61\2\2\u0400\u0402\7)\2\2\u0401\u0400\3\2\2\2\u0402")
        buf.write("\u0405\3\2\2\2\u0403\u0401\3\2\2\2\u0403\u0404\3\2\2\2")
        buf.write("\u0404\u0406\3\2\2\2\u0405\u0403\3\2\2\2\u0406\u0409\5")
        buf.write(":\36\6\u0407\u0409\5<\37\2\u0408\u03de\3\2\2\2\u0408\u03ef")
        buf.write("\3\2\2\2\u0408\u03f7\3\2\2\2\u0408\u03ff\3\2\2\2\u0408")
        buf.write("\u0407\3\2\2\2\u0409\u0457\3\2\2\2\u040a\u040e\f\t\2\2")
        buf.write("\u040b\u040d\7)\2\2\u040c\u040b\3\2\2\2\u040d\u0410\3")
        buf.write("\2\2\2\u040e\u040c\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0411")
        buf.write("\3\2\2\2\u0410\u040e\3\2\2\2\u0411\u0415\t\3\2\2\u0412")
        buf.write("\u0414\7)\2\2\u0413\u0412\3\2\2\2\u0414\u0417\3\2\2\2")
        buf.write("\u0415\u0413\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0418\3")
        buf.write("\2\2\2\u0417\u0415\3\2\2\2\u0418\u0456\5:\36\n\u0419\u041d")
        buf.write("\f\b\2\2\u041a\u041c\7)\2\2\u041b\u041a\3\2\2\2\u041c")
        buf.write("\u041f\3\2\2\2\u041d\u041b\3\2\2\2\u041d\u041e\3\2\2\2")
        buf.write("\u041e\u0420\3\2\2\2\u041f\u041d\3\2\2\2\u0420\u0424\t")
        buf.write("\4\2\2\u0421\u0423\7)\2\2\u0422\u0421\3\2\2\2\u0423\u0426")
        buf.write("\3\2\2\2\u0424\u0422\3\2\2\2\u0424\u0425\3\2\2\2\u0425")
        buf.write("\u0427\3\2\2\2\u0426\u0424\3\2\2\2\u0427\u0456\5:\36\t")
        buf.write("\u0428\u042c\f\7\2\2\u0429\u042b\7)\2\2\u042a\u0429\3")
        buf.write("\2\2\2\u042b\u042e\3\2\2\2\u042c\u042a\3\2\2\2\u042c\u042d")
        buf.write("\3\2\2\2\u042d\u042f\3\2\2\2\u042e\u042c\3\2\2\2\u042f")
        buf.write("\u0433\t\5\2\2\u0430\u0432\7)\2\2\u0431\u0430\3\2\2\2")
        buf.write("\u0432\u0435\3\2\2\2\u0433\u0431\3\2\2\2\u0433\u0434\3")
        buf.write("\2\2\2\u0434\u0436\3\2\2\2\u0435\u0433\3\2\2\2\u0436\u0456")
        buf.write("\5:\36\b\u0437\u043b\f\5\2\2\u0438\u043a\7)\2\2\u0439")
        buf.write("\u0438\3\2\2\2\u043a\u043d\3\2\2\2\u043b\u0439\3\2\2\2")
        buf.write("\u043b\u043c\3\2\2\2\u043c\u043e\3\2\2\2\u043d\u043b\3")
        buf.write("\2\2\2\u043e\u0442\7\'\2\2\u043f\u0441\7)\2\2\u0440\u043f")
        buf.write("\3\2\2\2\u0441\u0444\3\2\2\2\u0442\u0440\3\2\2\2\u0442")
        buf.write("\u0443\3\2\2\2\u0443\u0445\3\2\2\2\u0444\u0442\3\2\2\2")
        buf.write("\u0445\u0456\5:\36\6\u0446\u044a\f\4\2\2\u0447\u0449\7")
        buf.write(")\2\2\u0448\u0447\3\2\2\2\u0449\u044c\3\2\2\2\u044a\u0448")
        buf.write("\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u044d\3\2\2\2\u044c")
        buf.write("\u044a\3\2\2\2\u044d\u0451\7(\2\2\u044e\u0450\7)\2\2\u044f")
        buf.write("\u044e\3\2\2\2\u0450\u0453\3\2\2\2\u0451\u044f\3\2\2\2")
        buf.write("\u0451\u0452\3\2\2\2\u0452\u0454\3\2\2\2\u0453\u0451\3")
        buf.write("\2\2\2\u0454\u0456\5:\36\5\u0455\u040a\3\2\2\2\u0455\u0419")
        buf.write("\3\2\2\2\u0455\u0428\3\2\2\2\u0455\u0437\3\2\2\2\u0455")
        buf.write("\u0446\3\2\2\2\u0456\u0459\3\2\2\2\u0457\u0455\3\2\2\2")
        buf.write("\u0457\u0458\3\2\2\2\u0458;\3\2\2\2\u0459\u0457\3\2\2")
        buf.write("\2\u045a\u045e\5F$\2\u045b\u045e\5D#\2\u045c\u045e\7<")
        buf.write("\2\2\u045d\u045a\3\2\2\2\u045d\u045b\3\2\2\2\u045d\u045c")
        buf.write("\3\2\2\2\u045e=\3\2\2\2\u045f\u0460\t\6\2\2\u0460?\3\2")
        buf.write("\2\2\u0461\u0468\7\63\2\2\u0462\u0468\7\64\2\2\u0463\u0468")
        buf.write("\7\65\2\2\u0464\u0468\7\66\2\2\u0465\u0468\7\62\2\2\u0466")
        buf.write("\u0468\5B\"\2\u0467\u0461\3\2\2\2\u0467\u0462\3\2\2\2")
        buf.write("\u0467\u0463\3\2\2\2\u0467\u0464\3\2\2\2\u0467\u0465\3")
        buf.write("\2\2\2\u0467\u0466\3\2\2\2\u0468A\3\2\2\2\u0469\u046a")
        buf.write("\7\61\2\2\u046a\u046b\7\62\2\2\u046bC\3\2\2\2\u046c\u046e")
        buf.write("\7;\2\2\u046d\u046c\3\2\2\2\u046e\u0471\3\2\2\2\u046f")
        buf.write("\u046d\3\2\2\2\u046f\u0470\3\2\2\2\u0470\u0472\3\2\2\2")
        buf.write("\u0471\u046f\3\2\2\2\u0472\u0474\7:\2\2\u0473\u046f\3")
        buf.write("\2\2\2\u0473\u0474\3\2\2\2\u0474\u0476\3\2\2\2\u0475\u0477")
        buf.write("\7;\2\2\u0476\u0475\3\2\2\2\u0477\u0478\3\2\2\2\u0478")
        buf.write("\u0476\3\2\2\2\u0478\u0479\3\2\2\2\u0479E\3\2\2\2\u047a")
        buf.write("\u047c\7;\2\2\u047b\u047a\3\2\2\2\u047c\u047d\3\2\2\2")
        buf.write("\u047d\u047b\3\2\2\2\u047d\u047e\3\2\2\2\u047eG\3\2\2")
        buf.write("\2\u00a4KRV[_fjouy~\u0083\u0095\u0098\u009d\u00a4\u00ab")
        buf.write("\u00b2\u00b8\u00be\u00c4\u00ca\u00d0\u00d6\u00dc\u00e2")
        buf.write("\u00ea\u00f2\u00f9\u0100\u0106\u010b\u0111\u0118\u011d")
        buf.write("\u0122\u012b\u0132\u013b\u0140\u0147\u014d\u0154\u015b")
        buf.write("\u0162\u016a\u0171\u0177\u017e\u0185\u018c\u0193\u019a")
        buf.write("\u01a0\u01a7\u01ae\u01b5\u01bd\u01c4\u01ca\u01d1\u01d9")
        buf.write("\u01e0\u01e7\u01ee\u01f5\u01fa\u0201\u0208\u020f\u0216")
        buf.write("\u021c\u0223\u022a\u0231\u0238\u023d\u0242\u0247\u024e")
        buf.write("\u0254\u025b\u0263\u026a\u0270\u0277\u027f\u0286\u028d")
        buf.write("\u0294\u029b\u02a2\u02a9\u02b1\u02b8\u02bf\u02c6\u02cc")
        buf.write("\u02d3\u02d9\u02e0\u02e3\u02ec\u02f1\u02f8\u02fe\u0305")
        buf.write("\u030d\u0314\u031a\u0321\u0328\u032f\u0337\u033e\u0344")
        buf.write("\u034b\u0353\u035a\u0360\u0367\u036e\u0375\u037d\u0384")
        buf.write("\u038a\u0391\u0398\u039f\u03a7\u03ae\u03b4\u03bb\u03c3")
        buf.write("\u03ca\u03d0\u03d7\u03dc\u03e3\u03ea\u03f3\u03fb\u0403")
        buf.write("\u0408\u040e\u0415\u041d\u0424\u042c\u0433\u043b\u0442")
        buf.write("\u044a\u0451\u0455\u0457\u045d\u0467\u046f\u0473\u0478")
        buf.write("\u047d")
        return buf.getvalue()


class GraphlyParser ( Parser ):

    grammarFileName = "Graphly.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'loop'", "'start'", "'until'", 
                     "'step'", "'then'", "'end'", "'check'", "'else'", "'point'", 
                     "':'", "','", "'segment'", "'circle'", "'polygon'", 
                     "'['", "']'", "'group'", "'num'", "'iterator'", "'canvas'", 
                     "'draw'", "'log'", "'save'", "'fill'", "'move'", "'place'", 
                     "'rotate'", "'scale'", "'assign'", "'('", "')'", "'^'", 
                     "'_'", "'~'", "'!='", "'&'", "'|'", "<INVALID>", "'\r'", 
                     "<INVALID>", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", 
                     "'='", "'>'", "'<'", "'>='", "'<='", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'.'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "WS", "CR", 
                      "COM_SIGN", "PLUS", "MINUS", "MULTIPLICATION", "DIVISION", 
                      "MODULO", "NEG", "EQ", "GREATER", "LOWER", "GT", "LT", 
                      "TEXT", "TYPE", "COLOR", "DOT", "DIGIT", "NAME" ]

    RULE_program = 0
    RULE_instruction = 1
    RULE_block = 2
    RULE_loop = 3
    RULE_check = 4
    RULE_condition_block = 5
    RULE_shape = 6
    RULE_point = 7
    RULE_segment = 8
    RULE_circle = 9
    RULE_polygon = 10
    RULE_groupMember = 11
    RULE_transformable = 12
    RULE_group = 13
    RULE_type_definition = 14
    RULE_num = 15
    RULE_iterator = 16
    RULE_canvas = 17
    RULE_draw = 18
    RULE_log = 19
    RULE_save = 20
    RULE_transformation = 21
    RULE_fill = 22
    RULE_move = 23
    RULE_place = 24
    RULE_rotate = 25
    RULE_scale = 26
    RULE_assign = 27
    RULE_expr = 28
    RULE_atom = 29
    RULE_arithmetic = 30
    RULE_logic = 31
    RULE_neq = 32
    RULE_flt = 33
    RULE_itr = 34

    ruleNames =  [ "program", "instruction", "block", "loop", "check", "condition_block", 
                   "shape", "point", "segment", "circle", "polygon", "groupMember", 
                   "transformable", "group", "type_definition", "num", "iterator", 
                   "canvas", "draw", "log", "save", "transformation", "fill", 
                   "move", "place", "rotate", "scale", "assign", "expr", 
                   "atom", "arithmetic", "logic", "neq", "flt", "itr" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    WS=39
    CR=40
    COM_SIGN=41
    PLUS=42
    MINUS=43
    MULTIPLICATION=44
    DIVISION=45
    MODULO=46
    NEG=47
    EQ=48
    GREATER=49
    LOWER=50
    GT=51
    LT=52
    TEXT=53
    TYPE=54
    COLOR=55
    DOT=56
    DIGIT=57
    NAME=58

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def canvas(self):
            return self.getTypedRuleContext(GraphlyParser.CanvasContext,0)


        def EOF(self):
            return self.getToken(GraphlyParser.EOF, 0)

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def COM_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.COM_SIGN)
            else:
                return self.getToken(GraphlyParser.COM_SIGN, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = GraphlyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 93
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 73
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 70
                            self.match(GraphlyParser.T__0) 
                        self.state = 75
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                    self.state = 76
                    self.instruction()
                    self.state = 80
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==GraphlyParser.WS:
                        self.state = 77
                        self.match(GraphlyParser.WS)
                        self.state = 82
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 84
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==GraphlyParser.COM_SIGN:
                        self.state = 83
                        self.match(GraphlyParser.COM_SIGN)


                    self.state = 87 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 86
                            self.match(GraphlyParser.T__0)

                        else:
                            raise NoViableAltException(self)
                        self.state = 89 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
             
                self.state = 95
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 96
            self.canvas()
            self.state = 100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 97
                self.match(GraphlyParser.WS)
                self.state = 102
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.COM_SIGN:
                self.state = 103
                self.match(GraphlyParser.COM_SIGN)


            self.state = 129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__0:
                self.state = 107 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 106
                        self.match(GraphlyParser.T__0)

                    else:
                        raise NoViableAltException(self)
                    self.state = 109 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 111
                self.instruction()
                self.state = 115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 112
                    self.match(GraphlyParser.WS)
                    self.state = 117
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GraphlyParser.COM_SIGN:
                    self.state = 118
                    self.match(GraphlyParser.COM_SIGN)


                self.state = 124
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 121
                        self.match(GraphlyParser.T__0) 
                    self.state = 126
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                self.state = 131
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 132
            self.match(GraphlyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shape(self):
            return self.getTypedRuleContext(GraphlyParser.ShapeContext,0)


        def type_definition(self):
            return self.getTypedRuleContext(GraphlyParser.Type_definitionContext,0)


        def draw(self):
            return self.getTypedRuleContext(GraphlyParser.DrawContext,0)


        def transformation(self):
            return self.getTypedRuleContext(GraphlyParser.TransformationContext,0)


        def group(self):
            return self.getTypedRuleContext(GraphlyParser.GroupContext,0)


        def loop(self):
            return self.getTypedRuleContext(GraphlyParser.LoopContext,0)


        def check(self):
            return self.getTypedRuleContext(GraphlyParser.CheckContext,0)


        def assign(self):
            return self.getTypedRuleContext(GraphlyParser.AssignContext,0)


        def log(self):
            return self.getTypedRuleContext(GraphlyParser.LogContext,0)


        def save(self):
            return self.getTypedRuleContext(GraphlyParser.SaveContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = GraphlyParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instruction)
        try:
            self.state = 150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 134
                self.shape()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 135
                self.type_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 136
                self.draw()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 137
                self.transformation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 138
                self.group()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 139
                self.loop()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 140
                self.check()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 141
                self.assign()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 142
                self.log()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 143
                self.save()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 147
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 144
                        self.match(GraphlyParser.WS) 
                    self.state = 149
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = GraphlyParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 169
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 155
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 152
                            self.match(GraphlyParser.WS) 
                        self.state = 157
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                    self.state = 158
                    self.instruction()
                    self.state = 162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==GraphlyParser.WS:
                        self.state = 159
                        self.match(GraphlyParser.WS)
                        self.state = 164
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 165
                    self.match(GraphlyParser.T__0) 
                self.state = 171
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.starting = None # ExprContext
            self.until = None # ExprContext
            self.step = None # ExprContext

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop" ):
                listener.enterLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop" ):
                listener.exitLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = GraphlyParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self.match(GraphlyParser.T__1)
            self.state = 174 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 173
                self.match(GraphlyParser.WS)
                self.state = 176 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 178
            localctx.name = self.match(GraphlyParser.NAME)
            self.state = 180 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 179
                self.match(GraphlyParser.WS)
                self.state = 182 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 184
            self.match(GraphlyParser.T__2)
            self.state = 186 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 185
                self.match(GraphlyParser.WS)
                self.state = 188 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 190
            localctx.starting = self.expr(0)
            self.state = 192 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 191
                self.match(GraphlyParser.WS)
                self.state = 194 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 196
            self.match(GraphlyParser.T__3)
            self.state = 198 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 197
                self.match(GraphlyParser.WS)
                self.state = 200 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 202
            localctx.until = self.expr(0)
            self.state = 204 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 203
                self.match(GraphlyParser.WS)
                self.state = 206 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 208
            self.match(GraphlyParser.T__4)
            self.state = 210 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 209
                self.match(GraphlyParser.WS)
                self.state = 212 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 214
            localctx.step = self.expr(0)
            self.state = 216 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 215
                self.match(GraphlyParser.WS)
                self.state = 218 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 220
            self.match(GraphlyParser.T__5)
            self.state = 224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 221
                self.match(GraphlyParser.WS)
                self.state = 226
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 227
            self.match(GraphlyParser.T__0)
            self.state = 228
            self.block()
            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 229
                self.match(GraphlyParser.WS)
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 235
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Condition_blockContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Condition_blockContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck" ):
                listener.enterCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck" ):
                listener.exitCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheck" ):
                return visitor.visitCheck(self)
            else:
                return visitor.visitChildren(self)




    def check(self):

        localctx = GraphlyParser.CheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 237
                self.match(GraphlyParser.WS)
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 243
            self.match(GraphlyParser.T__7)
            self.state = 245 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 244
                self.match(GraphlyParser.WS)
                self.state = 247 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 249
            self.condition_block()
            self.state = 265
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 250
                    self.match(GraphlyParser.T__8)
                    self.state = 252 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 251
                        self.match(GraphlyParser.WS)
                        self.state = 254 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 256
                    self.match(GraphlyParser.T__7)
                    self.state = 258 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 257
                        self.match(GraphlyParser.WS)
                        self.state = 260 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 262
                    self.condition_block() 
                self.state = 267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

            self.state = 271
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 268
                    self.match(GraphlyParser.WS) 
                self.state = 273
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.T__8:
                self.state = 274
                self.match(GraphlyParser.T__8)
                self.state = 276 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 275
                    self.match(GraphlyParser.WS)
                    self.state = 278 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 280
                self.match(GraphlyParser.T__5)
                self.state = 281
                self.match(GraphlyParser.T__0)
                self.state = 282
                self.block()


            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 285
                self.match(GraphlyParser.WS)
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 291
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_condition_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_block" ):
                listener.enterCondition_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_block" ):
                listener.exitCondition_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition_block" ):
                return visitor.visitCondition_block(self)
            else:
                return visitor.visitChildren(self)




    def condition_block(self):

        localctx = GraphlyParser.Condition_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_condition_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.expr(0)
            self.state = 295 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 294
                self.match(GraphlyParser.WS)
                self.state = 297 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 299
            self.match(GraphlyParser.T__5)
            self.state = 300
            self.match(GraphlyParser.T__0)
            self.state = 304
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 301
                    self.match(GraphlyParser.WS) 
                self.state = 306
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

            self.state = 307
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShapeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def point(self):
            return self.getTypedRuleContext(GraphlyParser.PointContext,0)


        def segment(self):
            return self.getTypedRuleContext(GraphlyParser.SegmentContext,0)


        def circle(self):
            return self.getTypedRuleContext(GraphlyParser.CircleContext,0)


        def polygon(self):
            return self.getTypedRuleContext(GraphlyParser.PolygonContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_shape

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape" ):
                listener.enterShape(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape" ):
                listener.exitShape(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShape" ):
                return visitor.visitShape(self)
            else:
                return visitor.visitChildren(self)




    def shape(self):

        localctx = GraphlyParser.ShapeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_shape)
        try:
            self.state = 313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 309
                self.point()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 310
                self.segment()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 311
                self.circle()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 312
                self.polygon()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_point

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoint" ):
                listener.enterPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoint" ):
                listener.exitPoint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPoint" ):
                return visitor.visitPoint(self)
            else:
                return visitor.visitChildren(self)




    def point(self):

        localctx = GraphlyParser.PointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_point)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 315
                self.match(GraphlyParser.WS)
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 321
            self.match(GraphlyParser.T__9)
            self.state = 323 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 322
                self.match(GraphlyParser.WS)
                self.state = 325 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 327
            self.match(GraphlyParser.NAME)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 328
                self.match(GraphlyParser.WS)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 334
            self.match(GraphlyParser.T__10)
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 335
                self.match(GraphlyParser.WS)
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 341
            localctx.x = self.expr(0)
            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 342
                self.match(GraphlyParser.WS)
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 348
            self.match(GraphlyParser.T__11)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 349
                self.match(GraphlyParser.WS)
                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 355
            localctx.y = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegment" ):
                listener.enterSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegment" ):
                listener.exitSegment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegment" ):
                return visitor.visitSegment(self)
            else:
                return visitor.visitChildren(self)




    def segment(self):

        localctx = GraphlyParser.SegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 357
                self.match(GraphlyParser.WS)
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 363
            self.match(GraphlyParser.T__12)
            self.state = 365 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 364
                self.match(GraphlyParser.WS)
                self.state = 367 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 369
            self.match(GraphlyParser.NAME)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 370
                self.match(GraphlyParser.WS)
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 376
            self.match(GraphlyParser.T__10)
            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 377
                self.match(GraphlyParser.WS)
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 383
            self.match(GraphlyParser.NAME)
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 384
                self.match(GraphlyParser.WS)
                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 390
            self.match(GraphlyParser.T__11)
            self.state = 392 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 391
                self.match(GraphlyParser.WS)
                self.state = 394 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 396
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CircleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_circle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCircle" ):
                listener.enterCircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCircle" ):
                listener.exitCircle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCircle" ):
                return visitor.visitCircle(self)
            else:
                return visitor.visitChildren(self)




    def circle(self):

        localctx = GraphlyParser.CircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_circle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 398
                self.match(GraphlyParser.WS)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 404
            self.match(GraphlyParser.T__13)
            self.state = 406 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 405
                self.match(GraphlyParser.WS)
                self.state = 408 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 410
            self.match(GraphlyParser.NAME)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 411
                self.match(GraphlyParser.WS)
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 417
            self.match(GraphlyParser.T__10)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 418
                self.match(GraphlyParser.WS)
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 424
            self.match(GraphlyParser.NAME)
            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 425
                self.match(GraphlyParser.WS)
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 431
            self.match(GraphlyParser.T__11)
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 432
                self.match(GraphlyParser.WS)
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 438
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolygonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_polygon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolygon" ):
                listener.enterPolygon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolygon" ):
                listener.exitPolygon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolygon" ):
                return visitor.visitPolygon(self)
            else:
                return visitor.visitChildren(self)




    def polygon(self):

        localctx = GraphlyParser.PolygonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_polygon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 440
                self.match(GraphlyParser.WS)
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 446
            self.match(GraphlyParser.T__14)
            self.state = 448 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 447
                self.match(GraphlyParser.WS)
                self.state = 450 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 452
            self.match(GraphlyParser.NAME)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 453
                self.match(GraphlyParser.WS)
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 459
            self.match(GraphlyParser.T__10)
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 460
                self.match(GraphlyParser.WS)
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 466
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_groupMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupMember" ):
                listener.enterGroupMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupMember" ):
                listener.exitGroupMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupMember" ):
                return visitor.visitGroupMember(self)
            else:
                return visitor.visitChildren(self)




    def groupMember(self):

        localctx = GraphlyParser.GroupMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_groupMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 468
                self.match(GraphlyParser.WS)
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 474
            self.match(GraphlyParser.NAME)
            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 475
                self.match(GraphlyParser.WS)
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 481
            self.match(GraphlyParser.T__15)
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 482
                self.match(GraphlyParser.WS)
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 488
            self.expr(0)
            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 489
                self.match(GraphlyParser.WS)
                self.state = 494
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 495
            self.match(GraphlyParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def groupMember(self):
            return self.getTypedRuleContext(GraphlyParser.GroupMemberContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformable" ):
                listener.enterTransformable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformable" ):
                listener.exitTransformable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformable" ):
                return visitor.visitTransformable(self)
            else:
                return visitor.visitChildren(self)




    def transformable(self):

        localctx = GraphlyParser.TransformableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_transformable)
        try:
            self.state = 499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 497
                self.match(GraphlyParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 498
                self.groupMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)

        def TYPE(self):
            return self.getToken(GraphlyParser.TYPE, 0)

        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = GraphlyParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 501
                self.match(GraphlyParser.WS)
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 507
            self.match(GraphlyParser.T__17)
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 508
                self.match(GraphlyParser.WS)
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 514
            self.match(GraphlyParser.LOWER)
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 515
                self.match(GraphlyParser.WS)
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 521
            self.match(GraphlyParser.TYPE)
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 522
                self.match(GraphlyParser.WS)
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 528
            self.match(GraphlyParser.GREATER)
            self.state = 530 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 529
                self.match(GraphlyParser.WS)
                self.state = 532 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 534
            self.match(GraphlyParser.NAME)
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 535
                self.match(GraphlyParser.WS)
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 541
            self.match(GraphlyParser.T__10)
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 542
                self.match(GraphlyParser.WS)
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 548
            self.match(GraphlyParser.NAME)
            self.state = 552
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 549
                    self.match(GraphlyParser.WS) 
                self.state = 554
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__11:
                self.state = 555
                self.match(GraphlyParser.T__11)
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 556
                    self.match(GraphlyParser.WS)
                    self.state = 561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 562
                self.match(GraphlyParser.NAME)
                self.state = 566
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 563
                        self.match(GraphlyParser.WS) 
                    self.state = 568
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num(self):
            return self.getTypedRuleContext(GraphlyParser.NumContext,0)


        def iterator(self):
            return self.getTypedRuleContext(GraphlyParser.IteratorContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_definition" ):
                listener.enterType_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_definition" ):
                listener.exitType_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_definition" ):
                return visitor.visitType_definition(self)
            else:
                return visitor.visitChildren(self)




    def type_definition(self):

        localctx = GraphlyParser.Type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_type_definition)
        try:
            self.state = 576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                self.num()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.iterator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_num

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum" ):
                listener.enterNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum" ):
                listener.exitNum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum" ):
                return visitor.visitNum(self)
            else:
                return visitor.visitChildren(self)




    def num(self):

        localctx = GraphlyParser.NumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_num)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 578
                self.match(GraphlyParser.WS)
                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 584
            self.match(GraphlyParser.T__18)
            self.state = 586 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 585
                self.match(GraphlyParser.WS)
                self.state = 588 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 590
            self.match(GraphlyParser.NAME)
            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 591
                self.match(GraphlyParser.WS)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 597
            self.match(GraphlyParser.T__10)
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 598
                self.match(GraphlyParser.WS)
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 604
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterator" ):
                listener.enterIterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterator" ):
                listener.exitIterator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterator" ):
                return visitor.visitIterator(self)
            else:
                return visitor.visitChildren(self)




    def iterator(self):

        localctx = GraphlyParser.IteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 606
                self.match(GraphlyParser.WS)
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 612
            self.match(GraphlyParser.T__19)
            self.state = 614 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 613
                self.match(GraphlyParser.WS)
                self.state = 616 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 618
            self.match(GraphlyParser.NAME)
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 619
                self.match(GraphlyParser.WS)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 625
            self.match(GraphlyParser.T__10)
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 626
                self.match(GraphlyParser.WS)
                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 632
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CanvasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_canvas

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCanvas" ):
                listener.enterCanvas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCanvas" ):
                listener.exitCanvas(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCanvas" ):
                return visitor.visitCanvas(self)
            else:
                return visitor.visitChildren(self)




    def canvas(self):

        localctx = GraphlyParser.CanvasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_canvas)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 634
                self.match(GraphlyParser.WS)
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 640
            self.match(GraphlyParser.T__20)
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 641
                self.match(GraphlyParser.WS)
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 647
            self.match(GraphlyParser.T__10)
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 648
                self.match(GraphlyParser.WS)
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 654
            localctx.x = self.expr(0)
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 655
                self.match(GraphlyParser.WS)
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 661
            self.match(GraphlyParser.T__11)
            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 662
                self.match(GraphlyParser.WS)
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 668
            localctx.y = self.expr(0)
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 669
                self.match(GraphlyParser.WS)
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 675
            self.match(GraphlyParser.T__11)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 676
                self.match(GraphlyParser.WS)
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 682
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DrawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_draw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDraw" ):
                listener.enterDraw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDraw" ):
                listener.exitDraw(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDraw" ):
                return visitor.visitDraw(self)
            else:
                return visitor.visitChildren(self)




    def draw(self):

        localctx = GraphlyParser.DrawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_draw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 684
                self.match(GraphlyParser.WS)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 690
            self.match(GraphlyParser.T__21)
            self.state = 692 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 691
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 694 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

            self.state = 696
            localctx.arg = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_log

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExprLogContext(LogContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.LogContext
            super().__init__(parser)
            self.arg = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprLog" ):
                listener.enterExprLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprLog" ):
                listener.exitExprLog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprLog" ):
                return visitor.visitExprLog(self)
            else:
                return visitor.visitChildren(self)


    class TextLogContext(LogContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.LogContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(GraphlyParser.TEXT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextLog" ):
                listener.enterTextLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextLog" ):
                listener.exitTextLog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextLog" ):
                return visitor.visitTextLog(self)
            else:
                return visitor.visitChildren(self)


    class ShapeLogContext(LogContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.LogContext
            super().__init__(parser)
            self.arg = None # TransformableContext
            self.copyFrom(ctx)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShapeLog" ):
                listener.enterShapeLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShapeLog" ):
                listener.exitShapeLog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShapeLog" ):
                return visitor.visitShapeLog(self)
            else:
                return visitor.visitChildren(self)



    def log(self):

        localctx = GraphlyParser.LogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_log)
        self._la = 0 # Token type
        try:
            self.state = 737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.ShapeLogContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 698
                    self.match(GraphlyParser.WS)
                    self.state = 703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 704
                self.match(GraphlyParser.T__22)
                self.state = 706 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 705
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 708 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                self.state = 710
                localctx.arg = self.transformable()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.ExprLogContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 711
                    self.match(GraphlyParser.WS)
                    self.state = 716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 717
                self.match(GraphlyParser.T__22)
                self.state = 719 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 718
                    self.match(GraphlyParser.WS)
                    self.state = 721 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 723
                localctx.arg = self.expr(0)
                pass

            elif la_ == 3:
                localctx = GraphlyParser.TextLogContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 724
                    self.match(GraphlyParser.WS)
                    self.state = 729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 730
                self.match(GraphlyParser.T__22)
                self.state = 732 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 731
                    self.match(GraphlyParser.WS)
                    self.state = 734 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 736
                self.match(GraphlyParser.TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_save

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSave" ):
                listener.enterSave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSave" ):
                listener.exitSave(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSave" ):
                return visitor.visitSave(self)
            else:
                return visitor.visitChildren(self)




    def save(self):

        localctx = GraphlyParser.SaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_save)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.match(GraphlyParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fill(self):
            return self.getTypedRuleContext(GraphlyParser.FillContext,0)


        def move(self):
            return self.getTypedRuleContext(GraphlyParser.MoveContext,0)


        def place(self):
            return self.getTypedRuleContext(GraphlyParser.PlaceContext,0)


        def rotate(self):
            return self.getTypedRuleContext(GraphlyParser.RotateContext,0)


        def scale(self):
            return self.getTypedRuleContext(GraphlyParser.ScaleContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformation" ):
                listener.enterTransformation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformation" ):
                listener.exitTransformation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformation" ):
                return visitor.visitTransformation(self)
            else:
                return visitor.visitChildren(self)




    def transformation(self):

        localctx = GraphlyParser.TransformationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_transformation)
        try:
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 741
                self.fill()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 742
                self.move()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 743
                self.place()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 744
                self.rotate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 745
                self.scale()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FillContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_fill

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFill" ):
                listener.enterFill(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFill" ):
                listener.exitFill(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFill" ):
                return visitor.visitFill(self)
            else:
                return visitor.visitChildren(self)




    def fill(self):

        localctx = GraphlyParser.FillContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_fill)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 748
                self.match(GraphlyParser.WS)
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 754
            self.match(GraphlyParser.T__24)
            self.state = 756 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 755
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 758 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

            self.state = 760
            localctx.arg = self.transformable()
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 761
                self.match(GraphlyParser.WS)
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 767
            self.match(GraphlyParser.T__10)
            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 768
                self.match(GraphlyParser.WS)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 774
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext
            self.dx = None # ExprContext
            self.dy = None # ExprContext

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMove" ):
                return visitor.visitMove(self)
            else:
                return visitor.visitChildren(self)




    def move(self):

        localctx = GraphlyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 776
                self.match(GraphlyParser.WS)
                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 782
            self.match(GraphlyParser.T__25)
            self.state = 784 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 783
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 786 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 788
            localctx.arg = self.transformable()
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 789
                self.match(GraphlyParser.WS)
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 795
            self.match(GraphlyParser.T__10)
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 796
                self.match(GraphlyParser.WS)
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 802
            localctx.dx = self.expr(0)
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 803
                self.match(GraphlyParser.WS)
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 809
            self.match(GraphlyParser.T__11)
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 810
                self.match(GraphlyParser.WS)
                self.state = 815
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 816
            localctx.dy = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_place

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlace" ):
                listener.enterPlace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlace" ):
                listener.exitPlace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = GraphlyParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_place)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 818
                self.match(GraphlyParser.WS)
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 824
            self.match(GraphlyParser.T__26)
            self.state = 826 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 825
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 828 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

            self.state = 830
            localctx.arg1 = self.transformable()
            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 831
                self.match(GraphlyParser.WS)
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 837
            self.match(GraphlyParser.T__10)
            self.state = 841
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 838
                    self.match(GraphlyParser.WS) 
                self.state = 843
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

            self.state = 844
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RotateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.angle = None # ExprContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_rotate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRotate" ):
                listener.enterRotate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRotate" ):
                listener.exitRotate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRotate" ):
                return visitor.visitRotate(self)
            else:
                return visitor.visitChildren(self)




    def rotate(self):

        localctx = GraphlyParser.RotateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_rotate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 846
                self.match(GraphlyParser.WS)
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 852
            self.match(GraphlyParser.T__27)
            self.state = 854 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 853
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 856 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

            self.state = 858
            localctx.arg1 = self.transformable()
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 859
                self.match(GraphlyParser.WS)
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 865
            self.match(GraphlyParser.T__10)
            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 866
                self.match(GraphlyParser.WS)
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 872
            localctx.angle = self.expr(0)
            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 873
                self.match(GraphlyParser.WS)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 879
            self.match(GraphlyParser.T__11)
            self.state = 883
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 880
                    self.match(GraphlyParser.WS) 
                self.state = 885
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

            self.state = 886
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.k = None # ExprContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScale" ):
                listener.enterScale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScale" ):
                listener.exitScale(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScale" ):
                return visitor.visitScale(self)
            else:
                return visitor.visitChildren(self)




    def scale(self):

        localctx = GraphlyParser.ScaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_scale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 888
                self.match(GraphlyParser.WS)
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 894
            self.match(GraphlyParser.T__28)
            self.state = 896 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 895
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 898 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

            self.state = 900
            localctx.arg1 = self.transformable()
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 901
                self.match(GraphlyParser.WS)
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 907
            self.match(GraphlyParser.T__10)
            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 908
                self.match(GraphlyParser.WS)
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 914
            localctx.k = self.expr(0)
            self.state = 918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 915
                self.match(GraphlyParser.WS)
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 921
            self.match(GraphlyParser.T__11)
            self.state = 925
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 922
                    self.match(GraphlyParser.WS) 
                self.state = 927
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

            self.state = 928
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_assign

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NumAssignContext(AssignContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AssignContext
            super().__init__(parser)
            self.arg1 = None # TransformableContext
            self.arg2 = None # ExprContext
            self.copyFrom(ctx)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumAssign" ):
                listener.enterNumAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumAssign" ):
                listener.exitNumAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumAssign" ):
                return visitor.visitNumAssign(self)
            else:
                return visitor.visitChildren(self)


    class CopyAssignContext(AssignContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AssignContext
            super().__init__(parser)
            self.arg1 = None # TransformableContext
            self.arg2 = None # TransformableContext
            self.copyFrom(ctx)

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyAssign" ):
                listener.enterCopyAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyAssign" ):
                listener.exitCopyAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyAssign" ):
                return visitor.visitCopyAssign(self)
            else:
                return visitor.visitChildren(self)



    def assign(self):

        localctx = GraphlyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.state = 986
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.CopyAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 930
                    self.match(GraphlyParser.WS)
                    self.state = 935
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 936
                self.match(GraphlyParser.T__29)
                self.state = 938 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 937
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 940 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

                self.state = 942
                localctx.arg1 = self.transformable()
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 943
                    self.match(GraphlyParser.WS)
                    self.state = 948
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 949
                self.match(GraphlyParser.T__10)
                self.state = 953
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 950
                        self.match(GraphlyParser.WS) 
                    self.state = 955
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

                self.state = 956
                localctx.arg2 = self.transformable()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.NumAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 958
                    self.match(GraphlyParser.WS)
                    self.state = 963
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 964
                self.match(GraphlyParser.T__29)
                self.state = 966 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 965
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 968 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                self.state = 970
                localctx.arg1 = self.transformable()
                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 971
                    self.match(GraphlyParser.WS)
                    self.state = 976
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 977
                self.match(GraphlyParser.T__10)
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 978
                    self.match(GraphlyParser.WS)
                    self.state = 983
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 984
                localctx.arg2 = self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MinusOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)
        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinusOpExpr" ):
                listener.enterMinusOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinusOpExpr" ):
                listener.exitMinusOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinusOpExpr" ):
                return visitor.visitMinusOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class RoundingOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoundingOpExpr" ):
                listener.enterRoundingOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoundingOpExpr" ):
                listener.exitRoundingOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoundingOpExpr" ):
                return visitor.visitRoundingOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class BooleanOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def LT(self):
            return self.getToken(GraphlyParser.LT, 0)
        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)
        def GT(self):
            return self.getToken(GraphlyParser.GT, 0)
        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)
        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOpExpr" ):
                listener.enterBooleanOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOpExpr" ):
                listener.exitBooleanOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOpExpr" ):
                return visitor.visitBooleanOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def MULTIPLICATION(self):
            return self.getToken(GraphlyParser.MULTIPLICATION, 0)
        def DIVISION(self):
            return self.getToken(GraphlyParser.DIVISION, 0)
        def MODULO(self):
            return self.getToken(GraphlyParser.MODULO, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)
        def PLUS(self):
            return self.getToken(GraphlyParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOpExpr" ):
                listener.enterArithmeticOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOpExpr" ):
                listener.exitArithmeticOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOpExpr" ):
                return visitor.visitArithmeticOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class NegationOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEG(self):
            return self.getToken(GraphlyParser.NEG, 0)
        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegationOpExpr" ):
                listener.enterNegationOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegationOpExpr" ):
                listener.exitNegationOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNegationOpExpr" ):
                return visitor.visitNegationOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class AtomExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(GraphlyParser.AtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomExpr" ):
                listener.enterAtomExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomExpr" ):
                listener.exitAtomExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomExpr" ):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpr" ):
                listener.enterParenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpr" ):
                listener.exitParenExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpr" ):
                return visitor.visitParenExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GraphlyParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.T__30]:
                localctx = GraphlyParser.ParenExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 989
                self.match(GraphlyParser.T__30)
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 990
                    self.match(GraphlyParser.WS)
                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 996
                self.expr(0)
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 997
                    self.match(GraphlyParser.WS)
                    self.state = 1002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1003
                self.match(GraphlyParser.T__31)
                pass
            elif token in [GraphlyParser.T__32, GraphlyParser.T__33, GraphlyParser.T__34]:
                localctx = GraphlyParser.RoundingOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1005
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__32) | (1 << GraphlyParser.T__33) | (1 << GraphlyParser.T__34))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1006
                    self.match(GraphlyParser.WS)
                    self.state = 1011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1012
                self.expr(9)
                pass
            elif token in [GraphlyParser.MINUS]:
                localctx = GraphlyParser.MinusOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1013
                self.match(GraphlyParser.MINUS)
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1014
                    self.match(GraphlyParser.WS)
                    self.state = 1019
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1020
                self.expr(8)
                pass
            elif token in [GraphlyParser.NEG]:
                localctx = GraphlyParser.NegationOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1021
                self.match(GraphlyParser.NEG)
                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1022
                    self.match(GraphlyParser.WS)
                    self.state = 1027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1028
                self.expr(4)
                pass
            elif token in [GraphlyParser.DOT, GraphlyParser.DIGIT, GraphlyParser.NAME]:
                localctx = GraphlyParser.AtomExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1029
                self.atom()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1109
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1107
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                    if la_ == 1:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1032
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1036
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1033
                            self.match(GraphlyParser.WS)
                            self.state = 1038
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1039
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1043
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1040
                            self.match(GraphlyParser.WS)
                            self.state = 1045
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1046
                        localctx.right = self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1047
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1051
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1048
                            self.match(GraphlyParser.WS)
                            self.state = 1053
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1054
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==GraphlyParser.PLUS or _la==GraphlyParser.MINUS):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1058
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1055
                            self.match(GraphlyParser.WS)
                            self.state = 1060
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1061
                        localctx.right = self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1062
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1066
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1063
                            self.match(GraphlyParser.WS)
                            self.state = 1068
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1069
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__35) | (1 << GraphlyParser.EQ) | (1 << GraphlyParser.GREATER) | (1 << GraphlyParser.LOWER) | (1 << GraphlyParser.GT) | (1 << GraphlyParser.LT))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1073
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1070
                            self.match(GraphlyParser.WS)
                            self.state = 1075
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1076
                        localctx.right = self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1077
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1081
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1078
                            self.match(GraphlyParser.WS)
                            self.state = 1083
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1084
                        localctx.op = self.match(GraphlyParser.T__36)
                        self.state = 1088
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1085
                            self.match(GraphlyParser.WS)
                            self.state = 1090
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1091
                        localctx.right = self.expr(4)
                        pass

                    elif la_ == 5:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1092
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1096
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1093
                            self.match(GraphlyParser.WS)
                            self.state = 1098
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1099
                        localctx.op = self.match(GraphlyParser.T__37)
                        self.state = 1103
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1100
                            self.match(GraphlyParser.WS)
                            self.state = 1105
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1106
                        localctx.right = self.expr(3)
                        pass

             
                self.state = 1111
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_atom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class VarAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarAtom" ):
                listener.enterVarAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarAtom" ):
                listener.exitVarAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarAtom" ):
                return visitor.visitVarAtom(self)
            else:
                return visitor.visitChildren(self)


    class IntAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def itr(self):
            return self.getTypedRuleContext(GraphlyParser.ItrContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntAtom" ):
                listener.enterIntAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntAtom" ):
                listener.exitIntAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntAtom" ):
                return visitor.visitIntAtom(self)
            else:
                return visitor.visitChildren(self)


    class FltAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def flt(self):
            return self.getTypedRuleContext(GraphlyParser.FltContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFltAtom" ):
                listener.enterFltAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFltAtom" ):
                listener.exitFltAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFltAtom" ):
                return visitor.visitFltAtom(self)
            else:
                return visitor.visitChildren(self)



    def atom(self):

        localctx = GraphlyParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_atom)
        try:
            self.state = 1115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.IntAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1112
                self.itr()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.FltAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1113
                self.flt()
                pass

            elif la_ == 3:
                localctx = GraphlyParser.VarAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1114
                self.match(GraphlyParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(GraphlyParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)

        def MULTIPLICATION(self):
            return self.getToken(GraphlyParser.MULTIPLICATION, 0)

        def DIVISION(self):
            return self.getToken(GraphlyParser.DIVISION, 0)

        def MODULO(self):
            return self.getToken(GraphlyParser.MODULO, 0)

        def getRuleIndex(self):
            return GraphlyParser.RULE_arithmetic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic" ):
                listener.enterArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic" ):
                listener.exitArithmetic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmetic" ):
                return visitor.visitArithmetic(self)
            else:
                return visitor.visitChildren(self)




    def arithmetic(self):

        localctx = GraphlyParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_arithmetic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.PLUS) | (1 << GraphlyParser.MINUS) | (1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)

        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)

        def GT(self):
            return self.getToken(GraphlyParser.GT, 0)

        def LT(self):
            return self.getToken(GraphlyParser.LT, 0)

        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)

        def neq(self):
            return self.getTypedRuleContext(GraphlyParser.NeqContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_logic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic" ):
                listener.enterLogic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic" ):
                listener.exitLogic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogic" ):
                return visitor.visitLogic(self)
            else:
                return visitor.visitChildren(self)




    def logic(self):

        localctx = GraphlyParser.LogicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_logic)
        try:
            self.state = 1125
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.GREATER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1119
                self.match(GraphlyParser.GREATER)
                pass
            elif token in [GraphlyParser.LOWER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1120
                self.match(GraphlyParser.LOWER)
                pass
            elif token in [GraphlyParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1121
                self.match(GraphlyParser.GT)
                pass
            elif token in [GraphlyParser.LT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1122
                self.match(GraphlyParser.LT)
                pass
            elif token in [GraphlyParser.EQ]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1123
                self.match(GraphlyParser.EQ)
                pass
            elif token in [GraphlyParser.NEG]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1124
                self.neq()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEG(self):
            return self.getToken(GraphlyParser.NEG, 0)

        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)

        def getRuleIndex(self):
            return GraphlyParser.RULE_neq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNeq" ):
                listener.enterNeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNeq" ):
                listener.exitNeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNeq" ):
                return visitor.visitNeq(self)
            else:
                return visitor.visitChildren(self)




    def neq(self):

        localctx = GraphlyParser.NeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_neq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self.match(GraphlyParser.NEG)
            self.state = 1128
            self.match(GraphlyParser.EQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FltContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(GraphlyParser.DOT, 0)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.DIGIT)
            else:
                return self.getToken(GraphlyParser.DIGIT, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_flt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlt" ):
                listener.enterFlt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlt" ):
                listener.exitFlt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlt" ):
                return visitor.visitFlt(self)
            else:
                return visitor.visitChildren(self)




    def flt(self):

        localctx = GraphlyParser.FltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_flt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.DIGIT:
                    self.state = 1130
                    self.match(GraphlyParser.DIGIT)
                    self.state = 1135
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1136
                self.match(GraphlyParser.DOT)


            self.state = 1140 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1139
                    self.match(GraphlyParser.DIGIT)

                else:
                    raise NoViableAltException(self)
                self.state = 1142 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.DIGIT)
            else:
                return self.getToken(GraphlyParser.DIGIT, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_itr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItr" ):
                listener.enterItr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItr" ):
                listener.exitItr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItr" ):
                return visitor.visitItr(self)
            else:
                return visitor.visitChildren(self)




    def itr(self):

        localctx = GraphlyParser.ItrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_itr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1144
                    self.match(GraphlyParser.DIGIT)

                else:
                    raise NoViableAltException(self)
                self.state = 1147 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[28] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         




