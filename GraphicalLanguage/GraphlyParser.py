# Generated from Graphly.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\64")
        buf.write("\u0416\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\3\2\7\2H\n\2\f\2")
        buf.write("\16\2K\13\2\3\2\3\2\6\2O\n\2\r\2\16\2P\7\2S\n\2\f\2\16")
        buf.write("\2V\13\2\3\2\3\2\6\2Z\n\2\r\2\16\2[\3\2\3\2\7\2`\n\2\f")
        buf.write("\2\16\2c\13\2\7\2e\n\2\f\2\16\2h\13\2\3\2\3\2\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\7\3t\n\3\f\3\16\3w\13\3\5\3y")
        buf.write("\n\3\3\4\7\4|\n\4\f\4\16\4\177\13\4\3\4\3\4\3\4\7\4\u0084")
        buf.write("\n\4\f\4\16\4\u0087\13\4\3\5\3\5\6\5\u008b\n\5\r\5\16")
        buf.write("\5\u008c\3\5\3\5\6\5\u0091\n\5\r\5\16\5\u0092\3\5\3\5")
        buf.write("\6\5\u0097\n\5\r\5\16\5\u0098\3\5\3\5\6\5\u009d\n\5\r")
        buf.write("\5\16\5\u009e\3\5\3\5\6\5\u00a3\n\5\r\5\16\5\u00a4\3\5")
        buf.write("\3\5\6\5\u00a9\n\5\r\5\16\5\u00aa\3\5\3\5\6\5\u00af\n")
        buf.write("\5\r\5\16\5\u00b0\3\5\3\5\6\5\u00b5\n\5\r\5\16\5\u00b6")
        buf.write("\3\5\3\5\3\5\3\5\7\5\u00bd\n\5\f\5\16\5\u00c0\13\5\3\5")
        buf.write("\3\5\3\6\7\6\u00c5\n\6\f\6\16\6\u00c8\13\6\3\6\3\6\6\6")
        buf.write("\u00cc\n\6\r\6\16\6\u00cd\3\6\3\6\3\6\6\6\u00d3\n\6\r")
        buf.write("\6\16\6\u00d4\3\6\3\6\6\6\u00d9\n\6\r\6\16\6\u00da\3\6")
        buf.write("\7\6\u00de\n\6\f\6\16\6\u00e1\13\6\3\6\7\6\u00e4\n\6\f")
        buf.write("\6\16\6\u00e7\13\6\3\6\3\6\6\6\u00eb\n\6\r\6\16\6\u00ec")
        buf.write("\3\6\3\6\3\6\5\6\u00f2\n\6\3\6\7\6\u00f5\n\6\f\6\16\6")
        buf.write("\u00f8\13\6\3\6\3\6\3\7\3\7\6\7\u00fe\n\7\r\7\16\7\u00ff")
        buf.write("\3\7\3\7\3\7\7\7\u0105\n\7\f\7\16\7\u0108\13\7\3\7\3\7")
        buf.write("\3\b\3\b\3\b\3\b\5\b\u0110\n\b\3\t\7\t\u0113\n\t\f\t\16")
        buf.write("\t\u0116\13\t\3\t\3\t\6\t\u011a\n\t\r\t\16\t\u011b\3\t")
        buf.write("\3\t\7\t\u0120\n\t\f\t\16\t\u0123\13\t\3\t\3\t\7\t\u0127")
        buf.write("\n\t\f\t\16\t\u012a\13\t\3\t\3\t\7\t\u012e\n\t\f\t\16")
        buf.write("\t\u0131\13\t\3\t\3\t\7\t\u0135\n\t\f\t\16\t\u0138\13")
        buf.write("\t\3\t\3\t\3\n\7\n\u013d\n\n\f\n\16\n\u0140\13\n\3\n\3")
        buf.write("\n\6\n\u0144\n\n\r\n\16\n\u0145\3\n\3\n\7\n\u014a\n\n")
        buf.write("\f\n\16\n\u014d\13\n\3\n\3\n\7\n\u0151\n\n\f\n\16\n\u0154")
        buf.write("\13\n\3\n\3\n\7\n\u0158\n\n\f\n\16\n\u015b\13\n\3\n\3")
        buf.write("\n\6\n\u015f\n\n\r\n\16\n\u0160\3\n\3\n\3\13\7\13\u0166")
        buf.write("\n\13\f\13\16\13\u0169\13\13\3\13\3\13\6\13\u016d\n\13")
        buf.write("\r\13\16\13\u016e\3\13\3\13\7\13\u0173\n\13\f\13\16\13")
        buf.write("\u0176\13\13\3\13\3\13\7\13\u017a\n\13\f\13\16\13\u017d")
        buf.write("\13\13\3\13\3\13\7\13\u0181\n\13\f\13\16\13\u0184\13\13")
        buf.write("\3\13\3\13\7\13\u0188\n\13\f\13\16\13\u018b\13\13\3\13")
        buf.write("\3\13\3\f\7\f\u0190\n\f\f\f\16\f\u0193\13\f\3\f\3\f\6")
        buf.write("\f\u0197\n\f\r\f\16\f\u0198\3\f\3\f\7\f\u019d\n\f\f\f")
        buf.write("\16\f\u01a0\13\f\3\f\3\f\7\f\u01a4\n\f\f\f\16\f\u01a7")
        buf.write("\13\f\3\f\3\f\3\r\7\r\u01ac\n\r\f\r\16\r\u01af\13\r\3")
        buf.write("\r\3\r\6\r\u01b3\n\r\r\r\16\r\u01b4\3\r\3\r\7\r\u01b9")
        buf.write("\n\r\f\r\16\r\u01bc\13\r\3\r\3\r\7\r\u01c0\n\r\f\r\16")
        buf.write("\r\u01c3\13\r\3\r\3\r\7\r\u01c7\n\r\f\r\16\r\u01ca\13")
        buf.write("\r\3\r\3\r\7\r\u01ce\n\r\f\r\16\r\u01d1\13\r\3\r\3\r\7")
        buf.write("\r\u01d5\n\r\f\r\16\r\u01d8\13\r\7\r\u01da\n\r\f\r\16")
        buf.write("\r\u01dd\13\r\3\16\7\16\u01e0\n\16\f\16\16\16\u01e3\13")
        buf.write("\16\3\16\3\16\7\16\u01e7\n\16\f\16\16\16\u01ea\13\16\3")
        buf.write("\16\3\16\7\16\u01ee\n\16\f\16\16\16\u01f1\13\16\3\16\3")
        buf.write("\16\5\16\u01f5\n\16\3\16\7\16\u01f8\n\16\f\16\16\16\u01fb")
        buf.write("\13\16\3\16\3\16\6\16\u01ff\n\16\r\16\16\16\u0200\3\17")
        buf.write("\3\17\5\17\u0205\n\17\3\20\7\20\u0208\n\20\f\20\16\20")
        buf.write("\u020b\13\20\3\20\3\20\6\20\u020f\n\20\r\20\16\20\u0210")
        buf.write("\3\20\3\20\7\20\u0215\n\20\f\20\16\20\u0218\13\20\3\20")
        buf.write("\3\20\7\20\u021c\n\20\f\20\16\20\u021f\13\20\3\20\3\20")
        buf.write("\3\21\7\21\u0224\n\21\f\21\16\21\u0227\13\21\3\21\3\21")
        buf.write("\6\21\u022b\n\21\r\21\16\21\u022c\3\21\3\21\7\21\u0231")
        buf.write("\n\21\f\21\16\21\u0234\13\21\3\21\3\21\7\21\u0238\n\21")
        buf.write("\f\21\16\21\u023b\13\21\3\21\3\21\5\21\u023f\n\21\3\22")
        buf.write("\7\22\u0242\n\22\f\22\16\22\u0245\13\22\3\22\3\22\7\22")
        buf.write("\u0249\n\22\f\22\16\22\u024c\13\22\3\22\3\22\7\22\u0250")
        buf.write("\n\22\f\22\16\22\u0253\13\22\3\22\3\22\7\22\u0257\n\22")
        buf.write("\f\22\16\22\u025a\13\22\3\22\3\22\7\22\u025e\n\22\f\22")
        buf.write("\16\22\u0261\13\22\3\22\3\22\7\22\u0265\n\22\f\22\16\22")
        buf.write("\u0268\13\22\3\22\3\22\7\22\u026c\n\22\f\22\16\22\u026f")
        buf.write("\13\22\3\22\3\22\3\23\7\23\u0274\n\23\f\23\16\23\u0277")
        buf.write("\13\23\3\23\3\23\6\23\u027b\n\23\r\23\16\23\u027c\3\23")
        buf.write("\3\23\3\24\3\24\3\24\3\24\3\24\5\24\u0286\n\24\3\25\7")
        buf.write("\25\u0289\n\25\f\25\16\25\u028c\13\25\3\25\3\25\6\25\u0290")
        buf.write("\n\25\r\25\16\25\u0291\3\25\3\25\7\25\u0296\n\25\f\25")
        buf.write("\16\25\u0299\13\25\3\25\3\25\7\25\u029d\n\25\f\25\16\25")
        buf.write("\u02a0\13\25\3\25\3\25\3\26\7\26\u02a5\n\26\f\26\16\26")
        buf.write("\u02a8\13\26\3\26\3\26\6\26\u02ac\n\26\r\26\16\26\u02ad")
        buf.write("\3\26\3\26\7\26\u02b2\n\26\f\26\16\26\u02b5\13\26\3\26")
        buf.write("\3\26\7\26\u02b9\n\26\f\26\16\26\u02bc\13\26\3\26\3\26")
        buf.write("\5\26\u02c0\n\26\3\26\7\26\u02c3\n\26\f\26\16\26\u02c6")
        buf.write("\13\26\3\26\3\26\7\26\u02ca\n\26\f\26\16\26\u02cd\13\26")
        buf.write("\3\26\3\26\5\26\u02d1\n\26\3\27\7\27\u02d4\n\27\f\27\16")
        buf.write("\27\u02d7\13\27\3\27\3\27\6\27\u02db\n\27\r\27\16\27\u02dc")
        buf.write("\3\27\3\27\7\27\u02e1\n\27\f\27\16\27\u02e4\13\27\3\27")
        buf.write("\3\27\7\27\u02e8\n\27\f\27\16\27\u02eb\13\27\3\27\3\27")
        buf.write("\3\30\7\30\u02f0\n\30\f\30\16\30\u02f3\13\30\3\30\3\30")
        buf.write("\6\30\u02f7\n\30\r\30\16\30\u02f8\3\30\3\30\7\30\u02fd")
        buf.write("\n\30\f\30\16\30\u0300\13\30\3\30\3\30\7\30\u0304\n\30")
        buf.write("\f\30\16\30\u0307\13\30\3\30\3\30\5\30\u030b\n\30\3\30")
        buf.write("\7\30\u030e\n\30\f\30\16\30\u0311\13\30\3\30\3\30\7\30")
        buf.write("\u0315\n\30\f\30\16\30\u0318\13\30\3\30\3\30\3\31\7\31")
        buf.write("\u031d\n\31\f\31\16\31\u0320\13\31\3\31\3\31\6\31\u0324")
        buf.write("\n\31\r\31\16\31\u0325\3\31\3\31\7\31\u032a\n\31\f\31")
        buf.write("\16\31\u032d\13\31\3\31\3\31\7\31\u0331\n\31\f\31\16\31")
        buf.write("\u0334\13\31\3\31\3\31\3\32\3\32\3\32\7\32\u033b\n\32")
        buf.write("\f\32\16\32\u033e\13\32\3\32\3\32\7\32\u0342\n\32\f\32")
        buf.write("\16\32\u0345\13\32\3\32\3\32\3\32\3\32\7\32\u034b\n\32")
        buf.write("\f\32\16\32\u034e\13\32\3\32\3\32\3\32\7\32\u0353\n\32")
        buf.write("\f\32\16\32\u0356\13\32\3\32\3\32\5\32\u035a\n\32\3\32")
        buf.write("\3\32\7\32\u035e\n\32\f\32\16\32\u0361\13\32\3\32\3\32")
        buf.write("\7\32\u0365\n\32\f\32\16\32\u0368\13\32\3\32\3\32\3\32")
        buf.write("\7\32\u036d\n\32\f\32\16\32\u0370\13\32\3\32\3\32\7\32")
        buf.write("\u0374\n\32\f\32\16\32\u0377\13\32\3\32\3\32\3\32\7\32")
        buf.write("\u037c\n\32\f\32\16\32\u037f\13\32\3\32\3\32\7\32\u0383")
        buf.write("\n\32\f\32\16\32\u0386\13\32\3\32\7\32\u0389\n\32\f\32")
        buf.write("\16\32\u038c\13\32\3\33\3\33\3\33\5\33\u0391\n\33\3\34")
        buf.write("\3\34\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u039b\n\35\3")
        buf.write("\36\3\36\3\36\3\37\7\37\u03a1\n\37\f\37\16\37\u03a4\13")
        buf.write("\37\3\37\3\37\5\37\u03a8\n\37\3\37\7\37\u03ab\n\37\f\37")
        buf.write("\16\37\u03ae\13\37\3\37\3\37\7\37\u03b2\n\37\f\37\16\37")
        buf.write("\u03b5\13\37\3\37\3\37\5\37\u03b9\n\37\3\37\3\37\5\37")
        buf.write("\u03bd\n\37\3\37\7\37\u03c0\n\37\f\37\16\37\u03c3\13\37")
        buf.write("\3\37\3\37\7\37\u03c7\n\37\f\37\16\37\u03ca\13\37\3\37")
        buf.write("\3\37\5\37\u03ce\n\37\5\37\u03d0\n\37\3 \5 \u03d3\n \3")
        buf.write(" \3 \5 \u03d7\n \3 \3 \3 \5 \u03dc\n \7 \u03de\n \f \16")
        buf.write(" \u03e1\13 \3!\7!\u03e4\n!\f!\16!\u03e7\13!\3!\5!\u03ea")
        buf.write("\n!\3!\6!\u03ed\n!\r!\16!\u03ee\3\"\3\"\5\"\u03f3\n\"")
        buf.write("\3\"\7\"\u03f6\n\"\f\"\16\"\u03f9\13\"\3\"\3\"\7\"\u03fd")
        buf.write("\n\"\f\"\16\"\u0400\13\"\3\"\3\"\5\"\u0404\n\"\3\"\7\"")
        buf.write("\u0407\n\"\f\"\16\"\u040a\13\"\7\"\u040c\n\"\f\"\16\"")
        buf.write("\u040f\13\"\3#\6#\u0412\n#\r#\16#\u0413\3#\2\3\62$\2\4")
        buf.write("\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BD\2\5\3\2&*\4\2  ,\60\3\2!\"\2\u049f\2T\3\2\2")
        buf.write("\2\4x\3\2\2\2\6\u0085\3\2\2\2\b\u0088\3\2\2\2\n\u00c6")
        buf.write("\3\2\2\2\f\u00fb\3\2\2\2\16\u010f\3\2\2\2\20\u0114\3\2")
        buf.write("\2\2\22\u013e\3\2\2\2\24\u0167\3\2\2\2\26\u0191\3\2\2")
        buf.write("\2\30\u01ad\3\2\2\2\32\u01e1\3\2\2\2\34\u0204\3\2\2\2")
        buf.write("\36\u0209\3\2\2\2 \u0225\3\2\2\2\"\u0243\3\2\2\2$\u0275")
        buf.write("\3\2\2\2&\u0285\3\2\2\2(\u028a\3\2\2\2*\u02a6\3\2\2\2")
        buf.write(",\u02d5\3\2\2\2.\u02f1\3\2\2\2\60\u031e\3\2\2\2\62\u0359")
        buf.write("\3\2\2\2\64\u0390\3\2\2\2\66\u0392\3\2\2\28\u039a\3\2")
        buf.write("\2\2:\u039c\3\2\2\2<\u03cf\3\2\2\2>\u03d2\3\2\2\2@\u03e9")
        buf.write("\3\2\2\2B\u03f2\3\2\2\2D\u0411\3\2\2\2FH\7\3\2\2GF\3\2")
        buf.write("\2\2HK\3\2\2\2IG\3\2\2\2IJ\3\2\2\2JL\3\2\2\2KI\3\2\2\2")
        buf.write("LN\5\4\3\2MO\7\3\2\2NM\3\2\2\2OP\3\2\2\2PN\3\2\2\2PQ\3")
        buf.write("\2\2\2QS\3\2\2\2RI\3\2\2\2SV\3\2\2\2TR\3\2\2\2TU\3\2\2")
        buf.write("\2UW\3\2\2\2VT\3\2\2\2Wf\5\"\22\2XZ\7\3\2\2YX\3\2\2\2")
        buf.write("Z[\3\2\2\2[Y\3\2\2\2[\\\3\2\2\2\\]\3\2\2\2]a\5\4\3\2^")
        buf.write("`\7\3\2\2_^\3\2\2\2`c\3\2\2\2a_\3\2\2\2ab\3\2\2\2be\3")
        buf.write("\2\2\2ca\3\2\2\2dY\3\2\2\2eh\3\2\2\2fd\3\2\2\2fg\3\2\2")
        buf.write("\2gi\3\2\2\2hf\3\2\2\2ij\7\2\2\3j\3\3\2\2\2ky\5\16\b\2")
        buf.write("ly\5\34\17\2my\5$\23\2ny\5&\24\2oy\5\30\r\2py\5\b\5\2")
        buf.write("qy\5\n\6\2rt\7#\2\2sr\3\2\2\2tw\3\2\2\2us\3\2\2\2uv\3")
        buf.write("\2\2\2vy\3\2\2\2wu\3\2\2\2xk\3\2\2\2xl\3\2\2\2xm\3\2\2")
        buf.write("\2xn\3\2\2\2xo\3\2\2\2xp\3\2\2\2xq\3\2\2\2xu\3\2\2\2y")
        buf.write("\5\3\2\2\2z|\7#\2\2{z\3\2\2\2|\177\3\2\2\2}{\3\2\2\2}")
        buf.write("~\3\2\2\2~\u0080\3\2\2\2\177}\3\2\2\2\u0080\u0081\5\4")
        buf.write("\3\2\u0081\u0082\7\3\2\2\u0082\u0084\3\2\2\2\u0083}\3")
        buf.write("\2\2\2\u0084\u0087\3\2\2\2\u0085\u0083\3\2\2\2\u0085\u0086")
        buf.write("\3\2\2\2\u0086\7\3\2\2\2\u0087\u0085\3\2\2\2\u0088\u008a")
        buf.write("\7\4\2\2\u0089\u008b\7#\2\2\u008a\u0089\3\2\2\2\u008b")
        buf.write("\u008c\3\2\2\2\u008c\u008a\3\2\2\2\u008c\u008d\3\2\2\2")
        buf.write("\u008d\u008e\3\2\2\2\u008e\u0090\7\64\2\2\u008f\u0091")
        buf.write("\7#\2\2\u0090\u008f\3\2\2\2\u0091\u0092\3\2\2\2\u0092")
        buf.write("\u0090\3\2\2\2\u0092\u0093\3\2\2\2\u0093\u0094\3\2\2\2")
        buf.write("\u0094\u0096\7\5\2\2\u0095\u0097\7#\2\2\u0096\u0095\3")
        buf.write("\2\2\2\u0097\u0098\3\2\2\2\u0098\u0096\3\2\2\2\u0098\u0099")
        buf.write("\3\2\2\2\u0099\u009a\3\2\2\2\u009a\u009c\5\62\32\2\u009b")
        buf.write("\u009d\7#\2\2\u009c\u009b\3\2\2\2\u009d\u009e\3\2\2\2")
        buf.write("\u009e\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f\u00a0\3")
        buf.write("\2\2\2\u00a0\u00a2\7\6\2\2\u00a1\u00a3\7#\2\2\u00a2\u00a1")
        buf.write("\3\2\2\2\u00a3\u00a4\3\2\2\2\u00a4\u00a2\3\2\2\2\u00a4")
        buf.write("\u00a5\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00a8\5\62\32")
        buf.write("\2\u00a7\u00a9\7#\2\2\u00a8\u00a7\3\2\2\2\u00a9\u00aa")
        buf.write("\3\2\2\2\u00aa\u00a8\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab")
        buf.write("\u00ac\3\2\2\2\u00ac\u00ae\7\7\2\2\u00ad\u00af\7#\2\2")
        buf.write("\u00ae\u00ad\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00ae\3")
        buf.write("\2\2\2\u00b0\u00b1\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00b4")
        buf.write("\5\62\32\2\u00b3\u00b5\7#\2\2\u00b4\u00b3\3\2\2\2\u00b5")
        buf.write("\u00b6\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b6\u00b7\3\2\2\2")
        buf.write("\u00b7\u00b8\3\2\2\2\u00b8\u00b9\7\b\2\2\u00b9\u00ba\7")
        buf.write("\3\2\2\u00ba\u00be\5\6\4\2\u00bb\u00bd\7#\2\2\u00bc\u00bb")
        buf.write("\3\2\2\2\u00bd\u00c0\3\2\2\2\u00be\u00bc\3\2\2\2\u00be")
        buf.write("\u00bf\3\2\2\2\u00bf\u00c1\3\2\2\2\u00c0\u00be\3\2\2\2")
        buf.write("\u00c1\u00c2\7\t\2\2\u00c2\t\3\2\2\2\u00c3\u00c5\7#\2")
        buf.write("\2\u00c4\u00c3\3\2\2\2\u00c5\u00c8\3\2\2\2\u00c6\u00c4")
        buf.write("\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00c9\3\2\2\2\u00c8")
        buf.write("\u00c6\3\2\2\2\u00c9\u00cb\7\n\2\2\u00ca\u00cc\7#\2\2")
        buf.write("\u00cb\u00ca\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00cb\3")
        buf.write("\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00df")
        buf.write("\5\f\7\2\u00d0\u00d2\7\13\2\2\u00d1\u00d3\7#\2\2\u00d2")
        buf.write("\u00d1\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4\u00d2\3\2\2\2")
        buf.write("\u00d4\u00d5\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6\u00d8\7")
        buf.write("\n\2\2\u00d7\u00d9\7#\2\2\u00d8\u00d7\3\2\2\2\u00d9\u00da")
        buf.write("\3\2\2\2\u00da\u00d8\3\2\2\2\u00da\u00db\3\2\2\2\u00db")
        buf.write("\u00dc\3\2\2\2\u00dc\u00de\5\f\7\2\u00dd\u00d0\3\2\2\2")
        buf.write("\u00de\u00e1\3\2\2\2\u00df\u00dd\3\2\2\2\u00df\u00e0\3")
        buf.write("\2\2\2\u00e0\u00e5\3\2\2\2\u00e1\u00df\3\2\2\2\u00e2\u00e4")
        buf.write("\7#\2\2\u00e3\u00e2\3\2\2\2\u00e4\u00e7\3\2\2\2\u00e5")
        buf.write("\u00e3\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00f1\3\2\2\2")
        buf.write("\u00e7\u00e5\3\2\2\2\u00e8\u00ea\7\13\2\2\u00e9\u00eb")
        buf.write("\7#\2\2\u00ea\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec")
        buf.write("\u00ea\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed\u00ee\3\2\2\2")
        buf.write("\u00ee\u00ef\7\b\2\2\u00ef\u00f0\7\3\2\2\u00f0\u00f2\5")
        buf.write("\6\4\2\u00f1\u00e8\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f6")
        buf.write("\3\2\2\2\u00f3\u00f5\7#\2\2\u00f4\u00f3\3\2\2\2\u00f5")
        buf.write("\u00f8\3\2\2\2\u00f6\u00f4\3\2\2\2\u00f6\u00f7\3\2\2\2")
        buf.write("\u00f7\u00f9\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f9\u00fa\7")
        buf.write("\t\2\2\u00fa\13\3\2\2\2\u00fb\u00fd\5\62\32\2\u00fc\u00fe")
        buf.write("\7#\2\2\u00fd\u00fc\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff")
        buf.write("\u00fd\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u0101\3\2\2\2")
        buf.write("\u0101\u0102\7\b\2\2\u0102\u0106\7\3\2\2\u0103\u0105\7")
        buf.write("#\2\2\u0104\u0103\3\2\2\2\u0105\u0108\3\2\2\2\u0106\u0104")
        buf.write("\3\2\2\2\u0106\u0107\3\2\2\2\u0107\u0109\3\2\2\2\u0108")
        buf.write("\u0106\3\2\2\2\u0109\u010a\5\6\4\2\u010a\r\3\2\2\2\u010b")
        buf.write("\u0110\5\20\t\2\u010c\u0110\5\22\n\2\u010d\u0110\5\24")
        buf.write("\13\2\u010e\u0110\5\26\f\2\u010f\u010b\3\2\2\2\u010f\u010c")
        buf.write("\3\2\2\2\u010f\u010d\3\2\2\2\u010f\u010e\3\2\2\2\u0110")
        buf.write("\17\3\2\2\2\u0111\u0113\7#\2\2\u0112\u0111\3\2\2\2\u0113")
        buf.write("\u0116\3\2\2\2\u0114\u0112\3\2\2\2\u0114\u0115\3\2\2\2")
        buf.write("\u0115\u0117\3\2\2\2\u0116\u0114\3\2\2\2\u0117\u0119\7")
        buf.write("\f\2\2\u0118\u011a\7#\2\2\u0119\u0118\3\2\2\2\u011a\u011b")
        buf.write("\3\2\2\2\u011b\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011c")
        buf.write("\u011d\3\2\2\2\u011d\u0121\7\64\2\2\u011e\u0120\7#\2\2")
        buf.write("\u011f\u011e\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f\3")
        buf.write("\2\2\2\u0121\u0122\3\2\2\2\u0122\u0124\3\2\2\2\u0123\u0121")
        buf.write("\3\2\2\2\u0124\u0128\7\r\2\2\u0125\u0127\7#\2\2\u0126")
        buf.write("\u0125\3\2\2\2\u0127\u012a\3\2\2\2\u0128\u0126\3\2\2\2")
        buf.write("\u0128\u0129\3\2\2\2\u0129\u012b\3\2\2\2\u012a\u0128\3")
        buf.write("\2\2\2\u012b\u012f\5\62\32\2\u012c\u012e\7#\2\2\u012d")
        buf.write("\u012c\3\2\2\2\u012e\u0131\3\2\2\2\u012f\u012d\3\2\2\2")
        buf.write("\u012f\u0130\3\2\2\2\u0130\u0132\3\2\2\2\u0131\u012f\3")
        buf.write("\2\2\2\u0132\u0136\7\16\2\2\u0133\u0135\7#\2\2\u0134\u0133")
        buf.write("\3\2\2\2\u0135\u0138\3\2\2\2\u0136\u0134\3\2\2\2\u0136")
        buf.write("\u0137\3\2\2\2\u0137\u0139\3\2\2\2\u0138\u0136\3\2\2\2")
        buf.write("\u0139\u013a\5\62\32\2\u013a\21\3\2\2\2\u013b\u013d\7")
        buf.write("#\2\2\u013c\u013b\3\2\2\2\u013d\u0140\3\2\2\2\u013e\u013c")
        buf.write("\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0141\3\2\2\2\u0140")
        buf.write("\u013e\3\2\2\2\u0141\u0143\7\17\2\2\u0142\u0144\7#\2\2")
        buf.write("\u0143\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0143\3")
        buf.write("\2\2\2\u0145\u0146\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u014b")
        buf.write("\7\64\2\2\u0148\u014a\7#\2\2\u0149\u0148\3\2\2\2\u014a")
        buf.write("\u014d\3\2\2\2\u014b\u0149\3\2\2\2\u014b\u014c\3\2\2\2")
        buf.write("\u014c\u014e\3\2\2\2\u014d\u014b\3\2\2\2\u014e\u0152\7")
        buf.write("\r\2\2\u014f\u0151\7#\2\2\u0150\u014f\3\2\2\2\u0151\u0154")
        buf.write("\3\2\2\2\u0152\u0150\3\2\2\2\u0152\u0153\3\2\2\2\u0153")
        buf.write("\u0155\3\2\2\2\u0154\u0152\3\2\2\2\u0155\u0159\7\64\2")
        buf.write("\2\u0156\u0158\7#\2\2\u0157\u0156\3\2\2\2\u0158\u015b")
        buf.write("\3\2\2\2\u0159\u0157\3\2\2\2\u0159\u015a\3\2\2\2\u015a")
        buf.write("\u015c\3\2\2\2\u015b\u0159\3\2\2\2\u015c\u015e\7\16\2")
        buf.write("\2\u015d\u015f\7#\2\2\u015e\u015d\3\2\2\2\u015f\u0160")
        buf.write("\3\2\2\2\u0160\u015e\3\2\2\2\u0160\u0161\3\2\2\2\u0161")
        buf.write("\u0162\3\2\2\2\u0162\u0163\7\64\2\2\u0163\23\3\2\2\2\u0164")
        buf.write("\u0166\7#\2\2\u0165\u0164\3\2\2\2\u0166\u0169\3\2\2\2")
        buf.write("\u0167\u0165\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u016a\3")
        buf.write("\2\2\2\u0169\u0167\3\2\2\2\u016a\u016c\7\20\2\2\u016b")
        buf.write("\u016d\7#\2\2\u016c\u016b\3\2\2\2\u016d\u016e\3\2\2\2")
        buf.write("\u016e\u016c\3\2\2\2\u016e\u016f\3\2\2\2\u016f\u0170\3")
        buf.write("\2\2\2\u0170\u0174\7\64\2\2\u0171\u0173\7#\2\2\u0172\u0171")
        buf.write("\3\2\2\2\u0173\u0176\3\2\2\2\u0174\u0172\3\2\2\2\u0174")
        buf.write("\u0175\3\2\2\2\u0175\u0177\3\2\2\2\u0176\u0174\3\2\2\2")
        buf.write("\u0177\u017b\7\r\2\2\u0178\u017a\7#\2\2\u0179\u0178\3")
        buf.write("\2\2\2\u017a\u017d\3\2\2\2\u017b\u0179\3\2\2\2\u017b\u017c")
        buf.write("\3\2\2\2\u017c\u017e\3\2\2\2\u017d\u017b\3\2\2\2\u017e")
        buf.write("\u0182\7\64\2\2\u017f\u0181\7#\2\2\u0180\u017f\3\2\2\2")
        buf.write("\u0181\u0184\3\2\2\2\u0182\u0180\3\2\2\2\u0182\u0183\3")
        buf.write("\2\2\2\u0183\u0185\3\2\2\2\u0184\u0182\3\2\2\2\u0185\u0189")
        buf.write("\7\16\2\2\u0186\u0188\7#\2\2\u0187\u0186\3\2\2\2\u0188")
        buf.write("\u018b\3\2\2\2\u0189\u0187\3\2\2\2\u0189\u018a\3\2\2\2")
        buf.write("\u018a\u018c\3\2\2\2\u018b\u0189\3\2\2\2\u018c\u018d\5")
        buf.write("\62\32\2\u018d\25\3\2\2\2\u018e\u0190\7#\2\2\u018f\u018e")
        buf.write("\3\2\2\2\u0190\u0193\3\2\2\2\u0191\u018f\3\2\2\2\u0191")
        buf.write("\u0192\3\2\2\2\u0192\u0194\3\2\2\2\u0193\u0191\3\2\2\2")
        buf.write("\u0194\u0196\7\21\2\2\u0195\u0197\7#\2\2\u0196\u0195\3")
        buf.write("\2\2\2\u0197\u0198\3\2\2\2\u0198\u0196\3\2\2\2\u0198\u0199")
        buf.write("\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019e\7\64\2\2\u019b")
        buf.write("\u019d\7#\2\2\u019c\u019b\3\2\2\2\u019d\u01a0\3\2\2\2")
        buf.write("\u019e\u019c\3\2\2\2\u019e\u019f\3\2\2\2\u019f\u01a1\3")
        buf.write("\2\2\2\u01a0\u019e\3\2\2\2\u01a1\u01a5\7\r\2\2\u01a2\u01a4")
        buf.write("\7#\2\2\u01a3\u01a2\3\2\2\2\u01a4\u01a7\3\2\2\2\u01a5")
        buf.write("\u01a3\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6\u01a8\3\2\2\2")
        buf.write("\u01a7\u01a5\3\2\2\2\u01a8\u01a9\7\64\2\2\u01a9\27\3\2")
        buf.write("\2\2\u01aa\u01ac\7#\2\2\u01ab\u01aa\3\2\2\2\u01ac\u01af")
        buf.write("\3\2\2\2\u01ad\u01ab\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae")
        buf.write("\u01b0\3\2\2\2\u01af\u01ad\3\2\2\2\u01b0\u01b2\7\22\2")
        buf.write("\2\u01b1\u01b3\7#\2\2\u01b2\u01b1\3\2\2\2\u01b3\u01b4")
        buf.write("\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5")
        buf.write("\u01b6\3\2\2\2\u01b6\u01ba\7\64\2\2\u01b7\u01b9\7#\2\2")
        buf.write("\u01b8\u01b7\3\2\2\2\u01b9\u01bc\3\2\2\2\u01ba\u01b8\3")
        buf.write("\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01bd\3\2\2\2\u01bc\u01ba")
        buf.write("\3\2\2\2\u01bd\u01c1\7\r\2\2\u01be\u01c0\7#\2\2\u01bf")
        buf.write("\u01be\3\2\2\2\u01c0\u01c3\3\2\2\2\u01c1\u01bf\3\2\2\2")
        buf.write("\u01c1\u01c2\3\2\2\2\u01c2\u01c4\3\2\2\2\u01c3\u01c1\3")
        buf.write("\2\2\2\u01c4\u01c8\7\64\2\2\u01c5\u01c7\7#\2\2\u01c6\u01c5")
        buf.write("\3\2\2\2\u01c7\u01ca\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c8")
        buf.write("\u01c9\3\2\2\2\u01c9\u01db\3\2\2\2\u01ca\u01c8\3\2\2\2")
        buf.write("\u01cb\u01cf\7\16\2\2\u01cc\u01ce\7#\2\2\u01cd\u01cc\3")
        buf.write("\2\2\2\u01ce\u01d1\3\2\2\2\u01cf\u01cd\3\2\2\2\u01cf\u01d0")
        buf.write("\3\2\2\2\u01d0\u01d2\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d2")
        buf.write("\u01d6\7\64\2\2\u01d3\u01d5\7#\2\2\u01d4\u01d3\3\2\2\2")
        buf.write("\u01d5\u01d8\3\2\2\2\u01d6\u01d4\3\2\2\2\u01d6\u01d7\3")
        buf.write("\2\2\2\u01d7\u01da\3\2\2\2\u01d8\u01d6\3\2\2\2\u01d9\u01cb")
        buf.write("\3\2\2\2\u01da\u01dd\3\2\2\2\u01db\u01d9\3\2\2\2\u01db")
        buf.write("\u01dc\3\2\2\2\u01dc\31\3\2\2\2\u01dd\u01db\3\2\2\2\u01de")
        buf.write("\u01e0\7#\2\2\u01df\u01de\3\2\2\2\u01e0\u01e3\3\2\2\2")
        buf.write("\u01e1\u01df\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e4\3")
        buf.write("\2\2\2\u01e3\u01e1\3\2\2\2\u01e4\u01e8\7\64\2\2\u01e5")
        buf.write("\u01e7\7#\2\2\u01e6\u01e5\3\2\2\2\u01e7\u01ea\3\2\2\2")
        buf.write("\u01e8\u01e6\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01eb\3")
        buf.write("\2\2\2\u01ea\u01e8\3\2\2\2\u01eb\u01ef\7\23\2\2\u01ec")
        buf.write("\u01ee\7#\2\2\u01ed\u01ec\3\2\2\2\u01ee\u01f1\3\2\2\2")
        buf.write("\u01ef\u01ed\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f4\3")
        buf.write("\2\2\2\u01f1\u01ef\3\2\2\2\u01f2\u01f5\5D#\2\u01f3\u01f5")
        buf.write("\7\64\2\2\u01f4\u01f2\3\2\2\2\u01f4\u01f3\3\2\2\2\u01f5")
        buf.write("\u01f9\3\2\2\2\u01f6\u01f8\7#\2\2\u01f7\u01f6\3\2\2\2")
        buf.write("\u01f8\u01fb\3\2\2\2\u01f9\u01f7\3\2\2\2\u01f9\u01fa\3")
        buf.write("\2\2\2\u01fa\u01fc\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fc\u01fe")
        buf.write("\7\24\2\2\u01fd\u01ff\7#\2\2\u01fe\u01fd\3\2\2\2\u01ff")
        buf.write("\u0200\3\2\2\2\u0200\u01fe\3\2\2\2\u0200\u0201\3\2\2\2")
        buf.write("\u0201\33\3\2\2\2\u0202\u0205\5\36\20\2\u0203\u0205\5")
        buf.write(" \21\2\u0204\u0202\3\2\2\2\u0204\u0203\3\2\2\2\u0205\35")
        buf.write("\3\2\2\2\u0206\u0208\7#\2\2\u0207\u0206\3\2\2\2\u0208")
        buf.write("\u020b\3\2\2\2\u0209\u0207\3\2\2\2\u0209\u020a\3\2\2\2")
        buf.write("\u020a\u020c\3\2\2\2\u020b\u0209\3\2\2\2\u020c\u020e\7")
        buf.write("\25\2\2\u020d\u020f\7#\2\2\u020e\u020d\3\2\2\2\u020f\u0210")
        buf.write("\3\2\2\2\u0210\u020e\3\2\2\2\u0210\u0211\3\2\2\2\u0211")
        buf.write("\u0212\3\2\2\2\u0212\u0216\7\64\2\2\u0213\u0215\7#\2\2")
        buf.write("\u0214\u0213\3\2\2\2\u0215\u0218\3\2\2\2\u0216\u0214\3")
        buf.write("\2\2\2\u0216\u0217\3\2\2\2\u0217\u0219\3\2\2\2\u0218\u0216")
        buf.write("\3\2\2\2\u0219\u021d\7\r\2\2\u021a\u021c\7#\2\2\u021b")
        buf.write("\u021a\3\2\2\2\u021c\u021f\3\2\2\2\u021d\u021b\3\2\2\2")
        buf.write("\u021d\u021e\3\2\2\2\u021e\u0220\3\2\2\2\u021f\u021d\3")
        buf.write("\2\2\2\u0220\u0221\5\62\32\2\u0221\37\3\2\2\2\u0222\u0224")
        buf.write("\7#\2\2\u0223\u0222\3\2\2\2\u0224\u0227\3\2\2\2\u0225")
        buf.write("\u0223\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0228\3\2\2\2")
        buf.write("\u0227\u0225\3\2\2\2\u0228\u022a\7\26\2\2\u0229\u022b")
        buf.write("\7#\2\2\u022a\u0229\3\2\2\2\u022b\u022c\3\2\2\2\u022c")
        buf.write("\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022e\3\2\2\2")
        buf.write("\u022e\u0232\7\64\2\2\u022f\u0231\7#\2\2\u0230\u022f\3")
        buf.write("\2\2\2\u0231\u0234\3\2\2\2\u0232\u0230\3\2\2\2\u0232\u0233")
        buf.write("\3\2\2\2\u0233\u0235\3\2\2\2\u0234\u0232\3\2\2\2\u0235")
        buf.write("\u0239\7\r\2\2\u0236\u0238\7#\2\2\u0237\u0236\3\2\2\2")
        buf.write("\u0238\u023b\3\2\2\2\u0239\u0237\3\2\2\2\u0239\u023a\3")
        buf.write("\2\2\2\u023a\u023e\3\2\2\2\u023b\u0239\3\2\2\2\u023c\u023f")
        buf.write("\5D#\2\u023d\u023f\7\64\2\2\u023e\u023c\3\2\2\2\u023e")
        buf.write("\u023d\3\2\2\2\u023f!\3\2\2\2\u0240\u0242\7#\2\2\u0241")
        buf.write("\u0240\3\2\2\2\u0242\u0245\3\2\2\2\u0243\u0241\3\2\2\2")
        buf.write("\u0243\u0244\3\2\2\2\u0244\u0246\3\2\2\2\u0245\u0243\3")
        buf.write("\2\2\2\u0246\u024a\7\27\2\2\u0247\u0249\7#\2\2\u0248\u0247")
        buf.write("\3\2\2\2\u0249\u024c\3\2\2\2\u024a\u0248\3\2\2\2\u024a")
        buf.write("\u024b\3\2\2\2\u024b\u024d\3\2\2\2\u024c\u024a\3\2\2\2")
        buf.write("\u024d\u0251\7\r\2\2\u024e\u0250\7#\2\2\u024f\u024e\3")
        buf.write("\2\2\2\u0250\u0253\3\2\2\2\u0251\u024f\3\2\2\2\u0251\u0252")
        buf.write("\3\2\2\2\u0252\u0254\3\2\2\2\u0253\u0251\3\2\2\2\u0254")
        buf.write("\u0258\5\62\32\2\u0255\u0257\7#\2\2\u0256\u0255\3\2\2")
        buf.write("\2\u0257\u025a\3\2\2\2\u0258\u0256\3\2\2\2\u0258\u0259")
        buf.write("\3\2\2\2\u0259\u025b\3\2\2\2\u025a\u0258\3\2\2\2\u025b")
        buf.write("\u025f\7\16\2\2\u025c\u025e\7#\2\2\u025d\u025c\3\2\2\2")
        buf.write("\u025e\u0261\3\2\2\2\u025f\u025d\3\2\2\2\u025f\u0260\3")
        buf.write("\2\2\2\u0260\u0262\3\2\2\2\u0261\u025f\3\2\2\2\u0262\u0266")
        buf.write("\5\62\32\2\u0263\u0265\7#\2\2\u0264\u0263\3\2\2\2\u0265")
        buf.write("\u0268\3\2\2\2\u0266\u0264\3\2\2\2\u0266\u0267\3\2\2\2")
        buf.write("\u0267\u0269\3\2\2\2\u0268\u0266\3\2\2\2\u0269\u026d\7")
        buf.write("\16\2\2\u026a\u026c\7#\2\2\u026b\u026a\3\2\2\2\u026c\u026f")
        buf.write("\3\2\2\2\u026d\u026b\3\2\2\2\u026d\u026e\3\2\2\2\u026e")
        buf.write("\u0270\3\2\2\2\u026f\u026d\3\2\2\2\u0270\u0271\7\61\2")
        buf.write("\2\u0271#\3\2\2\2\u0272\u0274\7#\2\2\u0273\u0272\3\2\2")
        buf.write("\2\u0274\u0277\3\2\2\2\u0275\u0273\3\2\2\2\u0275\u0276")
        buf.write("\3\2\2\2\u0276\u0278\3\2\2\2\u0277\u0275\3\2\2\2\u0278")
        buf.write("\u027a\7\30\2\2\u0279\u027b\7#\2\2\u027a\u0279\3\2\2\2")
        buf.write("\u027b\u027c\3\2\2\2\u027c\u027a\3\2\2\2\u027c\u027d\3")
        buf.write("\2\2\2\u027d\u027e\3\2\2\2\u027e\u027f\7\64\2\2\u027f")
        buf.write("%\3\2\2\2\u0280\u0286\5(\25\2\u0281\u0286\5*\26\2\u0282")
        buf.write("\u0286\5,\27\2\u0283\u0286\5.\30\2\u0284\u0286\5\60\31")
        buf.write("\2\u0285\u0280\3\2\2\2\u0285\u0281\3\2\2\2\u0285\u0282")
        buf.write("\3\2\2\2\u0285\u0283\3\2\2\2\u0285\u0284\3\2\2\2\u0286")
        buf.write("\'\3\2\2\2\u0287\u0289\7#\2\2\u0288\u0287\3\2\2\2\u0289")
        buf.write("\u028c\3\2\2\2\u028a\u0288\3\2\2\2\u028a\u028b\3\2\2\2")
        buf.write("\u028b\u028d\3\2\2\2\u028c\u028a\3\2\2\2\u028d\u028f\7")
        buf.write("\31\2\2\u028e\u0290\7#\2\2\u028f\u028e\3\2\2\2\u0290\u0291")
        buf.write("\3\2\2\2\u0291\u028f\3\2\2\2\u0291\u0292\3\2\2\2\u0292")
        buf.write("\u0293\3\2\2\2\u0293\u0297\7\64\2\2\u0294\u0296\7#\2\2")
        buf.write("\u0295\u0294\3\2\2\2\u0296\u0299\3\2\2\2\u0297\u0295\3")
        buf.write("\2\2\2\u0297\u0298\3\2\2\2\u0298\u029a\3\2\2\2\u0299\u0297")
        buf.write("\3\2\2\2\u029a\u029e\7\r\2\2\u029b\u029d\7#\2\2\u029c")
        buf.write("\u029b\3\2\2\2\u029d\u02a0\3\2\2\2\u029e\u029c\3\2\2\2")
        buf.write("\u029e\u029f\3\2\2\2\u029f\u02a1\3\2\2\2\u02a0\u029e\3")
        buf.write("\2\2\2\u02a1\u02a2\7\61\2\2\u02a2)\3\2\2\2\u02a3\u02a5")
        buf.write("\7#\2\2\u02a4\u02a3\3\2\2\2\u02a5\u02a8\3\2\2\2\u02a6")
        buf.write("\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a9\3\2\2\2")
        buf.write("\u02a8\u02a6\3\2\2\2\u02a9\u02ab\7\32\2\2\u02aa\u02ac")
        buf.write("\7#\2\2\u02ab\u02aa\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad")
        buf.write("\u02ab\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02af\3\2\2\2")
        buf.write("\u02af\u02b3\7\64\2\2\u02b0\u02b2\7#\2\2\u02b1\u02b0\3")
        buf.write("\2\2\2\u02b2\u02b5\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b3\u02b4")
        buf.write("\3\2\2\2\u02b4\u02b6\3\2\2\2\u02b5\u02b3\3\2\2\2\u02b6")
        buf.write("\u02ba\7\r\2\2\u02b7\u02b9\7#\2\2\u02b8\u02b7\3\2\2\2")
        buf.write("\u02b9\u02bc\3\2\2\2\u02ba\u02b8\3\2\2\2\u02ba\u02bb\3")
        buf.write("\2\2\2\u02bb\u02bf\3\2\2\2\u02bc\u02ba\3\2\2\2\u02bd\u02c0")
        buf.write("\5B\"\2\u02be\u02c0\7\64\2\2\u02bf\u02bd\3\2\2\2\u02bf")
        buf.write("\u02be\3\2\2\2\u02c0\u02c4\3\2\2\2\u02c1\u02c3\7#\2\2")
        buf.write("\u02c2\u02c1\3\2\2\2\u02c3\u02c6\3\2\2\2\u02c4\u02c2\3")
        buf.write("\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02c7\3\2\2\2\u02c6\u02c4")
        buf.write("\3\2\2\2\u02c7\u02cb\7\16\2\2\u02c8\u02ca\7#\2\2\u02c9")
        buf.write("\u02c8\3\2\2\2\u02ca\u02cd\3\2\2\2\u02cb\u02c9\3\2\2\2")
        buf.write("\u02cb\u02cc\3\2\2\2\u02cc\u02d0\3\2\2\2\u02cd\u02cb\3")
        buf.write("\2\2\2\u02ce\u02d1\5B\"\2\u02cf\u02d1\7\64\2\2\u02d0\u02ce")
        buf.write("\3\2\2\2\u02d0\u02cf\3\2\2\2\u02d1+\3\2\2\2\u02d2\u02d4")
        buf.write("\7#\2\2\u02d3\u02d2\3\2\2\2\u02d4\u02d7\3\2\2\2\u02d5")
        buf.write("\u02d3\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d8\3\2\2\2")
        buf.write("\u02d7\u02d5\3\2\2\2\u02d8\u02da\7\33\2\2\u02d9\u02db")
        buf.write("\7#\2\2\u02da\u02d9\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc")
        buf.write("\u02da\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02de\3\2\2\2")
        buf.write("\u02de\u02e2\7\64\2\2\u02df\u02e1\7#\2\2\u02e0\u02df\3")
        buf.write("\2\2\2\u02e1\u02e4\3\2\2\2\u02e2\u02e0\3\2\2\2\u02e2\u02e3")
        buf.write("\3\2\2\2\u02e3\u02e5\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e5")
        buf.write("\u02e9\7\r\2\2\u02e6\u02e8\7#\2\2\u02e7\u02e6\3\2\2\2")
        buf.write("\u02e8\u02eb\3\2\2\2\u02e9\u02e7\3\2\2\2\u02e9\u02ea\3")
        buf.write("\2\2\2\u02ea\u02ec\3\2\2\2\u02eb\u02e9\3\2\2\2\u02ec\u02ed")
        buf.write("\7\64\2\2\u02ed-\3\2\2\2\u02ee\u02f0\7#\2\2\u02ef\u02ee")
        buf.write("\3\2\2\2\u02f0\u02f3\3\2\2\2\u02f1\u02ef\3\2\2\2\u02f1")
        buf.write("\u02f2\3\2\2\2\u02f2\u02f4\3\2\2\2\u02f3\u02f1\3\2\2\2")
        buf.write("\u02f4\u02f6\7\34\2\2\u02f5\u02f7\7#\2\2\u02f6\u02f5\3")
        buf.write("\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02f6\3\2\2\2\u02f8\u02f9")
        buf.write("\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fe\7\64\2\2\u02fb")
        buf.write("\u02fd\7#\2\2\u02fc\u02fb\3\2\2\2\u02fd\u0300\3\2\2\2")
        buf.write("\u02fe\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0301\3")
        buf.write("\2\2\2\u0300\u02fe\3\2\2\2\u0301\u0305\7\r\2\2\u0302\u0304")
        buf.write("\7#\2\2\u0303\u0302\3\2\2\2\u0304\u0307\3\2\2\2\u0305")
        buf.write("\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u030a\3\2\2\2")
        buf.write("\u0307\u0305\3\2\2\2\u0308\u030b\5B\"\2\u0309\u030b\7")
        buf.write("\64\2\2\u030a\u0308\3\2\2\2\u030a\u0309\3\2\2\2\u030b")
        buf.write("\u030f\3\2\2\2\u030c\u030e\7#\2\2\u030d\u030c\3\2\2\2")
        buf.write("\u030e\u0311\3\2\2\2\u030f\u030d\3\2\2\2\u030f\u0310\3")
        buf.write("\2\2\2\u0310\u0312\3\2\2\2\u0311\u030f\3\2\2\2\u0312\u0316")
        buf.write("\7\16\2\2\u0313\u0315\7#\2\2\u0314\u0313\3\2\2\2\u0315")
        buf.write("\u0318\3\2\2\2\u0316\u0314\3\2\2\2\u0316\u0317\3\2\2\2")
        buf.write("\u0317\u0319\3\2\2\2\u0318\u0316\3\2\2\2\u0319\u031a\7")
        buf.write("\64\2\2\u031a/\3\2\2\2\u031b\u031d\7#\2\2\u031c\u031b")
        buf.write("\3\2\2\2\u031d\u0320\3\2\2\2\u031e\u031c\3\2\2\2\u031e")
        buf.write("\u031f\3\2\2\2\u031f\u0321\3\2\2\2\u0320\u031e\3\2\2\2")
        buf.write("\u0321\u0323\7\35\2\2\u0322\u0324\7#\2\2\u0323\u0322\3")
        buf.write("\2\2\2\u0324\u0325\3\2\2\2\u0325\u0323\3\2\2\2\u0325\u0326")
        buf.write("\3\2\2\2\u0326\u0327\3\2\2\2\u0327\u032b\7\64\2\2\u0328")
        buf.write("\u032a\7#\2\2\u0329\u0328\3\2\2\2\u032a\u032d\3\2\2\2")
        buf.write("\u032b\u0329\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u032e\3")
        buf.write("\2\2\2\u032d\u032b\3\2\2\2\u032e\u0332\7\r\2\2\u032f\u0331")
        buf.write("\7#\2\2\u0330\u032f\3\2\2\2\u0331\u0334\3\2\2\2\u0332")
        buf.write("\u0330\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0335\3\2\2\2")
        buf.write("\u0334\u0332\3\2\2\2\u0335\u0336\5B\"\2\u0336\61\3\2\2")
        buf.write("\2\u0337\u0338\b\32\1\2\u0338\u033c\7\36\2\2\u0339\u033b")
        buf.write("\7#\2\2\u033a\u0339\3\2\2\2\u033b\u033e\3\2\2\2\u033c")
        buf.write("\u033a\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u033f\3\2\2\2")
        buf.write("\u033e\u033c\3\2\2\2\u033f\u0343\5\62\32\2\u0340\u0342")
        buf.write("\7#\2\2\u0341\u0340\3\2\2\2\u0342\u0345\3\2\2\2\u0343")
        buf.write("\u0341\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0346\3\2\2\2")
        buf.write("\u0345\u0343\3\2\2\2\u0346\u0347\7\37\2\2\u0347\u035a")
        buf.write("\3\2\2\2\u0348\u034c\7\'\2\2\u0349\u034b\7#\2\2\u034a")
        buf.write("\u0349\3\2\2\2\u034b\u034e\3\2\2\2\u034c\u034a\3\2\2\2")
        buf.write("\u034c\u034d\3\2\2\2\u034d\u034f\3\2\2\2\u034e\u034c\3")
        buf.write("\2\2\2\u034f\u035a\5\62\32\b\u0350\u0354\7+\2\2\u0351")
        buf.write("\u0353\7#\2\2\u0352\u0351\3\2\2\2\u0353\u0356\3\2\2\2")
        buf.write("\u0354\u0352\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0357\3")
        buf.write("\2\2\2\u0356\u0354\3\2\2\2\u0357\u035a\5\62\32\5\u0358")
        buf.write("\u035a\5\64\33\2\u0359\u0337\3\2\2\2\u0359\u0348\3\2\2")
        buf.write("\2\u0359\u0350\3\2\2\2\u0359\u0358\3\2\2\2\u035a\u038a")
        buf.write("\3\2\2\2\u035b\u035f\f\7\2\2\u035c\u035e\7#\2\2\u035d")
        buf.write("\u035c\3\2\2\2\u035e\u0361\3\2\2\2\u035f\u035d\3\2\2\2")
        buf.write("\u035f\u0360\3\2\2\2\u0360\u0362\3\2\2\2\u0361\u035f\3")
        buf.write("\2\2\2\u0362\u0366\t\2\2\2\u0363\u0365\7#\2\2\u0364\u0363")
        buf.write("\3\2\2\2\u0365\u0368\3\2\2\2\u0366\u0364\3\2\2\2\u0366")
        buf.write("\u0367\3\2\2\2\u0367\u0369\3\2\2\2\u0368\u0366\3\2\2\2")
        buf.write("\u0369\u0389\5\62\32\b\u036a\u036e\f\6\2\2\u036b\u036d")
        buf.write("\7#\2\2\u036c\u036b\3\2\2\2\u036d\u0370\3\2\2\2\u036e")
        buf.write("\u036c\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0371\3\2\2\2")
        buf.write("\u0370\u036e\3\2\2\2\u0371\u0375\t\3\2\2\u0372\u0374\7")
        buf.write("#\2\2\u0373\u0372\3\2\2\2\u0374\u0377\3\2\2\2\u0375\u0373")
        buf.write("\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0378\3\2\2\2\u0377")
        buf.write("\u0375\3\2\2\2\u0378\u0389\5\62\32\7\u0379\u037d\f\4\2")
        buf.write("\2\u037a\u037c\7#\2\2\u037b\u037a\3\2\2\2\u037c\u037f")
        buf.write("\3\2\2\2\u037d\u037b\3\2\2\2\u037d\u037e\3\2\2\2\u037e")
        buf.write("\u0380\3\2\2\2\u037f\u037d\3\2\2\2\u0380\u0384\t\4\2\2")
        buf.write("\u0381\u0383\7#\2\2\u0382\u0381\3\2\2\2\u0383\u0386\3")
        buf.write("\2\2\2\u0384\u0382\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0387")
        buf.write("\3\2\2\2\u0386\u0384\3\2\2\2\u0387\u0389\5\62\32\5\u0388")
        buf.write("\u035b\3\2\2\2\u0388\u036a\3\2\2\2\u0388\u0379\3\2\2\2")
        buf.write("\u0389\u038c\3\2\2\2\u038a\u0388\3\2\2\2\u038a\u038b\3")
        buf.write("\2\2\2\u038b\63\3\2\2\2\u038c\u038a\3\2\2\2\u038d\u0391")
        buf.write("\5D#\2\u038e\u0391\5@!\2\u038f\u0391\7\64\2\2\u0390\u038d")
        buf.write("\3\2\2\2\u0390\u038e\3\2\2\2\u0390\u038f\3\2\2\2\u0391")
        buf.write("\65\3\2\2\2\u0392\u0393\t\2\2\2\u0393\67\3\2\2\2\u0394")
        buf.write("\u039b\7-\2\2\u0395\u039b\7.\2\2\u0396\u039b\7/\2\2\u0397")
        buf.write("\u039b\7\60\2\2\u0398\u039b\7,\2\2\u0399\u039b\5:\36\2")
        buf.write("\u039a\u0394\3\2\2\2\u039a\u0395\3\2\2\2\u039a\u0396\3")
        buf.write("\2\2\2\u039a\u0397\3\2\2\2\u039a\u0398\3\2\2\2\u039a\u0399")
        buf.write("\3\2\2\2\u039b9\3\2\2\2\u039c\u039d\7+\2\2\u039d\u039e")
        buf.write("\7,\2\2\u039e;\3\2\2\2\u039f\u03a1\7#\2\2\u03a0\u039f")
        buf.write("\3\2\2\2\u03a1\u03a4\3\2\2\2\u03a2\u03a0\3\2\2\2\u03a2")
        buf.write("\u03a3\3\2\2\2\u03a3\u03a7\3\2\2\2\u03a4\u03a2\3\2\2\2")
        buf.write("\u03a5\u03a8\5B\"\2\u03a6\u03a8\7\64\2\2\u03a7\u03a5\3")
        buf.write("\2\2\2\u03a7\u03a6\3\2\2\2\u03a8\u03ac\3\2\2\2\u03a9\u03ab")
        buf.write("\7#\2\2\u03aa\u03a9\3\2\2\2\u03ab\u03ae\3\2\2\2\u03ac")
        buf.write("\u03aa\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03af\3\2\2\2")
        buf.write("\u03ae\u03ac\3\2\2\2\u03af\u03b3\58\35\2\u03b0\u03b2\7")
        buf.write("#\2\2\u03b1\u03b0\3\2\2\2\u03b2\u03b5\3\2\2\2\u03b3\u03b1")
        buf.write("\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b8\3\2\2\2\u03b5")
        buf.write("\u03b3\3\2\2\2\u03b6\u03b9\5B\"\2\u03b7\u03b9\7\64\2\2")
        buf.write("\u03b8\u03b6\3\2\2\2\u03b8\u03b7\3\2\2\2\u03b9\u03d0\3")
        buf.write("\2\2\2\u03ba\u03bd\5D#\2\u03bb\u03bd\7\64\2\2\u03bc\u03ba")
        buf.write("\3\2\2\2\u03bc\u03bb\3\2\2\2\u03bd\u03c1\3\2\2\2\u03be")
        buf.write("\u03c0\7#\2\2\u03bf\u03be\3\2\2\2\u03c0\u03c3\3\2\2\2")
        buf.write("\u03c1\u03bf\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c4\3")
        buf.write("\2\2\2\u03c3\u03c1\3\2\2\2\u03c4\u03c8\58\35\2\u03c5\u03c7")
        buf.write("\7#\2\2\u03c6\u03c5\3\2\2\2\u03c7\u03ca\3\2\2\2\u03c8")
        buf.write("\u03c6\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03cd\3\2\2\2")
        buf.write("\u03ca\u03c8\3\2\2\2\u03cb\u03ce\5D#\2\u03cc\u03ce\7\64")
        buf.write("\2\2\u03cd\u03cb\3\2\2\2\u03cd\u03cc\3\2\2\2\u03ce\u03d0")
        buf.write("\3\2\2\2\u03cf\u03a2\3\2\2\2\u03cf\u03bc\3\2\2\2\u03d0")
        buf.write("=\3\2\2\2\u03d1\u03d3\7\'\2\2\u03d2\u03d1\3\2\2\2\u03d2")
        buf.write("\u03d3\3\2\2\2\u03d3\u03d6\3\2\2\2\u03d4\u03d7\5@!\2\u03d5")
        buf.write("\u03d7\7\64\2\2\u03d6\u03d4\3\2\2\2\u03d6\u03d5\3\2\2")
        buf.write("\2\u03d7\u03df\3\2\2\2\u03d8\u03db\5\66\34\2\u03d9\u03dc")
        buf.write("\5> \2\u03da\u03dc\7\64\2\2\u03db\u03d9\3\2\2\2\u03db")
        buf.write("\u03da\3\2\2\2\u03dc\u03de\3\2\2\2\u03dd\u03d8\3\2\2\2")
        buf.write("\u03de\u03e1\3\2\2\2\u03df\u03dd\3\2\2\2\u03df\u03e0\3")
        buf.write("\2\2\2\u03e0?\3\2\2\2\u03e1\u03df\3\2\2\2\u03e2\u03e4")
        buf.write("\7\63\2\2\u03e3\u03e2\3\2\2\2\u03e4\u03e7\3\2\2\2\u03e5")
        buf.write("\u03e3\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e8\3\2\2\2")
        buf.write("\u03e7\u03e5\3\2\2\2\u03e8\u03ea\7\62\2\2\u03e9\u03e5")
        buf.write("\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03ec\3\2\2\2\u03eb")
        buf.write("\u03ed\7\63\2\2\u03ec\u03eb\3\2\2\2\u03ed\u03ee\3\2\2")
        buf.write("\2\u03ee\u03ec\3\2\2\2\u03ee\u03ef\3\2\2\2\u03efA\3\2")
        buf.write("\2\2\u03f0\u03f3\5@!\2\u03f1\u03f3\7\64\2\2\u03f2\u03f0")
        buf.write("\3\2\2\2\u03f2\u03f1\3\2\2\2\u03f3\u03f7\3\2\2\2\u03f4")
        buf.write("\u03f6\7#\2\2\u03f5\u03f4\3\2\2\2\u03f6\u03f9\3\2\2\2")
        buf.write("\u03f7\u03f5\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u040d\3")
        buf.write("\2\2\2\u03f9\u03f7\3\2\2\2\u03fa\u03fe\5\66\34\2\u03fb")
        buf.write("\u03fd\7#\2\2\u03fc\u03fb\3\2\2\2\u03fd\u0400\3\2\2\2")
        buf.write("\u03fe\u03fc\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0403\3")
        buf.write("\2\2\2\u0400\u03fe\3\2\2\2\u0401\u0404\5@!\2\u0402\u0404")
        buf.write("\7\64\2\2\u0403\u0401\3\2\2\2\u0403\u0402\3\2\2\2\u0404")
        buf.write("\u0408\3\2\2\2\u0405\u0407\7#\2\2\u0406\u0405\3\2\2\2")
        buf.write("\u0407\u040a\3\2\2\2\u0408\u0406\3\2\2\2\u0408\u0409\3")
        buf.write("\2\2\2\u0409\u040c\3\2\2\2\u040a\u0408\3\2\2\2\u040b\u03fa")
        buf.write("\3\2\2\2\u040c\u040f\3\2\2\2\u040d\u040b\3\2\2\2\u040d")
        buf.write("\u040e\3\2\2\2\u040eC\3\2\2\2\u040f\u040d\3\2\2\2\u0410")
        buf.write("\u0412\7\63\2\2\u0411\u0410\3\2\2\2\u0412\u0413\3\2\2")
        buf.write("\2\u0413\u0411\3\2\2\2\u0413\u0414\3\2\2\2\u0414E\3\2")
        buf.write("\2\2\u009bIPT[afux}\u0085\u008c\u0092\u0098\u009e\u00a4")
        buf.write("\u00aa\u00b0\u00b6\u00be\u00c6\u00cd\u00d4\u00da\u00df")
        buf.write("\u00e5\u00ec\u00f1\u00f6\u00ff\u0106\u010f\u0114\u011b")
        buf.write("\u0121\u0128\u012f\u0136\u013e\u0145\u014b\u0152\u0159")
        buf.write("\u0160\u0167\u016e\u0174\u017b\u0182\u0189\u0191\u0198")
        buf.write("\u019e\u01a5\u01ad\u01b4\u01ba\u01c1\u01c8\u01cf\u01d6")
        buf.write("\u01db\u01e1\u01e8\u01ef\u01f4\u01f9\u0200\u0204\u0209")
        buf.write("\u0210\u0216\u021d\u0225\u022c\u0232\u0239\u023e\u0243")
        buf.write("\u024a\u0251\u0258\u025f\u0266\u026d\u0275\u027c\u0285")
        buf.write("\u028a\u0291\u0297\u029e\u02a6\u02ad\u02b3\u02ba\u02bf")
        buf.write("\u02c4\u02cb\u02d0\u02d5\u02dc\u02e2\u02e9\u02f1\u02f8")
        buf.write("\u02fe\u0305\u030a\u030f\u0316\u031e\u0325\u032b\u0332")
        buf.write("\u033c\u0343\u034c\u0354\u0359\u035f\u0366\u036e\u0375")
        buf.write("\u037d\u0384\u0388\u038a\u0390\u039a\u03a2\u03a7\u03ac")
        buf.write("\u03b3\u03b8\u03bc\u03c1\u03c8\u03cd\u03cf\u03d2\u03d6")
        buf.write("\u03db\u03df\u03e5\u03e9\u03ee\u03f2\u03f7\u03fe\u0403")
        buf.write("\u0408\u040d\u0413")
        return buf.getvalue()


class GraphlyParser ( Parser ):

    grammarFileName = "Graphly.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'loop'", "'start'", "'until'", 
                     "'step'", "'then'", "'end'", "'check'", "'else'", "'point'", 
                     "':'", "','", "'segment'", "'circle'", "'polygon'", 
                     "'group'", "'['", "']'", "'num'", "'iterator'", "'canvas'", 
                     "'draw'", "'fill'", "'move'", "'place'", "'rotate'", 
                     "'scale'", "'('", "')'", "'!='", "'&'", "'|'", "<INVALID>", 
                     "'\r'", "<INVALID>", "'+'", "'-'", "'*'", "'/'", "'%'", 
                     "'!'", "'='", "'>'", "'<'", "'>='", "'<='", "<INVALID>", 
                     "'.'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "WS", "CR", "COM_SIGN", "PLUS", "MINUS", 
                      "MULTIPLICATION", "DIVISION", "MODULO", "NEG", "EQ", 
                      "GREATER", "LOWER", "GT", "LT", "COLOR", "DOT", "DIGIT", 
                      "NAME" ]

    RULE_program = 0
    RULE_instruction = 1
    RULE_block = 2
    RULE_loop = 3
    RULE_check = 4
    RULE_condition_block = 5
    RULE_shape = 6
    RULE_point = 7
    RULE_segment = 8
    RULE_circle = 9
    RULE_polygon = 10
    RULE_group = 11
    RULE_groupMember = 12
    RULE_type_definition = 13
    RULE_num = 14
    RULE_iterator = 15
    RULE_canvas = 16
    RULE_draw = 17
    RULE_transformation = 18
    RULE_fill = 19
    RULE_move = 20
    RULE_place = 21
    RULE_rotate = 22
    RULE_scale = 23
    RULE_expr = 24
    RULE_atom = 25
    RULE_arithmetic = 26
    RULE_logic = 27
    RULE_neq = 28
    RULE_cond = 29
    RULE_signed_flt = 30
    RULE_flt = 31
    RULE_operation_flt = 32
    RULE_itr = 33

    ruleNames =  [ "program", "instruction", "block", "loop", "check", "condition_block", 
                   "shape", "point", "segment", "circle", "polygon", "group", 
                   "groupMember", "type_definition", "num", "iterator", 
                   "canvas", "draw", "transformation", "fill", "move", "place", 
                   "rotate", "scale", "expr", "atom", "arithmetic", "logic", 
                   "neq", "cond", "signed_flt", "flt", "operation_flt", 
                   "itr" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    WS=33
    CR=34
    COM_SIGN=35
    PLUS=36
    MINUS=37
    MULTIPLICATION=38
    DIVISION=39
    MODULO=40
    NEG=41
    EQ=42
    GREATER=43
    LOWER=44
    GT=45
    LT=46
    COLOR=47
    DOT=48
    DIGIT=49
    NAME=50

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def canvas(self):
            return self.getTypedRuleContext(GraphlyParser.CanvasContext,0)


        def EOF(self):
            return self.getToken(GraphlyParser.EOF, 0)

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def getRuleIndex(self):
            return GraphlyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = GraphlyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 82
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 71
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 68
                            self.match(GraphlyParser.T__0) 
                        self.state = 73
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                    self.state = 74
                    self.instruction()
                    self.state = 76 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 75
                            self.match(GraphlyParser.T__0)

                        else:
                            raise NoViableAltException(self)
                        self.state = 78 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
             
                self.state = 84
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 85
            self.canvas()
            self.state = 100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__0:
                self.state = 87 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 86
                        self.match(GraphlyParser.T__0)

                    else:
                        raise NoViableAltException(self)
                    self.state = 89 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

                self.state = 91
                self.instruction()
                self.state = 95
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 92
                        self.match(GraphlyParser.T__0) 
                    self.state = 97
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                self.state = 102
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 103
            self.match(GraphlyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shape(self):
            return self.getTypedRuleContext(GraphlyParser.ShapeContext,0)


        def type_definition(self):
            return self.getTypedRuleContext(GraphlyParser.Type_definitionContext,0)


        def draw(self):
            return self.getTypedRuleContext(GraphlyParser.DrawContext,0)


        def transformation(self):
            return self.getTypedRuleContext(GraphlyParser.TransformationContext,0)


        def group(self):
            return self.getTypedRuleContext(GraphlyParser.GroupContext,0)


        def loop(self):
            return self.getTypedRuleContext(GraphlyParser.LoopContext,0)


        def check(self):
            return self.getTypedRuleContext(GraphlyParser.CheckContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = GraphlyParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instruction)
        self._la = 0 # Token type
        try:
            self.state = 118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 105
                self.shape()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 106
                self.type_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 107
                self.draw()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 108
                self.transformation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 109
                self.group()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 110
                self.loop()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 111
                self.check()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 112
                    self.match(GraphlyParser.WS)
                    self.state = 117
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = GraphlyParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 131
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 123
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 120
                            self.match(GraphlyParser.WS) 
                        self.state = 125
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                    self.state = 126
                    self.instruction()
                    self.state = 127
                    self.match(GraphlyParser.T__0) 
                self.state = 133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.start = None # ExprContext
            self.until = None # ExprContext
            self.step = None # ExprContext

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop" ):
                listener.enterLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop" ):
                listener.exitLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = GraphlyParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 134
            self.match(GraphlyParser.T__1)
            self.state = 136 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 135
                self.match(GraphlyParser.WS)
                self.state = 138 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 140
            localctx.name = self.match(GraphlyParser.NAME)
            self.state = 142 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 141
                self.match(GraphlyParser.WS)
                self.state = 144 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 146
            self.match(GraphlyParser.T__2)
            self.state = 148 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 147
                self.match(GraphlyParser.WS)
                self.state = 150 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 152
            localctx.start = self.expr(0)
            self.state = 154 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 153
                self.match(GraphlyParser.WS)
                self.state = 156 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 158
            self.match(GraphlyParser.T__3)
            self.state = 160 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 159
                self.match(GraphlyParser.WS)
                self.state = 162 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 164
            localctx.until = self.expr(0)
            self.state = 166 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 165
                self.match(GraphlyParser.WS)
                self.state = 168 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 170
            self.match(GraphlyParser.T__4)
            self.state = 172 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 171
                self.match(GraphlyParser.WS)
                self.state = 174 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 176
            localctx.step = self.expr(0)
            self.state = 178 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 177
                self.match(GraphlyParser.WS)
                self.state = 180 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 182
            self.match(GraphlyParser.T__5)
            self.state = 183
            self.match(GraphlyParser.T__0)
            self.state = 184
            self.block()
            self.state = 188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 185
                self.match(GraphlyParser.WS)
                self.state = 190
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 191
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Condition_blockContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Condition_blockContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck" ):
                listener.enterCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck" ):
                listener.exitCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheck" ):
                return visitor.visitCheck(self)
            else:
                return visitor.visitChildren(self)




    def check(self):

        localctx = GraphlyParser.CheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 193
                self.match(GraphlyParser.WS)
                self.state = 198
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 199
            self.match(GraphlyParser.T__7)
            self.state = 201 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 200
                self.match(GraphlyParser.WS)
                self.state = 203 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 205
            self.condition_block()
            self.state = 221
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 206
                    self.match(GraphlyParser.T__8)
                    self.state = 208 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 207
                        self.match(GraphlyParser.WS)
                        self.state = 210 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 212
                    self.match(GraphlyParser.T__7)
                    self.state = 214 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 213
                        self.match(GraphlyParser.WS)
                        self.state = 216 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 218
                    self.condition_block() 
                self.state = 223
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

            self.state = 227
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 224
                    self.match(GraphlyParser.WS) 
                self.state = 229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.T__8:
                self.state = 230
                self.match(GraphlyParser.T__8)
                self.state = 232 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 231
                    self.match(GraphlyParser.WS)
                    self.state = 234 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 236
                self.match(GraphlyParser.T__5)
                self.state = 237
                self.match(GraphlyParser.T__0)
                self.state = 238
                self.block()


            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 241
                self.match(GraphlyParser.WS)
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 247
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_condition_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_block" ):
                listener.enterCondition_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_block" ):
                listener.exitCondition_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition_block" ):
                return visitor.visitCondition_block(self)
            else:
                return visitor.visitChildren(self)




    def condition_block(self):

        localctx = GraphlyParser.Condition_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_condition_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.expr(0)
            self.state = 251 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 250
                self.match(GraphlyParser.WS)
                self.state = 253 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 255
            self.match(GraphlyParser.T__5)
            self.state = 256
            self.match(GraphlyParser.T__0)
            self.state = 260
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 257
                    self.match(GraphlyParser.WS) 
                self.state = 262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 263
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShapeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def point(self):
            return self.getTypedRuleContext(GraphlyParser.PointContext,0)


        def segment(self):
            return self.getTypedRuleContext(GraphlyParser.SegmentContext,0)


        def circle(self):
            return self.getTypedRuleContext(GraphlyParser.CircleContext,0)


        def polygon(self):
            return self.getTypedRuleContext(GraphlyParser.PolygonContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_shape

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape" ):
                listener.enterShape(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape" ):
                listener.exitShape(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShape" ):
                return visitor.visitShape(self)
            else:
                return visitor.visitChildren(self)




    def shape(self):

        localctx = GraphlyParser.ShapeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_shape)
        try:
            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 265
                self.point()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 266
                self.segment()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 267
                self.circle()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 268
                self.polygon()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_point

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoint" ):
                listener.enterPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoint" ):
                listener.exitPoint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPoint" ):
                return visitor.visitPoint(self)
            else:
                return visitor.visitChildren(self)




    def point(self):

        localctx = GraphlyParser.PointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_point)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 271
                self.match(GraphlyParser.WS)
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 277
            self.match(GraphlyParser.T__9)
            self.state = 279 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 278
                self.match(GraphlyParser.WS)
                self.state = 281 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 283
            self.match(GraphlyParser.NAME)
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 284
                self.match(GraphlyParser.WS)
                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 290
            self.match(GraphlyParser.T__10)
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 291
                self.match(GraphlyParser.WS)
                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 297
            localctx.x = self.expr(0)
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 298
                self.match(GraphlyParser.WS)
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 304
            self.match(GraphlyParser.T__11)
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 305
                self.match(GraphlyParser.WS)
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 311
            localctx.y = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegment" ):
                listener.enterSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegment" ):
                listener.exitSegment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegment" ):
                return visitor.visitSegment(self)
            else:
                return visitor.visitChildren(self)




    def segment(self):

        localctx = GraphlyParser.SegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 313
                self.match(GraphlyParser.WS)
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 319
            self.match(GraphlyParser.T__12)
            self.state = 321 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 320
                self.match(GraphlyParser.WS)
                self.state = 323 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 325
            self.match(GraphlyParser.NAME)
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 326
                self.match(GraphlyParser.WS)
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 332
            self.match(GraphlyParser.T__10)
            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 333
                self.match(GraphlyParser.WS)
                self.state = 338
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 339
            self.match(GraphlyParser.NAME)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 340
                self.match(GraphlyParser.WS)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 346
            self.match(GraphlyParser.T__11)
            self.state = 348 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 347
                self.match(GraphlyParser.WS)
                self.state = 350 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 352
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CircleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_circle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCircle" ):
                listener.enterCircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCircle" ):
                listener.exitCircle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCircle" ):
                return visitor.visitCircle(self)
            else:
                return visitor.visitChildren(self)




    def circle(self):

        localctx = GraphlyParser.CircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_circle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 354
                self.match(GraphlyParser.WS)
                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 360
            self.match(GraphlyParser.T__13)
            self.state = 362 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 361
                self.match(GraphlyParser.WS)
                self.state = 364 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 366
            self.match(GraphlyParser.NAME)
            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 367
                self.match(GraphlyParser.WS)
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 373
            self.match(GraphlyParser.T__10)
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 374
                self.match(GraphlyParser.WS)
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 380
            self.match(GraphlyParser.NAME)
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 381
                self.match(GraphlyParser.WS)
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 387
            self.match(GraphlyParser.T__11)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 388
                self.match(GraphlyParser.WS)
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 394
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolygonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_polygon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolygon" ):
                listener.enterPolygon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolygon" ):
                listener.exitPolygon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolygon" ):
                return visitor.visitPolygon(self)
            else:
                return visitor.visitChildren(self)




    def polygon(self):

        localctx = GraphlyParser.PolygonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_polygon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 396
                self.match(GraphlyParser.WS)
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 402
            self.match(GraphlyParser.T__14)
            self.state = 404 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 403
                self.match(GraphlyParser.WS)
                self.state = 406 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 408
            self.match(GraphlyParser.NAME)
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 409
                self.match(GraphlyParser.WS)
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 415
            self.match(GraphlyParser.T__10)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 416
                self.match(GraphlyParser.WS)
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 422
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = GraphlyParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 424
                self.match(GraphlyParser.WS)
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 430
            self.match(GraphlyParser.T__15)
            self.state = 432 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 431
                self.match(GraphlyParser.WS)
                self.state = 434 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 436
            self.match(GraphlyParser.NAME)
            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 437
                self.match(GraphlyParser.WS)
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 443
            self.match(GraphlyParser.T__10)
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 444
                self.match(GraphlyParser.WS)
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 450
            self.match(GraphlyParser.NAME)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 451
                self.match(GraphlyParser.WS)
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__11:
                self.state = 457
                self.match(GraphlyParser.T__11)
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 458
                    self.match(GraphlyParser.WS)
                    self.state = 463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 464
                self.match(GraphlyParser.NAME)
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 465
                    self.match(GraphlyParser.WS)
                    self.state = 470
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def itr(self):
            return self.getTypedRuleContext(GraphlyParser.ItrContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_groupMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupMember" ):
                listener.enterGroupMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupMember" ):
                listener.exitGroupMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupMember" ):
                return visitor.visitGroupMember(self)
            else:
                return visitor.visitChildren(self)




    def groupMember(self):

        localctx = GraphlyParser.GroupMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_groupMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 476
                self.match(GraphlyParser.WS)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 482
            self.match(GraphlyParser.NAME)
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 483
                self.match(GraphlyParser.WS)
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 489
            self.match(GraphlyParser.T__16)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 490
                self.match(GraphlyParser.WS)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.DIGIT]:
                self.state = 496
                self.itr()
                pass
            elif token in [GraphlyParser.NAME]:
                self.state = 497
                self.match(GraphlyParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 500
                self.match(GraphlyParser.WS)
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 506
            self.match(GraphlyParser.T__17)
            self.state = 508 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 507
                self.match(GraphlyParser.WS)
                self.state = 510 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num(self):
            return self.getTypedRuleContext(GraphlyParser.NumContext,0)


        def iterator(self):
            return self.getTypedRuleContext(GraphlyParser.IteratorContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_definition" ):
                listener.enterType_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_definition" ):
                listener.exitType_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_definition" ):
                return visitor.visitType_definition(self)
            else:
                return visitor.visitChildren(self)




    def type_definition(self):

        localctx = GraphlyParser.Type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_type_definition)
        try:
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 512
                self.num()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 513
                self.iterator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_num

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum" ):
                listener.enterNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum" ):
                listener.exitNum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum" ):
                return visitor.visitNum(self)
            else:
                return visitor.visitChildren(self)




    def num(self):

        localctx = GraphlyParser.NumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_num)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 516
                self.match(GraphlyParser.WS)
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 522
            self.match(GraphlyParser.T__18)
            self.state = 524 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 523
                self.match(GraphlyParser.WS)
                self.state = 526 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 528
            self.match(GraphlyParser.NAME)
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 529
                self.match(GraphlyParser.WS)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 535
            self.match(GraphlyParser.T__10)
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 536
                self.match(GraphlyParser.WS)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 542
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def itr(self):
            return self.getTypedRuleContext(GraphlyParser.ItrContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterator" ):
                listener.enterIterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterator" ):
                listener.exitIterator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterator" ):
                return visitor.visitIterator(self)
            else:
                return visitor.visitChildren(self)




    def iterator(self):

        localctx = GraphlyParser.IteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 544
                self.match(GraphlyParser.WS)
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 550
            self.match(GraphlyParser.T__19)
            self.state = 552 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 551
                self.match(GraphlyParser.WS)
                self.state = 554 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 556
            self.match(GraphlyParser.NAME)
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 557
                self.match(GraphlyParser.WS)
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 563
            self.match(GraphlyParser.T__10)
            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 564
                self.match(GraphlyParser.WS)
                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.DIGIT]:
                self.state = 570
                self.itr()
                pass
            elif token in [GraphlyParser.NAME]:
                self.state = 571
                self.match(GraphlyParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CanvasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_canvas

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCanvas" ):
                listener.enterCanvas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCanvas" ):
                listener.exitCanvas(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCanvas" ):
                return visitor.visitCanvas(self)
            else:
                return visitor.visitChildren(self)




    def canvas(self):

        localctx = GraphlyParser.CanvasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_canvas)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 574
                self.match(GraphlyParser.WS)
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 580
            self.match(GraphlyParser.T__20)
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 581
                self.match(GraphlyParser.WS)
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 587
            self.match(GraphlyParser.T__10)
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 588
                self.match(GraphlyParser.WS)
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 594
            localctx.x = self.expr(0)
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 595
                self.match(GraphlyParser.WS)
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 601
            self.match(GraphlyParser.T__11)
            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 602
                self.match(GraphlyParser.WS)
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 608
            localctx.y = self.expr(0)
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 609
                self.match(GraphlyParser.WS)
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 615
            self.match(GraphlyParser.T__11)
            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 616
                self.match(GraphlyParser.WS)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 622
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DrawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_draw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDraw" ):
                listener.enterDraw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDraw" ):
                listener.exitDraw(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDraw" ):
                return visitor.visitDraw(self)
            else:
                return visitor.visitChildren(self)




    def draw(self):

        localctx = GraphlyParser.DrawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_draw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 624
                self.match(GraphlyParser.WS)
                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 630
            self.match(GraphlyParser.T__21)
            self.state = 632 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 631
                self.match(GraphlyParser.WS)
                self.state = 634 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 636
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fill(self):
            return self.getTypedRuleContext(GraphlyParser.FillContext,0)


        def move(self):
            return self.getTypedRuleContext(GraphlyParser.MoveContext,0)


        def place(self):
            return self.getTypedRuleContext(GraphlyParser.PlaceContext,0)


        def rotate(self):
            return self.getTypedRuleContext(GraphlyParser.RotateContext,0)


        def scale(self):
            return self.getTypedRuleContext(GraphlyParser.ScaleContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformation" ):
                listener.enterTransformation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformation" ):
                listener.exitTransformation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformation" ):
                return visitor.visitTransformation(self)
            else:
                return visitor.visitChildren(self)




    def transformation(self):

        localctx = GraphlyParser.TransformationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_transformation)
        try:
            self.state = 643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 638
                self.fill()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 639
                self.move()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 640
                self.place()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 641
                self.rotate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 642
                self.scale()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FillContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_fill

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFill" ):
                listener.enterFill(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFill" ):
                listener.exitFill(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFill" ):
                return visitor.visitFill(self)
            else:
                return visitor.visitChildren(self)




    def fill(self):

        localctx = GraphlyParser.FillContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_fill)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 645
                self.match(GraphlyParser.WS)
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 651
            self.match(GraphlyParser.T__22)
            self.state = 653 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 652
                self.match(GraphlyParser.WS)
                self.state = 655 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 657
            self.match(GraphlyParser.NAME)
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 658
                self.match(GraphlyParser.WS)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 664
            self.match(GraphlyParser.T__10)
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 665
                self.match(GraphlyParser.WS)
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 671
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def operation_flt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Operation_fltContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Operation_fltContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMove" ):
                return visitor.visitMove(self)
            else:
                return visitor.visitChildren(self)




    def move(self):

        localctx = GraphlyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 673
                self.match(GraphlyParser.WS)
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 679
            self.match(GraphlyParser.T__23)
            self.state = 681 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 680
                self.match(GraphlyParser.WS)
                self.state = 683 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 685
            self.match(GraphlyParser.NAME)
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 686
                self.match(GraphlyParser.WS)
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 692
            self.match(GraphlyParser.T__10)
            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 693
                self.match(GraphlyParser.WS)
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 699
                self.operation_flt()
                pass

            elif la_ == 2:
                self.state = 700
                self.match(GraphlyParser.NAME)
                pass


            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 703
                self.match(GraphlyParser.WS)
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 709
            self.match(GraphlyParser.T__11)
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 710
                self.match(GraphlyParser.WS)
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 716
                self.operation_flt()
                pass

            elif la_ == 2:
                self.state = 717
                self.match(GraphlyParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_place

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlace" ):
                listener.enterPlace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlace" ):
                listener.exitPlace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = GraphlyParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_place)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 720
                self.match(GraphlyParser.WS)
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 726
            self.match(GraphlyParser.T__24)
            self.state = 728 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 727
                self.match(GraphlyParser.WS)
                self.state = 730 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 732
            self.match(GraphlyParser.NAME)
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 733
                self.match(GraphlyParser.WS)
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 739
            self.match(GraphlyParser.T__10)
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 740
                self.match(GraphlyParser.WS)
                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 746
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RotateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def operation_flt(self):
            return self.getTypedRuleContext(GraphlyParser.Operation_fltContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_rotate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRotate" ):
                listener.enterRotate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRotate" ):
                listener.exitRotate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRotate" ):
                return visitor.visitRotate(self)
            else:
                return visitor.visitChildren(self)




    def rotate(self):

        localctx = GraphlyParser.RotateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_rotate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 748
                self.match(GraphlyParser.WS)
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 754
            self.match(GraphlyParser.T__25)
            self.state = 756 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 755
                self.match(GraphlyParser.WS)
                self.state = 758 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 760
            self.match(GraphlyParser.NAME)
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 761
                self.match(GraphlyParser.WS)
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 767
            self.match(GraphlyParser.T__10)
            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 768
                self.match(GraphlyParser.WS)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 774
                self.operation_flt()
                pass

            elif la_ == 2:
                self.state = 775
                self.match(GraphlyParser.NAME)
                pass


            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 778
                self.match(GraphlyParser.WS)
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 784
            self.match(GraphlyParser.T__11)
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 785
                self.match(GraphlyParser.WS)
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 791
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def operation_flt(self):
            return self.getTypedRuleContext(GraphlyParser.Operation_fltContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScale" ):
                listener.enterScale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScale" ):
                listener.exitScale(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScale" ):
                return visitor.visitScale(self)
            else:
                return visitor.visitChildren(self)




    def scale(self):

        localctx = GraphlyParser.ScaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_scale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 793
                self.match(GraphlyParser.WS)
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 799
            self.match(GraphlyParser.T__26)
            self.state = 801 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 800
                self.match(GraphlyParser.WS)
                self.state = 803 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 805
            self.match(GraphlyParser.NAME)
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 806
                self.match(GraphlyParser.WS)
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 812
            self.match(GraphlyParser.T__10)
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 813
                self.match(GraphlyParser.WS)
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 819
            self.operation_flt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MinusOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)
        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinusOpExpr" ):
                listener.enterMinusOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinusOpExpr" ):
                listener.exitMinusOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinusOpExpr" ):
                return visitor.visitMinusOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class BooleanOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def LT(self):
            return self.getToken(GraphlyParser.LT, 0)
        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)
        def GT(self):
            return self.getToken(GraphlyParser.GT, 0)
        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)
        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOpExpr" ):
                listener.enterBooleanOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOpExpr" ):
                listener.exitBooleanOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOpExpr" ):
                return visitor.visitBooleanOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def MULTIPLICATION(self):
            return self.getToken(GraphlyParser.MULTIPLICATION, 0)
        def DIVISION(self):
            return self.getToken(GraphlyParser.DIVISION, 0)
        def MODULO(self):
            return self.getToken(GraphlyParser.MODULO, 0)
        def PLUS(self):
            return self.getToken(GraphlyParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOpExpr" ):
                listener.enterArithmeticOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOpExpr" ):
                listener.exitArithmeticOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOpExpr" ):
                return visitor.visitArithmeticOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class NegationOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEG(self):
            return self.getToken(GraphlyParser.NEG, 0)
        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegationOpExpr" ):
                listener.enterNegationOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegationOpExpr" ):
                listener.exitNegationOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNegationOpExpr" ):
                return visitor.visitNegationOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class AtomExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(GraphlyParser.AtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomExpr" ):
                listener.enterAtomExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomExpr" ):
                listener.exitAtomExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomExpr" ):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpr" ):
                listener.enterParenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpr" ):
                listener.exitParenExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpr" ):
                return visitor.visitParenExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GraphlyParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.T__27]:
                localctx = GraphlyParser.ParenExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 822
                self.match(GraphlyParser.T__27)
                self.state = 826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 823
                    self.match(GraphlyParser.WS)
                    self.state = 828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 829
                self.expr(0)
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 830
                    self.match(GraphlyParser.WS)
                    self.state = 835
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 836
                self.match(GraphlyParser.T__28)
                pass
            elif token in [GraphlyParser.MINUS]:
                localctx = GraphlyParser.MinusOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 838
                self.match(GraphlyParser.MINUS)
                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 839
                    self.match(GraphlyParser.WS)
                    self.state = 844
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 845
                self.expr(6)
                pass
            elif token in [GraphlyParser.NEG]:
                localctx = GraphlyParser.NegationOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 846
                self.match(GraphlyParser.NEG)
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 847
                    self.match(GraphlyParser.WS)
                    self.state = 852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 853
                self.expr(3)
                pass
            elif token in [GraphlyParser.DOT, GraphlyParser.DIGIT, GraphlyParser.NAME]:
                localctx = GraphlyParser.AtomExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 854
                self.atom()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 904
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 902
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                    if la_ == 1:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 857
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 861
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 858
                            self.match(GraphlyParser.WS)
                            self.state = 863
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 864
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.PLUS) | (1 << GraphlyParser.MINUS) | (1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 868
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 865
                            self.match(GraphlyParser.WS)
                            self.state = 870
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 871
                        localctx.right = self.expr(6)
                        pass

                    elif la_ == 2:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 872
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 876
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 873
                            self.match(GraphlyParser.WS)
                            self.state = 878
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 879
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__29) | (1 << GraphlyParser.EQ) | (1 << GraphlyParser.GREATER) | (1 << GraphlyParser.LOWER) | (1 << GraphlyParser.GT) | (1 << GraphlyParser.LT))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 883
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 880
                            self.match(GraphlyParser.WS)
                            self.state = 885
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 886
                        localctx.right = self.expr(5)
                        pass

                    elif la_ == 3:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 887
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 891
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 888
                            self.match(GraphlyParser.WS)
                            self.state = 893
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 894
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==GraphlyParser.T__30 or _la==GraphlyParser.T__31):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 898
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 895
                            self.match(GraphlyParser.WS)
                            self.state = 900
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 901
                        localctx.right = self.expr(3)
                        pass

             
                self.state = 906
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_atom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class VarAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarAtom" ):
                listener.enterVarAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarAtom" ):
                listener.exitVarAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarAtom" ):
                return visitor.visitVarAtom(self)
            else:
                return visitor.visitChildren(self)


    class IntAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def itr(self):
            return self.getTypedRuleContext(GraphlyParser.ItrContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntAtom" ):
                listener.enterIntAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntAtom" ):
                listener.exitIntAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntAtom" ):
                return visitor.visitIntAtom(self)
            else:
                return visitor.visitChildren(self)


    class FltAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def flt(self):
            return self.getTypedRuleContext(GraphlyParser.FltContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFltAtom" ):
                listener.enterFltAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFltAtom" ):
                listener.exitFltAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFltAtom" ):
                return visitor.visitFltAtom(self)
            else:
                return visitor.visitChildren(self)



    def atom(self):

        localctx = GraphlyParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_atom)
        try:
            self.state = 910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.IntAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 907
                self.itr()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.FltAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 908
                self.flt()
                pass

            elif la_ == 3:
                localctx = GraphlyParser.VarAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 909
                self.match(GraphlyParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(GraphlyParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)

        def MULTIPLICATION(self):
            return self.getToken(GraphlyParser.MULTIPLICATION, 0)

        def DIVISION(self):
            return self.getToken(GraphlyParser.DIVISION, 0)

        def MODULO(self):
            return self.getToken(GraphlyParser.MODULO, 0)

        def getRuleIndex(self):
            return GraphlyParser.RULE_arithmetic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic" ):
                listener.enterArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic" ):
                listener.exitArithmetic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmetic" ):
                return visitor.visitArithmetic(self)
            else:
                return visitor.visitChildren(self)




    def arithmetic(self):

        localctx = GraphlyParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_arithmetic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.PLUS) | (1 << GraphlyParser.MINUS) | (1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)

        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)

        def GT(self):
            return self.getToken(GraphlyParser.GT, 0)

        def LT(self):
            return self.getToken(GraphlyParser.LT, 0)

        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)

        def neq(self):
            return self.getTypedRuleContext(GraphlyParser.NeqContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_logic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic" ):
                listener.enterLogic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic" ):
                listener.exitLogic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogic" ):
                return visitor.visitLogic(self)
            else:
                return visitor.visitChildren(self)




    def logic(self):

        localctx = GraphlyParser.LogicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_logic)
        try:
            self.state = 920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.GREATER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 914
                self.match(GraphlyParser.GREATER)
                pass
            elif token in [GraphlyParser.LOWER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.match(GraphlyParser.LOWER)
                pass
            elif token in [GraphlyParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 916
                self.match(GraphlyParser.GT)
                pass
            elif token in [GraphlyParser.LT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 917
                self.match(GraphlyParser.LT)
                pass
            elif token in [GraphlyParser.EQ]:
                self.enterOuterAlt(localctx, 5)
                self.state = 918
                self.match(GraphlyParser.EQ)
                pass
            elif token in [GraphlyParser.NEG]:
                self.enterOuterAlt(localctx, 6)
                self.state = 919
                self.neq()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEG(self):
            return self.getToken(GraphlyParser.NEG, 0)

        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)

        def getRuleIndex(self):
            return GraphlyParser.RULE_neq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNeq" ):
                listener.enterNeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNeq" ):
                listener.exitNeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNeq" ):
                return visitor.visitNeq(self)
            else:
                return visitor.visitChildren(self)




    def neq(self):

        localctx = GraphlyParser.NeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_neq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.match(GraphlyParser.NEG)
            self.state = 923
            self.match(GraphlyParser.EQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logic(self):
            return self.getTypedRuleContext(GraphlyParser.LogicContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def operation_flt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Operation_fltContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Operation_fltContext,i)


        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def itr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ItrContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ItrContext,i)


        def getRuleIndex(self):
            return GraphlyParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond" ):
                return visitor.visitCond(self)
            else:
                return visitor.visitChildren(self)




    def cond(self):

        localctx = GraphlyParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_cond)
        self._la = 0 # Token type
        try:
            self.state = 973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 925
                    self.match(GraphlyParser.WS)
                    self.state = 930
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 933
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 931
                    self.operation_flt()
                    pass

                elif la_ == 2:
                    self.state = 932
                    self.match(GraphlyParser.NAME)
                    pass


                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 935
                    self.match(GraphlyParser.WS)
                    self.state = 940
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 941
                self.logic()
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 942
                    self.match(GraphlyParser.WS)
                    self.state = 947
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 950
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                if la_ == 1:
                    self.state = 948
                    self.operation_flt()
                    pass

                elif la_ == 2:
                    self.state = 949
                    self.match(GraphlyParser.NAME)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 954
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GraphlyParser.DIGIT]:
                    self.state = 952
                    self.itr()
                    pass
                elif token in [GraphlyParser.NAME]:
                    self.state = 953
                    self.match(GraphlyParser.NAME)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 956
                    self.match(GraphlyParser.WS)
                    self.state = 961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 962
                self.logic()
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 963
                    self.match(GraphlyParser.WS)
                    self.state = 968
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 971
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GraphlyParser.DIGIT]:
                    self.state = 969
                    self.itr()
                    pass
                elif token in [GraphlyParser.NAME]:
                    self.state = 970
                    self.match(GraphlyParser.NAME)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_fltContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flt(self):
            return self.getTypedRuleContext(GraphlyParser.FltContext,0)


        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)

        def arithmetic(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ArithmeticContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ArithmeticContext,i)


        def signed_flt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Signed_fltContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Signed_fltContext,i)


        def getRuleIndex(self):
            return GraphlyParser.RULE_signed_flt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_flt" ):
                listener.enterSigned_flt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_flt" ):
                listener.exitSigned_flt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_flt" ):
                return visitor.visitSigned_flt(self)
            else:
                return visitor.visitChildren(self)




    def signed_flt(self):

        localctx = GraphlyParser.Signed_fltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_signed_flt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.MINUS:
                self.state = 975
                self.match(GraphlyParser.MINUS)


            self.state = 980
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.DOT, GraphlyParser.DIGIT]:
                self.state = 978
                self.flt()
                pass
            elif token in [GraphlyParser.NAME]:
                self.state = 979
                self.match(GraphlyParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 989
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 982
                    self.arithmetic()
                    self.state = 985
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                    if la_ == 1:
                        self.state = 983
                        self.signed_flt()
                        pass

                    elif la_ == 2:
                        self.state = 984
                        self.match(GraphlyParser.NAME)
                        pass

             
                self.state = 991
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FltContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(GraphlyParser.DOT, 0)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.DIGIT)
            else:
                return self.getToken(GraphlyParser.DIGIT, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_flt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlt" ):
                listener.enterFlt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlt" ):
                listener.exitFlt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlt" ):
                return visitor.visitFlt(self)
            else:
                return visitor.visitChildren(self)




    def flt(self):

        localctx = GraphlyParser.FltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_flt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.DIGIT:
                    self.state = 992
                    self.match(GraphlyParser.DIGIT)
                    self.state = 997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 998
                self.match(GraphlyParser.DOT)


            self.state = 1002 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1001
                    self.match(GraphlyParser.DIGIT)

                else:
                    raise NoViableAltException(self)
                self.state = 1004 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operation_fltContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.FltContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.FltContext,i)


        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def arithmetic(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ArithmeticContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ArithmeticContext,i)


        def getRuleIndex(self):
            return GraphlyParser.RULE_operation_flt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperation_flt" ):
                listener.enterOperation_flt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperation_flt" ):
                listener.exitOperation_flt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperation_flt" ):
                return visitor.visitOperation_flt(self)
            else:
                return visitor.visitChildren(self)




    def operation_flt(self):

        localctx = GraphlyParser.Operation_fltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_operation_flt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.DOT, GraphlyParser.DIGIT]:
                self.state = 1006
                self.flt()
                pass
            elif token in [GraphlyParser.NAME]:
                self.state = 1007
                self.match(GraphlyParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1013
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1010
                    self.match(GraphlyParser.WS) 
                self.state = 1015
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.PLUS) | (1 << GraphlyParser.MINUS) | (1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0):
                self.state = 1016
                self.arithmetic()
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1017
                    self.match(GraphlyParser.WS)
                    self.state = 1022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1025
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [GraphlyParser.DOT, GraphlyParser.DIGIT]:
                    self.state = 1023
                    self.flt()
                    pass
                elif token in [GraphlyParser.NAME]:
                    self.state = 1024
                    self.match(GraphlyParser.NAME)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1030
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1027
                        self.match(GraphlyParser.WS) 
                    self.state = 1032
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

                self.state = 1037
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.DIGIT)
            else:
                return self.getToken(GraphlyParser.DIGIT, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_itr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItr" ):
                listener.enterItr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItr" ):
                listener.exitItr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItr" ):
                return visitor.visitItr(self)
            else:
                return visitor.visitChildren(self)




    def itr(self):

        localctx = GraphlyParser.ItrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_itr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1038
                    self.match(GraphlyParser.DIGIT)

                else:
                    raise NoViableAltException(self)
                self.state = 1041 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[24] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         




