# Generated from Graphly.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3;")
        buf.write("\u047b\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\3\2\7\2H\n\2\f\2")
        buf.write("\16\2K\13\2\3\2\3\2\7\2O\n\2\f\2\16\2R\13\2\3\2\5\2U\n")
        buf.write("\2\3\2\6\2X\n\2\r\2\16\2Y\7\2\\\n\2\f\2\16\2_\13\2\3\2")
        buf.write("\3\2\7\2c\n\2\f\2\16\2f\13\2\3\2\5\2i\n\2\3\2\6\2l\n\2")
        buf.write("\r\2\16\2m\3\2\3\2\7\2r\n\2\f\2\16\2u\13\2\3\2\5\2x\n")
        buf.write("\2\3\2\7\2{\n\2\f\2\16\2~\13\2\7\2\u0080\n\2\f\2\16\2")
        buf.write("\u0083\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\7\3\u0091\n\3\f\3\16\3\u0094\13\3\5\3\u0096\n\3")
        buf.write("\3\4\7\4\u0099\n\4\f\4\16\4\u009c\13\4\3\4\3\4\7\4\u00a0")
        buf.write("\n\4\f\4\16\4\u00a3\13\4\3\4\3\4\7\4\u00a7\n\4\f\4\16")
        buf.write("\4\u00aa\13\4\3\5\3\5\6\5\u00ae\n\5\r\5\16\5\u00af\3\5")
        buf.write("\3\5\6\5\u00b4\n\5\r\5\16\5\u00b5\3\5\3\5\6\5\u00ba\n")
        buf.write("\5\r\5\16\5\u00bb\3\5\3\5\6\5\u00c0\n\5\r\5\16\5\u00c1")
        buf.write("\3\5\3\5\6\5\u00c6\n\5\r\5\16\5\u00c7\3\5\3\5\6\5\u00cc")
        buf.write("\n\5\r\5\16\5\u00cd\3\5\3\5\6\5\u00d2\n\5\r\5\16\5\u00d3")
        buf.write("\3\5\3\5\6\5\u00d8\n\5\r\5\16\5\u00d9\3\5\3\5\7\5\u00de")
        buf.write("\n\5\f\5\16\5\u00e1\13\5\3\5\3\5\3\5\7\5\u00e6\n\5\f\5")
        buf.write("\16\5\u00e9\13\5\3\5\3\5\3\6\7\6\u00ee\n\6\f\6\16\6\u00f1")
        buf.write("\13\6\3\6\3\6\6\6\u00f5\n\6\r\6\16\6\u00f6\3\6\3\6\3\6")
        buf.write("\6\6\u00fc\n\6\r\6\16\6\u00fd\3\6\3\6\6\6\u0102\n\6\r")
        buf.write("\6\16\6\u0103\3\6\7\6\u0107\n\6\f\6\16\6\u010a\13\6\3")
        buf.write("\6\7\6\u010d\n\6\f\6\16\6\u0110\13\6\3\6\3\6\6\6\u0114")
        buf.write("\n\6\r\6\16\6\u0115\3\6\3\6\3\6\5\6\u011b\n\6\3\6\7\6")
        buf.write("\u011e\n\6\f\6\16\6\u0121\13\6\3\6\3\6\3\7\3\7\6\7\u0127")
        buf.write("\n\7\r\7\16\7\u0128\3\7\3\7\3\7\7\7\u012e\n\7\f\7\16\7")
        buf.write("\u0131\13\7\3\7\3\7\3\b\3\b\3\b\3\b\5\b\u0139\n\b\3\t")
        buf.write("\7\t\u013c\n\t\f\t\16\t\u013f\13\t\3\t\3\t\6\t\u0143\n")
        buf.write("\t\r\t\16\t\u0144\3\t\3\t\7\t\u0149\n\t\f\t\16\t\u014c")
        buf.write("\13\t\3\t\3\t\7\t\u0150\n\t\f\t\16\t\u0153\13\t\3\t\3")
        buf.write("\t\7\t\u0157\n\t\f\t\16\t\u015a\13\t\3\t\3\t\7\t\u015e")
        buf.write("\n\t\f\t\16\t\u0161\13\t\3\t\3\t\3\n\7\n\u0166\n\n\f\n")
        buf.write("\16\n\u0169\13\n\3\n\3\n\6\n\u016d\n\n\r\n\16\n\u016e")
        buf.write("\3\n\3\n\7\n\u0173\n\n\f\n\16\n\u0176\13\n\3\n\3\n\7\n")
        buf.write("\u017a\n\n\f\n\16\n\u017d\13\n\3\n\3\n\7\n\u0181\n\n\f")
        buf.write("\n\16\n\u0184\13\n\3\n\3\n\6\n\u0188\n\n\r\n\16\n\u0189")
        buf.write("\3\n\3\n\3\13\7\13\u018f\n\13\f\13\16\13\u0192\13\13\3")
        buf.write("\13\3\13\6\13\u0196\n\13\r\13\16\13\u0197\3\13\3\13\7")
        buf.write("\13\u019c\n\13\f\13\16\13\u019f\13\13\3\13\3\13\7\13\u01a3")
        buf.write("\n\13\f\13\16\13\u01a6\13\13\3\13\3\13\7\13\u01aa\n\13")
        buf.write("\f\13\16\13\u01ad\13\13\3\13\3\13\7\13\u01b1\n\13\f\13")
        buf.write("\16\13\u01b4\13\13\3\13\3\13\3\f\7\f\u01b9\n\f\f\f\16")
        buf.write("\f\u01bc\13\f\3\f\3\f\6\f\u01c0\n\f\r\f\16\f\u01c1\3\f")
        buf.write("\3\f\7\f\u01c6\n\f\f\f\16\f\u01c9\13\f\3\f\3\f\7\f\u01cd")
        buf.write("\n\f\f\f\16\f\u01d0\13\f\3\f\3\f\3\r\7\r\u01d5\n\r\f\r")
        buf.write("\16\r\u01d8\13\r\3\r\3\r\7\r\u01dc\n\r\f\r\16\r\u01df")
        buf.write("\13\r\3\r\3\r\7\r\u01e3\n\r\f\r\16\r\u01e6\13\r\3\r\3")
        buf.write("\r\7\r\u01ea\n\r\f\r\16\r\u01ed\13\r\3\r\3\r\3\16\3\16")
        buf.write("\5\16\u01f3\n\16\3\17\7\17\u01f6\n\17\f\17\16\17\u01f9")
        buf.write("\13\17\3\17\3\17\7\17\u01fd\n\17\f\17\16\17\u0200\13\17")
        buf.write("\3\17\3\17\7\17\u0204\n\17\f\17\16\17\u0207\13\17\3\17")
        buf.write("\3\17\7\17\u020b\n\17\f\17\16\17\u020e\13\17\3\17\3\17")
        buf.write("\6\17\u0212\n\17\r\17\16\17\u0213\3\17\3\17\7\17\u0218")
        buf.write("\n\17\f\17\16\17\u021b\13\17\3\17\3\17\7\17\u021f\n\17")
        buf.write("\f\17\16\17\u0222\13\17\3\17\3\17\7\17\u0226\n\17\f\17")
        buf.write("\16\17\u0229\13\17\3\17\3\17\7\17\u022d\n\17\f\17\16\17")
        buf.write("\u0230\13\17\3\17\3\17\7\17\u0234\n\17\f\17\16\17\u0237")
        buf.write("\13\17\7\17\u0239\n\17\f\17\16\17\u023c\13\17\3\20\3\20")
        buf.write("\5\20\u0240\n\20\3\21\7\21\u0243\n\21\f\21\16\21\u0246")
        buf.write("\13\21\3\21\3\21\6\21\u024a\n\21\r\21\16\21\u024b\3\21")
        buf.write("\3\21\7\21\u0250\n\21\f\21\16\21\u0253\13\21\3\21\3\21")
        buf.write("\7\21\u0257\n\21\f\21\16\21\u025a\13\21\3\21\3\21\3\22")
        buf.write("\7\22\u025f\n\22\f\22\16\22\u0262\13\22\3\22\3\22\6\22")
        buf.write("\u0266\n\22\r\22\16\22\u0267\3\22\3\22\7\22\u026c\n\22")
        buf.write("\f\22\16\22\u026f\13\22\3\22\3\22\7\22\u0273\n\22\f\22")
        buf.write("\16\22\u0276\13\22\3\22\3\22\3\23\7\23\u027b\n\23\f\23")
        buf.write("\16\23\u027e\13\23\3\23\3\23\7\23\u0282\n\23\f\23\16\23")
        buf.write("\u0285\13\23\3\23\3\23\7\23\u0289\n\23\f\23\16\23\u028c")
        buf.write("\13\23\3\23\3\23\7\23\u0290\n\23\f\23\16\23\u0293\13\23")
        buf.write("\3\23\3\23\7\23\u0297\n\23\f\23\16\23\u029a\13\23\3\23")
        buf.write("\3\23\7\23\u029e\n\23\f\23\16\23\u02a1\13\23\3\23\3\23")
        buf.write("\7\23\u02a5\n\23\f\23\16\23\u02a8\13\23\3\23\3\23\3\24")
        buf.write("\7\24\u02ad\n\24\f\24\16\24\u02b0\13\24\3\24\3\24\6\24")
        buf.write("\u02b4\n\24\r\24\16\24\u02b5\3\24\3\24\3\25\7\25\u02bb")
        buf.write("\n\25\f\25\16\25\u02be\13\25\3\25\3\25\6\25\u02c2\n\25")
        buf.write("\r\25\16\25\u02c3\3\25\3\25\7\25\u02c8\n\25\f\25\16\25")
        buf.write("\u02cb\13\25\3\25\3\25\6\25\u02cf\n\25\r\25\16\25\u02d0")
        buf.write("\3\25\3\25\7\25\u02d5\n\25\f\25\16\25\u02d8\13\25\3\25")
        buf.write("\3\25\6\25\u02dc\n\25\r\25\16\25\u02dd\3\25\5\25\u02e1")
        buf.write("\n\25\3\26\3\26\3\26\3\26\3\26\5\26\u02e8\n\26\3\27\7")
        buf.write("\27\u02eb\n\27\f\27\16\27\u02ee\13\27\3\27\3\27\6\27\u02f2")
        buf.write("\n\27\r\27\16\27\u02f3\3\27\3\27\7\27\u02f8\n\27\f\27")
        buf.write("\16\27\u02fb\13\27\3\27\3\27\7\27\u02ff\n\27\f\27\16\27")
        buf.write("\u0302\13\27\3\27\3\27\3\30\7\30\u0307\n\30\f\30\16\30")
        buf.write("\u030a\13\30\3\30\3\30\6\30\u030e\n\30\r\30\16\30\u030f")
        buf.write("\3\30\3\30\7\30\u0314\n\30\f\30\16\30\u0317\13\30\3\30")
        buf.write("\3\30\7\30\u031b\n\30\f\30\16\30\u031e\13\30\3\30\3\30")
        buf.write("\7\30\u0322\n\30\f\30\16\30\u0325\13\30\3\30\3\30\7\30")
        buf.write("\u0329\n\30\f\30\16\30\u032c\13\30\3\30\3\30\3\31\7\31")
        buf.write("\u0331\n\31\f\31\16\31\u0334\13\31\3\31\3\31\6\31\u0338")
        buf.write("\n\31\r\31\16\31\u0339\3\31\3\31\7\31\u033e\n\31\f\31")
        buf.write("\16\31\u0341\13\31\3\31\3\31\7\31\u0345\n\31\f\31\16\31")
        buf.write("\u0348\13\31\3\31\3\31\3\32\7\32\u034d\n\32\f\32\16\32")
        buf.write("\u0350\13\32\3\32\3\32\6\32\u0354\n\32\r\32\16\32\u0355")
        buf.write("\3\32\3\32\7\32\u035a\n\32\f\32\16\32\u035d\13\32\3\32")
        buf.write("\3\32\7\32\u0361\n\32\f\32\16\32\u0364\13\32\3\32\3\32")
        buf.write("\7\32\u0368\n\32\f\32\16\32\u036b\13\32\3\32\3\32\7\32")
        buf.write("\u036f\n\32\f\32\16\32\u0372\13\32\3\32\3\32\3\33\7\33")
        buf.write("\u0377\n\33\f\33\16\33\u037a\13\33\3\33\3\33\6\33\u037e")
        buf.write("\n\33\r\33\16\33\u037f\3\33\3\33\7\33\u0384\n\33\f\33")
        buf.write("\16\33\u0387\13\33\3\33\3\33\7\33\u038b\n\33\f\33\16\33")
        buf.write("\u038e\13\33\3\33\3\33\7\33\u0392\n\33\f\33\16\33\u0395")
        buf.write("\13\33\3\33\3\33\7\33\u0399\n\33\f\33\16\33\u039c\13\33")
        buf.write("\3\33\3\33\3\34\7\34\u03a1\n\34\f\34\16\34\u03a4\13\34")
        buf.write("\3\34\3\34\6\34\u03a8\n\34\r\34\16\34\u03a9\3\34\3\34")
        buf.write("\7\34\u03ae\n\34\f\34\16\34\u03b1\13\34\3\34\3\34\7\34")
        buf.write("\u03b5\n\34\f\34\16\34\u03b8\13\34\3\34\3\34\3\34\7\34")
        buf.write("\u03bd\n\34\f\34\16\34\u03c0\13\34\3\34\3\34\6\34\u03c4")
        buf.write("\n\34\r\34\16\34\u03c5\3\34\3\34\7\34\u03ca\n\34\f\34")
        buf.write("\16\34\u03cd\13\34\3\34\3\34\7\34\u03d1\n\34\f\34\16\34")
        buf.write("\u03d4\13\34\3\34\3\34\5\34\u03d8\n\34\3\35\3\35\3\35")
        buf.write("\7\35\u03dd\n\35\f\35\16\35\u03e0\13\35\3\35\3\35\7\35")
        buf.write("\u03e4\n\35\f\35\16\35\u03e7\13\35\3\35\3\35\3\35\3\35")
        buf.write("\7\35\u03ed\n\35\f\35\16\35\u03f0\13\35\3\35\3\35\3\35")
        buf.write("\7\35\u03f5\n\35\f\35\16\35\u03f8\13\35\3\35\3\35\3\35")
        buf.write("\7\35\u03fd\n\35\f\35\16\35\u0400\13\35\3\35\3\35\5\35")
        buf.write("\u0404\n\35\3\35\3\35\7\35\u0408\n\35\f\35\16\35\u040b")
        buf.write("\13\35\3\35\3\35\7\35\u040f\n\35\f\35\16\35\u0412\13\35")
        buf.write("\3\35\3\35\3\35\7\35\u0417\n\35\f\35\16\35\u041a\13\35")
        buf.write("\3\35\3\35\7\35\u041e\n\35\f\35\16\35\u0421\13\35\3\35")
        buf.write("\3\35\3\35\7\35\u0426\n\35\f\35\16\35\u0429\13\35\3\35")
        buf.write("\3\35\7\35\u042d\n\35\f\35\16\35\u0430\13\35\3\35\3\35")
        buf.write("\3\35\7\35\u0435\n\35\f\35\16\35\u0438\13\35\3\35\3\35")
        buf.write("\7\35\u043c\n\35\f\35\16\35\u043f\13\35\3\35\3\35\3\35")
        buf.write("\7\35\u0444\n\35\f\35\16\35\u0447\13\35\3\35\3\35\7\35")
        buf.write("\u044b\n\35\f\35\16\35\u044e\13\35\3\35\7\35\u0451\n\35")
        buf.write("\f\35\16\35\u0454\13\35\3\36\3\36\3\36\5\36\u0459\n\36")
        buf.write("\3\37\3\37\3 \3 \3 \3 \3 \3 \5 \u0463\n \3!\3!\3!\3\"")
        buf.write("\7\"\u0469\n\"\f\"\16\"\u046c\13\"\3\"\5\"\u046f\n\"\3")
        buf.write("\"\6\"\u0472\n\"\r\"\16\"\u0473\3#\6#\u0477\n#\r#\16#")
        buf.write("\u0478\3#\2\38$\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BD\2\7\3\2\"$\3\2-/\3\2+,\4")
        buf.write("\2%%\61\65\3\2+/\2\u0513\2]\3\2\2\2\4\u0095\3\2\2\2\6")
        buf.write("\u00a8\3\2\2\2\b\u00ab\3\2\2\2\n\u00ef\3\2\2\2\f\u0124")
        buf.write("\3\2\2\2\16\u0138\3\2\2\2\20\u013d\3\2\2\2\22\u0167\3")
        buf.write("\2\2\2\24\u0190\3\2\2\2\26\u01ba\3\2\2\2\30\u01d6\3\2")
        buf.write("\2\2\32\u01f2\3\2\2\2\34\u01f7\3\2\2\2\36\u023f\3\2\2")
        buf.write("\2 \u0244\3\2\2\2\"\u0260\3\2\2\2$\u027c\3\2\2\2&\u02ae")
        buf.write("\3\2\2\2(\u02e0\3\2\2\2*\u02e7\3\2\2\2,\u02ec\3\2\2\2")
        buf.write(".\u0308\3\2\2\2\60\u0332\3\2\2\2\62\u034e\3\2\2\2\64\u0378")
        buf.write("\3\2\2\2\66\u03d7\3\2\2\28\u0403\3\2\2\2:\u0458\3\2\2")
        buf.write("\2<\u045a\3\2\2\2>\u0462\3\2\2\2@\u0464\3\2\2\2B\u046e")
        buf.write("\3\2\2\2D\u0476\3\2\2\2FH\7\3\2\2GF\3\2\2\2HK\3\2\2\2")
        buf.write("IG\3\2\2\2IJ\3\2\2\2JL\3\2\2\2KI\3\2\2\2LP\5\4\3\2MO\7")
        buf.write("(\2\2NM\3\2\2\2OR\3\2\2\2PN\3\2\2\2PQ\3\2\2\2QT\3\2\2")
        buf.write("\2RP\3\2\2\2SU\7*\2\2TS\3\2\2\2TU\3\2\2\2UW\3\2\2\2VX")
        buf.write("\7\3\2\2WV\3\2\2\2XY\3\2\2\2YW\3\2\2\2YZ\3\2\2\2Z\\\3")
        buf.write("\2\2\2[I\3\2\2\2\\_\3\2\2\2][\3\2\2\2]^\3\2\2\2^`\3\2")
        buf.write("\2\2_]\3\2\2\2`d\5$\23\2ac\7(\2\2ba\3\2\2\2cf\3\2\2\2")
        buf.write("db\3\2\2\2de\3\2\2\2eh\3\2\2\2fd\3\2\2\2gi\7*\2\2hg\3")
        buf.write("\2\2\2hi\3\2\2\2i\u0081\3\2\2\2jl\7\3\2\2kj\3\2\2\2lm")
        buf.write("\3\2\2\2mk\3\2\2\2mn\3\2\2\2no\3\2\2\2os\5\4\3\2pr\7(")
        buf.write("\2\2qp\3\2\2\2ru\3\2\2\2sq\3\2\2\2st\3\2\2\2tw\3\2\2\2")
        buf.write("us\3\2\2\2vx\7*\2\2wv\3\2\2\2wx\3\2\2\2x|\3\2\2\2y{\7")
        buf.write("\3\2\2zy\3\2\2\2{~\3\2\2\2|z\3\2\2\2|}\3\2\2\2}\u0080")
        buf.write("\3\2\2\2~|\3\2\2\2\177k\3\2\2\2\u0080\u0083\3\2\2\2\u0081")
        buf.write("\177\3\2\2\2\u0081\u0082\3\2\2\2\u0082\u0084\3\2\2\2\u0083")
        buf.write("\u0081\3\2\2\2\u0084\u0085\7\2\2\3\u0085\3\3\2\2\2\u0086")
        buf.write("\u0096\5\16\b\2\u0087\u0096\5\36\20\2\u0088\u0096\5&\24")
        buf.write("\2\u0089\u0096\5*\26\2\u008a\u0096\5\34\17\2\u008b\u0096")
        buf.write("\5\b\5\2\u008c\u0096\5\n\6\2\u008d\u0096\5\66\34\2\u008e")
        buf.write("\u0096\5(\25\2\u008f\u0091\7(\2\2\u0090\u008f\3\2\2\2")
        buf.write("\u0091\u0094\3\2\2\2\u0092\u0090\3\2\2\2\u0092\u0093\3")
        buf.write("\2\2\2\u0093\u0096\3\2\2\2\u0094\u0092\3\2\2\2\u0095\u0086")
        buf.write("\3\2\2\2\u0095\u0087\3\2\2\2\u0095\u0088\3\2\2\2\u0095")
        buf.write("\u0089\3\2\2\2\u0095\u008a\3\2\2\2\u0095\u008b\3\2\2\2")
        buf.write("\u0095\u008c\3\2\2\2\u0095\u008d\3\2\2\2\u0095\u008e\3")
        buf.write("\2\2\2\u0095\u0092\3\2\2\2\u0096\5\3\2\2\2\u0097\u0099")
        buf.write("\7(\2\2\u0098\u0097\3\2\2\2\u0099\u009c\3\2\2\2\u009a")
        buf.write("\u0098\3\2\2\2\u009a\u009b\3\2\2\2\u009b\u009d\3\2\2\2")
        buf.write("\u009c\u009a\3\2\2\2\u009d\u00a1\5\4\3\2\u009e\u00a0\7")
        buf.write("(\2\2\u009f\u009e\3\2\2\2\u00a0\u00a3\3\2\2\2\u00a1\u009f")
        buf.write("\3\2\2\2\u00a1\u00a2\3\2\2\2\u00a2\u00a4\3\2\2\2\u00a3")
        buf.write("\u00a1\3\2\2\2\u00a4\u00a5\7\3\2\2\u00a5\u00a7\3\2\2\2")
        buf.write("\u00a6\u009a\3\2\2\2\u00a7\u00aa\3\2\2\2\u00a8\u00a6\3")
        buf.write("\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\7\3\2\2\2\u00aa\u00a8")
        buf.write("\3\2\2\2\u00ab\u00ad\7\4\2\2\u00ac\u00ae\7(\2\2\u00ad")
        buf.write("\u00ac\3\2\2\2\u00ae\u00af\3\2\2\2\u00af\u00ad\3\2\2\2")
        buf.write("\u00af\u00b0\3\2\2\2\u00b0\u00b1\3\2\2\2\u00b1\u00b3\7")
        buf.write(";\2\2\u00b2\u00b4\7(\2\2\u00b3\u00b2\3\2\2\2\u00b4\u00b5")
        buf.write("\3\2\2\2\u00b5\u00b3\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6")
        buf.write("\u00b7\3\2\2\2\u00b7\u00b9\7\5\2\2\u00b8\u00ba\7(\2\2")
        buf.write("\u00b9\u00b8\3\2\2\2\u00ba\u00bb\3\2\2\2\u00bb\u00b9\3")
        buf.write("\2\2\2\u00bb\u00bc\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\u00bf")
        buf.write("\58\35\2\u00be\u00c0\7(\2\2\u00bf\u00be\3\2\2\2\u00c0")
        buf.write("\u00c1\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c1\u00c2\3\2\2\2")
        buf.write("\u00c2\u00c3\3\2\2\2\u00c3\u00c5\7\6\2\2\u00c4\u00c6\7")
        buf.write("(\2\2\u00c5\u00c4\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00c5")
        buf.write("\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9")
        buf.write("\u00cb\58\35\2\u00ca\u00cc\7(\2\2\u00cb\u00ca\3\2\2\2")
        buf.write("\u00cc\u00cd\3\2\2\2\u00cd\u00cb\3\2\2\2\u00cd\u00ce\3")
        buf.write("\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d1\7\7\2\2\u00d0\u00d2")
        buf.write("\7(\2\2\u00d1\u00d0\3\2\2\2\u00d2\u00d3\3\2\2\2\u00d3")
        buf.write("\u00d1\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4\u00d5\3\2\2\2")
        buf.write("\u00d5\u00d7\58\35\2\u00d6\u00d8\7(\2\2\u00d7\u00d6\3")
        buf.write("\2\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00d7\3\2\2\2\u00d9\u00da")
        buf.write("\3\2\2\2\u00da\u00db\3\2\2\2\u00db\u00df\7\b\2\2\u00dc")
        buf.write("\u00de\7(\2\2\u00dd\u00dc\3\2\2\2\u00de\u00e1\3\2\2\2")
        buf.write("\u00df\u00dd\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0\u00e2\3")
        buf.write("\2\2\2\u00e1\u00df\3\2\2\2\u00e2\u00e3\7\3\2\2\u00e3\u00e7")
        buf.write("\5\6\4\2\u00e4\u00e6\7(\2\2\u00e5\u00e4\3\2\2\2\u00e6")
        buf.write("\u00e9\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2")
        buf.write("\u00e8\u00ea\3\2\2\2\u00e9\u00e7\3\2\2\2\u00ea\u00eb\7")
        buf.write("\t\2\2\u00eb\t\3\2\2\2\u00ec\u00ee\7(\2\2\u00ed\u00ec")
        buf.write("\3\2\2\2\u00ee\u00f1\3\2\2\2\u00ef\u00ed\3\2\2\2\u00ef")
        buf.write("\u00f0\3\2\2\2\u00f0\u00f2\3\2\2\2\u00f1\u00ef\3\2\2\2")
        buf.write("\u00f2\u00f4\7\n\2\2\u00f3\u00f5\7(\2\2\u00f4\u00f3\3")
        buf.write("\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u00f4\3\2\2\2\u00f6\u00f7")
        buf.write("\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u0108\5\f\7\2\u00f9")
        buf.write("\u00fb\7\13\2\2\u00fa\u00fc\7(\2\2\u00fb\u00fa\3\2\2\2")
        buf.write("\u00fc\u00fd\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd\u00fe\3")
        buf.write("\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u0101\7\n\2\2\u0100\u0102")
        buf.write("\7(\2\2\u0101\u0100\3\2\2\2\u0102\u0103\3\2\2\2\u0103")
        buf.write("\u0101\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0105\3\2\2\2")
        buf.write("\u0105\u0107\5\f\7\2\u0106\u00f9\3\2\2\2\u0107\u010a\3")
        buf.write("\2\2\2\u0108\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u010e")
        buf.write("\3\2\2\2\u010a\u0108\3\2\2\2\u010b\u010d\7(\2\2\u010c")
        buf.write("\u010b\3\2\2\2\u010d\u0110\3\2\2\2\u010e\u010c\3\2\2\2")
        buf.write("\u010e\u010f\3\2\2\2\u010f\u011a\3\2\2\2\u0110\u010e\3")
        buf.write("\2\2\2\u0111\u0113\7\13\2\2\u0112\u0114\7(\2\2\u0113\u0112")
        buf.write("\3\2\2\2\u0114\u0115\3\2\2\2\u0115\u0113\3\2\2\2\u0115")
        buf.write("\u0116\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u0118\7\b\2\2")
        buf.write("\u0118\u0119\7\3\2\2\u0119\u011b\5\6\4\2\u011a\u0111\3")
        buf.write("\2\2\2\u011a\u011b\3\2\2\2\u011b\u011f\3\2\2\2\u011c\u011e")
        buf.write("\7(\2\2\u011d\u011c\3\2\2\2\u011e\u0121\3\2\2\2\u011f")
        buf.write("\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0122\3\2\2\2")
        buf.write("\u0121\u011f\3\2\2\2\u0122\u0123\7\t\2\2\u0123\13\3\2")
        buf.write("\2\2\u0124\u0126\58\35\2\u0125\u0127\7(\2\2\u0126\u0125")
        buf.write("\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u0126\3\2\2\2\u0128")
        buf.write("\u0129\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012b\7\b\2\2")
        buf.write("\u012b\u012f\7\3\2\2\u012c\u012e\7(\2\2\u012d\u012c\3")
        buf.write("\2\2\2\u012e\u0131\3\2\2\2\u012f\u012d\3\2\2\2\u012f\u0130")
        buf.write("\3\2\2\2\u0130\u0132\3\2\2\2\u0131\u012f\3\2\2\2\u0132")
        buf.write("\u0133\5\6\4\2\u0133\r\3\2\2\2\u0134\u0139\5\20\t\2\u0135")
        buf.write("\u0139\5\22\n\2\u0136\u0139\5\24\13\2\u0137\u0139\5\26")
        buf.write("\f\2\u0138\u0134\3\2\2\2\u0138\u0135\3\2\2\2\u0138\u0136")
        buf.write("\3\2\2\2\u0138\u0137\3\2\2\2\u0139\17\3\2\2\2\u013a\u013c")
        buf.write("\7(\2\2\u013b\u013a\3\2\2\2\u013c\u013f\3\2\2\2\u013d")
        buf.write("\u013b\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u0140\3\2\2\2")
        buf.write("\u013f\u013d\3\2\2\2\u0140\u0142\7\f\2\2\u0141\u0143\7")
        buf.write("(\2\2\u0142\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0142")
        buf.write("\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0146\3\2\2\2\u0146")
        buf.write("\u014a\7;\2\2\u0147\u0149\7(\2\2\u0148\u0147\3\2\2\2\u0149")
        buf.write("\u014c\3\2\2\2\u014a\u0148\3\2\2\2\u014a\u014b\3\2\2\2")
        buf.write("\u014b\u014d\3\2\2\2\u014c\u014a\3\2\2\2\u014d\u0151\7")
        buf.write("\r\2\2\u014e\u0150\7(\2\2\u014f\u014e\3\2\2\2\u0150\u0153")
        buf.write("\3\2\2\2\u0151\u014f\3\2\2\2\u0151\u0152\3\2\2\2\u0152")
        buf.write("\u0154\3\2\2\2\u0153\u0151\3\2\2\2\u0154\u0158\58\35\2")
        buf.write("\u0155\u0157\7(\2\2\u0156\u0155\3\2\2\2\u0157\u015a\3")
        buf.write("\2\2\2\u0158\u0156\3\2\2\2\u0158\u0159\3\2\2\2\u0159\u015b")
        buf.write("\3\2\2\2\u015a\u0158\3\2\2\2\u015b\u015f\7\16\2\2\u015c")
        buf.write("\u015e\7(\2\2\u015d\u015c\3\2\2\2\u015e\u0161\3\2\2\2")
        buf.write("\u015f\u015d\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0162\3")
        buf.write("\2\2\2\u0161\u015f\3\2\2\2\u0162\u0163\58\35\2\u0163\21")
        buf.write("\3\2\2\2\u0164\u0166\7(\2\2\u0165\u0164\3\2\2\2\u0166")
        buf.write("\u0169\3\2\2\2\u0167\u0165\3\2\2\2\u0167\u0168\3\2\2\2")
        buf.write("\u0168\u016a\3\2\2\2\u0169\u0167\3\2\2\2\u016a\u016c\7")
        buf.write("\17\2\2\u016b\u016d\7(\2\2\u016c\u016b\3\2\2\2\u016d\u016e")
        buf.write("\3\2\2\2\u016e\u016c\3\2\2\2\u016e\u016f\3\2\2\2\u016f")
        buf.write("\u0170\3\2\2\2\u0170\u0174\7;\2\2\u0171\u0173\7(\2\2\u0172")
        buf.write("\u0171\3\2\2\2\u0173\u0176\3\2\2\2\u0174\u0172\3\2\2\2")
        buf.write("\u0174\u0175\3\2\2\2\u0175\u0177\3\2\2\2\u0176\u0174\3")
        buf.write("\2\2\2\u0177\u017b\7\r\2\2\u0178\u017a\7(\2\2\u0179\u0178")
        buf.write("\3\2\2\2\u017a\u017d\3\2\2\2\u017b\u0179\3\2\2\2\u017b")
        buf.write("\u017c\3\2\2\2\u017c\u017e\3\2\2\2\u017d\u017b\3\2\2\2")
        buf.write("\u017e\u0182\7;\2\2\u017f\u0181\7(\2\2\u0180\u017f\3\2")
        buf.write("\2\2\u0181\u0184\3\2\2\2\u0182\u0180\3\2\2\2\u0182\u0183")
        buf.write("\3\2\2\2\u0183\u0185\3\2\2\2\u0184\u0182\3\2\2\2\u0185")
        buf.write("\u0187\7\16\2\2\u0186\u0188\7(\2\2\u0187\u0186\3\2\2\2")
        buf.write("\u0188\u0189\3\2\2\2\u0189\u0187\3\2\2\2\u0189\u018a\3")
        buf.write("\2\2\2\u018a\u018b\3\2\2\2\u018b\u018c\7;\2\2\u018c\23")
        buf.write("\3\2\2\2\u018d\u018f\7(\2\2\u018e\u018d\3\2\2\2\u018f")
        buf.write("\u0192\3\2\2\2\u0190\u018e\3\2\2\2\u0190\u0191\3\2\2\2")
        buf.write("\u0191\u0193\3\2\2\2\u0192\u0190\3\2\2\2\u0193\u0195\7")
        buf.write("\20\2\2\u0194\u0196\7(\2\2\u0195\u0194\3\2\2\2\u0196\u0197")
        buf.write("\3\2\2\2\u0197\u0195\3\2\2\2\u0197\u0198\3\2\2\2\u0198")
        buf.write("\u0199\3\2\2\2\u0199\u019d\7;\2\2\u019a\u019c\7(\2\2\u019b")
        buf.write("\u019a\3\2\2\2\u019c\u019f\3\2\2\2\u019d\u019b\3\2\2\2")
        buf.write("\u019d\u019e\3\2\2\2\u019e\u01a0\3\2\2\2\u019f\u019d\3")
        buf.write("\2\2\2\u01a0\u01a4\7\r\2\2\u01a1\u01a3\7(\2\2\u01a2\u01a1")
        buf.write("\3\2\2\2\u01a3\u01a6\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a4")
        buf.write("\u01a5\3\2\2\2\u01a5\u01a7\3\2\2\2\u01a6\u01a4\3\2\2\2")
        buf.write("\u01a7\u01ab\7;\2\2\u01a8\u01aa\7(\2\2\u01a9\u01a8\3\2")
        buf.write("\2\2\u01aa\u01ad\3\2\2\2\u01ab\u01a9\3\2\2\2\u01ab\u01ac")
        buf.write("\3\2\2\2\u01ac\u01ae\3\2\2\2\u01ad\u01ab\3\2\2\2\u01ae")
        buf.write("\u01b2\7\16\2\2\u01af\u01b1\7(\2\2\u01b0\u01af\3\2\2\2")
        buf.write("\u01b1\u01b4\3\2\2\2\u01b2\u01b0\3\2\2\2\u01b2\u01b3\3")
        buf.write("\2\2\2\u01b3\u01b5\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b5\u01b6")
        buf.write("\58\35\2\u01b6\25\3\2\2\2\u01b7\u01b9\7(\2\2\u01b8\u01b7")
        buf.write("\3\2\2\2\u01b9\u01bc\3\2\2\2\u01ba\u01b8\3\2\2\2\u01ba")
        buf.write("\u01bb\3\2\2\2\u01bb\u01bd\3\2\2\2\u01bc\u01ba\3\2\2\2")
        buf.write("\u01bd\u01bf\7\21\2\2\u01be\u01c0\7(\2\2\u01bf\u01be\3")
        buf.write("\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2")
        buf.write("\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c7\7;\2\2\u01c4")
        buf.write("\u01c6\7(\2\2\u01c5\u01c4\3\2\2\2\u01c6\u01c9\3\2\2\2")
        buf.write("\u01c7\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01ca\3")
        buf.write("\2\2\2\u01c9\u01c7\3\2\2\2\u01ca\u01ce\7\r\2\2\u01cb\u01cd")
        buf.write("\7(\2\2\u01cc\u01cb\3\2\2\2\u01cd\u01d0\3\2\2\2\u01ce")
        buf.write("\u01cc\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u01d1\3\2\2\2")
        buf.write("\u01d0\u01ce\3\2\2\2\u01d1\u01d2\7;\2\2\u01d2\27\3\2\2")
        buf.write("\2\u01d3\u01d5\7(\2\2\u01d4\u01d3\3\2\2\2\u01d5\u01d8")
        buf.write("\3\2\2\2\u01d6\u01d4\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7")
        buf.write("\u01d9\3\2\2\2\u01d8\u01d6\3\2\2\2\u01d9\u01dd\7;\2\2")
        buf.write("\u01da\u01dc\7(\2\2\u01db\u01da\3\2\2\2\u01dc\u01df\3")
        buf.write("\2\2\2\u01dd\u01db\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01e0")
        buf.write("\3\2\2\2\u01df\u01dd\3\2\2\2\u01e0\u01e4\7\22\2\2\u01e1")
        buf.write("\u01e3\7(\2\2\u01e2\u01e1\3\2\2\2\u01e3\u01e6\3\2\2\2")
        buf.write("\u01e4\u01e2\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e7\3")
        buf.write("\2\2\2\u01e6\u01e4\3\2\2\2\u01e7\u01eb\58\35\2\u01e8\u01ea")
        buf.write("\7(\2\2\u01e9\u01e8\3\2\2\2\u01ea\u01ed\3\2\2\2\u01eb")
        buf.write("\u01e9\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ee\3\2\2\2")
        buf.write("\u01ed\u01eb\3\2\2\2\u01ee\u01ef\7\23\2\2\u01ef\31\3\2")
        buf.write("\2\2\u01f0\u01f3\7;\2\2\u01f1\u01f3\5\30\r\2\u01f2\u01f0")
        buf.write("\3\2\2\2\u01f2\u01f1\3\2\2\2\u01f3\33\3\2\2\2\u01f4\u01f6")
        buf.write("\7(\2\2\u01f5\u01f4\3\2\2\2\u01f6\u01f9\3\2\2\2\u01f7")
        buf.write("\u01f5\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01fa\3\2\2\2")
        buf.write("\u01f9\u01f7\3\2\2\2\u01fa\u01fe\7\24\2\2\u01fb\u01fd")
        buf.write("\7(\2\2\u01fc\u01fb\3\2\2\2\u01fd\u0200\3\2\2\2\u01fe")
        buf.write("\u01fc\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0201\3\2\2\2")
        buf.write("\u0200\u01fe\3\2\2\2\u0201\u0205\7\63\2\2\u0202\u0204")
        buf.write("\7(\2\2\u0203\u0202\3\2\2\2\u0204\u0207\3\2\2\2\u0205")
        buf.write("\u0203\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0208\3\2\2\2")
        buf.write("\u0207\u0205\3\2\2\2\u0208\u020c\7\67\2\2\u0209\u020b")
        buf.write("\7(\2\2\u020a\u0209\3\2\2\2\u020b\u020e\3\2\2\2\u020c")
        buf.write("\u020a\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u020f\3\2\2\2")
        buf.write("\u020e\u020c\3\2\2\2\u020f\u0211\7\62\2\2\u0210\u0212")
        buf.write("\7(\2\2\u0211\u0210\3\2\2\2\u0212\u0213\3\2\2\2\u0213")
        buf.write("\u0211\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215\3\2\2\2")
        buf.write("\u0215\u0219\7;\2\2\u0216\u0218\7(\2\2\u0217\u0216\3\2")
        buf.write("\2\2\u0218\u021b\3\2\2\2\u0219\u0217\3\2\2\2\u0219\u021a")
        buf.write("\3\2\2\2\u021a\u021c\3\2\2\2\u021b\u0219\3\2\2\2\u021c")
        buf.write("\u0220\7\r\2\2\u021d\u021f\7(\2\2\u021e\u021d\3\2\2\2")
        buf.write("\u021f\u0222\3\2\2\2\u0220\u021e\3\2\2\2\u0220\u0221\3")
        buf.write("\2\2\2\u0221\u0223\3\2\2\2\u0222\u0220\3\2\2\2\u0223\u0227")
        buf.write("\7;\2\2\u0224\u0226\7(\2\2\u0225\u0224\3\2\2\2\u0226\u0229")
        buf.write("\3\2\2\2\u0227\u0225\3\2\2\2\u0227\u0228\3\2\2\2\u0228")
        buf.write("\u023a\3\2\2\2\u0229\u0227\3\2\2\2\u022a\u022e\7\16\2")
        buf.write("\2\u022b\u022d\7(\2\2\u022c\u022b\3\2\2\2\u022d\u0230")
        buf.write("\3\2\2\2\u022e\u022c\3\2\2\2\u022e\u022f\3\2\2\2\u022f")
        buf.write("\u0231\3\2\2\2\u0230\u022e\3\2\2\2\u0231\u0235\7;\2\2")
        buf.write("\u0232\u0234\7(\2\2\u0233\u0232\3\2\2\2\u0234\u0237\3")
        buf.write("\2\2\2\u0235\u0233\3\2\2\2\u0235\u0236\3\2\2\2\u0236\u0239")
        buf.write("\3\2\2\2\u0237\u0235\3\2\2\2\u0238\u022a\3\2\2\2\u0239")
        buf.write("\u023c\3\2\2\2\u023a\u0238\3\2\2\2\u023a\u023b\3\2\2\2")
        buf.write("\u023b\35\3\2\2\2\u023c\u023a\3\2\2\2\u023d\u0240\5 \21")
        buf.write("\2\u023e\u0240\5\"\22\2\u023f\u023d\3\2\2\2\u023f\u023e")
        buf.write("\3\2\2\2\u0240\37\3\2\2\2\u0241\u0243\7(\2\2\u0242\u0241")
        buf.write("\3\2\2\2\u0243\u0246\3\2\2\2\u0244\u0242\3\2\2\2\u0244")
        buf.write("\u0245\3\2\2\2\u0245\u0247\3\2\2\2\u0246\u0244\3\2\2\2")
        buf.write("\u0247\u0249\7\25\2\2\u0248\u024a\7(\2\2\u0249\u0248\3")
        buf.write("\2\2\2\u024a\u024b\3\2\2\2\u024b\u0249\3\2\2\2\u024b\u024c")
        buf.write("\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u0251\7;\2\2\u024e")
        buf.write("\u0250\7(\2\2\u024f\u024e\3\2\2\2\u0250\u0253\3\2\2\2")
        buf.write("\u0251\u024f\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0254\3")
        buf.write("\2\2\2\u0253\u0251\3\2\2\2\u0254\u0258\7\r\2\2\u0255\u0257")
        buf.write("\7(\2\2\u0256\u0255\3\2\2\2\u0257\u025a\3\2\2\2\u0258")
        buf.write("\u0256\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u025b\3\2\2\2")
        buf.write("\u025a\u0258\3\2\2\2\u025b\u025c\58\35\2\u025c!\3\2\2")
        buf.write("\2\u025d\u025f\7(\2\2\u025e\u025d\3\2\2\2\u025f\u0262")
        buf.write("\3\2\2\2\u0260\u025e\3\2\2\2\u0260\u0261\3\2\2\2\u0261")
        buf.write("\u0263\3\2\2\2\u0262\u0260\3\2\2\2\u0263\u0265\7\26\2")
        buf.write("\2\u0264\u0266\7(\2\2\u0265\u0264\3\2\2\2\u0266\u0267")
        buf.write("\3\2\2\2\u0267\u0265\3\2\2\2\u0267\u0268\3\2\2\2\u0268")
        buf.write("\u0269\3\2\2\2\u0269\u026d\7;\2\2\u026a\u026c\7(\2\2\u026b")
        buf.write("\u026a\3\2\2\2\u026c\u026f\3\2\2\2\u026d\u026b\3\2\2\2")
        buf.write("\u026d\u026e\3\2\2\2\u026e\u0270\3\2\2\2\u026f\u026d\3")
        buf.write("\2\2\2\u0270\u0274\7\r\2\2\u0271\u0273\7(\2\2\u0272\u0271")
        buf.write("\3\2\2\2\u0273\u0276\3\2\2\2\u0274\u0272\3\2\2\2\u0274")
        buf.write("\u0275\3\2\2\2\u0275\u0277\3\2\2\2\u0276\u0274\3\2\2\2")
        buf.write("\u0277\u0278\58\35\2\u0278#\3\2\2\2\u0279\u027b\7(\2\2")
        buf.write("\u027a\u0279\3\2\2\2\u027b\u027e\3\2\2\2\u027c\u027a\3")
        buf.write("\2\2\2\u027c\u027d\3\2\2\2\u027d\u027f\3\2\2\2\u027e\u027c")
        buf.write("\3\2\2\2\u027f\u0283\7\27\2\2\u0280\u0282\7(\2\2\u0281")
        buf.write("\u0280\3\2\2\2\u0282\u0285\3\2\2\2\u0283\u0281\3\2\2\2")
        buf.write("\u0283\u0284\3\2\2\2\u0284\u0286\3\2\2\2\u0285\u0283\3")
        buf.write("\2\2\2\u0286\u028a\7\r\2\2\u0287\u0289\7(\2\2\u0288\u0287")
        buf.write("\3\2\2\2\u0289\u028c\3\2\2\2\u028a\u0288\3\2\2\2\u028a")
        buf.write("\u028b\3\2\2\2\u028b\u028d\3\2\2\2\u028c\u028a\3\2\2\2")
        buf.write("\u028d\u0291\58\35\2\u028e\u0290\7(\2\2\u028f\u028e\3")
        buf.write("\2\2\2\u0290\u0293\3\2\2\2\u0291\u028f\3\2\2\2\u0291\u0292")
        buf.write("\3\2\2\2\u0292\u0294\3\2\2\2\u0293\u0291\3\2\2\2\u0294")
        buf.write("\u0298\7\16\2\2\u0295\u0297\7(\2\2\u0296\u0295\3\2\2\2")
        buf.write("\u0297\u029a\3\2\2\2\u0298\u0296\3\2\2\2\u0298\u0299\3")
        buf.write("\2\2\2\u0299\u029b\3\2\2\2\u029a\u0298\3\2\2\2\u029b\u029f")
        buf.write("\58\35\2\u029c\u029e\7(\2\2\u029d\u029c\3\2\2\2\u029e")
        buf.write("\u02a1\3\2\2\2\u029f\u029d\3\2\2\2\u029f\u02a0\3\2\2\2")
        buf.write("\u02a0\u02a2\3\2\2\2\u02a1\u029f\3\2\2\2\u02a2\u02a6\7")
        buf.write("\16\2\2\u02a3\u02a5\7(\2\2\u02a4\u02a3\3\2\2\2\u02a5\u02a8")
        buf.write("\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7")
        buf.write("\u02a9\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a9\u02aa\78\2\2")
        buf.write("\u02aa%\3\2\2\2\u02ab\u02ad\7(\2\2\u02ac\u02ab\3\2\2\2")
        buf.write("\u02ad\u02b0\3\2\2\2\u02ae\u02ac\3\2\2\2\u02ae\u02af\3")
        buf.write("\2\2\2\u02af\u02b1\3\2\2\2\u02b0\u02ae\3\2\2\2\u02b1\u02b3")
        buf.write("\7\30\2\2\u02b2\u02b4\7(\2\2\u02b3\u02b2\3\2\2\2\u02b4")
        buf.write("\u02b5\3\2\2\2\u02b5\u02b3\3\2\2\2\u02b5\u02b6\3\2\2\2")
        buf.write("\u02b6\u02b7\3\2\2\2\u02b7\u02b8\5\32\16\2\u02b8\'\3\2")
        buf.write("\2\2\u02b9\u02bb\7(\2\2\u02ba\u02b9\3\2\2\2\u02bb\u02be")
        buf.write("\3\2\2\2\u02bc\u02ba\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd")
        buf.write("\u02bf\3\2\2\2\u02be\u02bc\3\2\2\2\u02bf\u02c1\7\31\2")
        buf.write("\2\u02c0\u02c2\7(\2\2\u02c1\u02c0\3\2\2\2\u02c2\u02c3")
        buf.write("\3\2\2\2\u02c3\u02c1\3\2\2\2\u02c3\u02c4\3\2\2\2\u02c4")
        buf.write("\u02c5\3\2\2\2\u02c5\u02e1\5\32\16\2\u02c6\u02c8\7(\2")
        buf.write("\2\u02c7\u02c6\3\2\2\2\u02c8\u02cb\3\2\2\2\u02c9\u02c7")
        buf.write("\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02cc\3\2\2\2\u02cb")
        buf.write("\u02c9\3\2\2\2\u02cc\u02ce\7\31\2\2\u02cd\u02cf\7(\2\2")
        buf.write("\u02ce\u02cd\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02ce\3")
        buf.write("\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02e1")
        buf.write("\58\35\2\u02d3\u02d5\7(\2\2\u02d4\u02d3\3\2\2\2\u02d5")
        buf.write("\u02d8\3\2\2\2\u02d6\u02d4\3\2\2\2\u02d6\u02d7\3\2\2\2")
        buf.write("\u02d7\u02d9\3\2\2\2\u02d8\u02d6\3\2\2\2\u02d9\u02db\7")
        buf.write("\31\2\2\u02da\u02dc\7(\2\2\u02db\u02da\3\2\2\2\u02dc\u02dd")
        buf.write("\3\2\2\2\u02dd\u02db\3\2\2\2\u02dd\u02de\3\2\2\2\u02de")
        buf.write("\u02df\3\2\2\2\u02df\u02e1\7\66\2\2\u02e0\u02bc\3\2\2")
        buf.write("\2\u02e0\u02c9\3\2\2\2\u02e0\u02d6\3\2\2\2\u02e1)\3\2")
        buf.write("\2\2\u02e2\u02e8\5,\27\2\u02e3\u02e8\5.\30\2\u02e4\u02e8")
        buf.write("\5\60\31\2\u02e5\u02e8\5\62\32\2\u02e6\u02e8\5\64\33\2")
        buf.write("\u02e7\u02e2\3\2\2\2\u02e7\u02e3\3\2\2\2\u02e7\u02e4\3")
        buf.write("\2\2\2\u02e7\u02e5\3\2\2\2\u02e7\u02e6\3\2\2\2\u02e8+")
        buf.write("\3\2\2\2\u02e9\u02eb\7(\2\2\u02ea\u02e9\3\2\2\2\u02eb")
        buf.write("\u02ee\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ec\u02ed\3\2\2\2")
        buf.write("\u02ed\u02ef\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ef\u02f1\7")
        buf.write("\32\2\2\u02f0\u02f2\7(\2\2\u02f1\u02f0\3\2\2\2\u02f2\u02f3")
        buf.write("\3\2\2\2\u02f3\u02f1\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4")
        buf.write("\u02f5\3\2\2\2\u02f5\u02f9\5\32\16\2\u02f6\u02f8\7(\2")
        buf.write("\2\u02f7\u02f6\3\2\2\2\u02f8\u02fb\3\2\2\2\u02f9\u02f7")
        buf.write("\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fc\3\2\2\2\u02fb")
        buf.write("\u02f9\3\2\2\2\u02fc\u0300\7\r\2\2\u02fd\u02ff\7(\2\2")
        buf.write("\u02fe\u02fd\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u02fe\3")
        buf.write("\2\2\2\u0300\u0301\3\2\2\2\u0301\u0303\3\2\2\2\u0302\u0300")
        buf.write("\3\2\2\2\u0303\u0304\78\2\2\u0304-\3\2\2\2\u0305\u0307")
        buf.write("\7(\2\2\u0306\u0305\3\2\2\2\u0307\u030a\3\2\2\2\u0308")
        buf.write("\u0306\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u030b\3\2\2\2")
        buf.write("\u030a\u0308\3\2\2\2\u030b\u030d\7\33\2\2\u030c\u030e")
        buf.write("\7(\2\2\u030d\u030c\3\2\2\2\u030e\u030f\3\2\2\2\u030f")
        buf.write("\u030d\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0311\3\2\2\2")
        buf.write("\u0311\u0315\5\32\16\2\u0312\u0314\7(\2\2\u0313\u0312")
        buf.write("\3\2\2\2\u0314\u0317\3\2\2\2\u0315\u0313\3\2\2\2\u0315")
        buf.write("\u0316\3\2\2\2\u0316\u0318\3\2\2\2\u0317\u0315\3\2\2\2")
        buf.write("\u0318\u031c\7\r\2\2\u0319\u031b\7(\2\2\u031a\u0319\3")
        buf.write("\2\2\2\u031b\u031e\3\2\2\2\u031c\u031a\3\2\2\2\u031c\u031d")
        buf.write("\3\2\2\2\u031d\u031f\3\2\2\2\u031e\u031c\3\2\2\2\u031f")
        buf.write("\u0323\58\35\2\u0320\u0322\7(\2\2\u0321\u0320\3\2\2\2")
        buf.write("\u0322\u0325\3\2\2\2\u0323\u0321\3\2\2\2\u0323\u0324\3")
        buf.write("\2\2\2\u0324\u0326\3\2\2\2\u0325\u0323\3\2\2\2\u0326\u032a")
        buf.write("\7\16\2\2\u0327\u0329\7(\2\2\u0328\u0327\3\2\2\2\u0329")
        buf.write("\u032c\3\2\2\2\u032a\u0328\3\2\2\2\u032a\u032b\3\2\2\2")
        buf.write("\u032b\u032d\3\2\2\2\u032c\u032a\3\2\2\2\u032d\u032e\5")
        buf.write("8\35\2\u032e/\3\2\2\2\u032f\u0331\7(\2\2\u0330\u032f\3")
        buf.write("\2\2\2\u0331\u0334\3\2\2\2\u0332\u0330\3\2\2\2\u0332\u0333")
        buf.write("\3\2\2\2\u0333\u0335\3\2\2\2\u0334\u0332\3\2\2\2\u0335")
        buf.write("\u0337\7\34\2\2\u0336\u0338\7(\2\2\u0337\u0336\3\2\2\2")
        buf.write("\u0338\u0339\3\2\2\2\u0339\u0337\3\2\2\2\u0339\u033a\3")
        buf.write("\2\2\2\u033a\u033b\3\2\2\2\u033b\u033f\5\32\16\2\u033c")
        buf.write("\u033e\7(\2\2\u033d\u033c\3\2\2\2\u033e\u0341\3\2\2\2")
        buf.write("\u033f\u033d\3\2\2\2\u033f\u0340\3\2\2\2\u0340\u0342\3")
        buf.write("\2\2\2\u0341\u033f\3\2\2\2\u0342\u0346\7\r\2\2\u0343\u0345")
        buf.write("\7(\2\2\u0344\u0343\3\2\2\2\u0345\u0348\3\2\2\2\u0346")
        buf.write("\u0344\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u0349\3\2\2\2")
        buf.write("\u0348\u0346\3\2\2\2\u0349\u034a\5\32\16\2\u034a\61\3")
        buf.write("\2\2\2\u034b\u034d\7(\2\2\u034c\u034b\3\2\2\2\u034d\u0350")
        buf.write("\3\2\2\2\u034e\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f")
        buf.write("\u0351\3\2\2\2\u0350\u034e\3\2\2\2\u0351\u0353\7\35\2")
        buf.write("\2\u0352\u0354\7(\2\2\u0353\u0352\3\2\2\2\u0354\u0355")
        buf.write("\3\2\2\2\u0355\u0353\3\2\2\2\u0355\u0356\3\2\2\2\u0356")
        buf.write("\u0357\3\2\2\2\u0357\u035b\5\32\16\2\u0358\u035a\7(\2")
        buf.write("\2\u0359\u0358\3\2\2\2\u035a\u035d\3\2\2\2\u035b\u0359")
        buf.write("\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035e\3\2\2\2\u035d")
        buf.write("\u035b\3\2\2\2\u035e\u0362\7\r\2\2\u035f\u0361\7(\2\2")
        buf.write("\u0360\u035f\3\2\2\2\u0361\u0364\3\2\2\2\u0362\u0360\3")
        buf.write("\2\2\2\u0362\u0363\3\2\2\2\u0363\u0365\3\2\2\2\u0364\u0362")
        buf.write("\3\2\2\2\u0365\u0369\58\35\2\u0366\u0368\7(\2\2\u0367")
        buf.write("\u0366\3\2\2\2\u0368\u036b\3\2\2\2\u0369\u0367\3\2\2\2")
        buf.write("\u0369\u036a\3\2\2\2\u036a\u036c\3\2\2\2\u036b\u0369\3")
        buf.write("\2\2\2\u036c\u0370\7\16\2\2\u036d\u036f\7(\2\2\u036e\u036d")
        buf.write("\3\2\2\2\u036f\u0372\3\2\2\2\u0370\u036e\3\2\2\2\u0370")
        buf.write("\u0371\3\2\2\2\u0371\u0373\3\2\2\2\u0372\u0370\3\2\2\2")
        buf.write("\u0373\u0374\5\32\16\2\u0374\63\3\2\2\2\u0375\u0377\7")
        buf.write("(\2\2\u0376\u0375\3\2\2\2\u0377\u037a\3\2\2\2\u0378\u0376")
        buf.write("\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037b\3\2\2\2\u037a")
        buf.write("\u0378\3\2\2\2\u037b\u037d\7\36\2\2\u037c\u037e\7(\2\2")
        buf.write("\u037d\u037c\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u037d\3")
        buf.write("\2\2\2\u037f\u0380\3\2\2\2\u0380\u0381\3\2\2\2\u0381\u0385")
        buf.write("\5\32\16\2\u0382\u0384\7(\2\2\u0383\u0382\3\2\2\2\u0384")
        buf.write("\u0387\3\2\2\2\u0385\u0383\3\2\2\2\u0385\u0386\3\2\2\2")
        buf.write("\u0386\u0388\3\2\2\2\u0387\u0385\3\2\2\2\u0388\u038c\7")
        buf.write("\r\2\2\u0389\u038b\7(\2\2\u038a\u0389\3\2\2\2\u038b\u038e")
        buf.write("\3\2\2\2\u038c\u038a\3\2\2\2\u038c\u038d\3\2\2\2\u038d")
        buf.write("\u038f\3\2\2\2\u038e\u038c\3\2\2\2\u038f\u0393\58\35\2")
        buf.write("\u0390\u0392\7(\2\2\u0391\u0390\3\2\2\2\u0392\u0395\3")
        buf.write("\2\2\2\u0393\u0391\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0396")
        buf.write("\3\2\2\2\u0395\u0393\3\2\2\2\u0396\u039a\7\16\2\2\u0397")
        buf.write("\u0399\7(\2\2\u0398\u0397\3\2\2\2\u0399\u039c\3\2\2\2")
        buf.write("\u039a\u0398\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039d\3")
        buf.write("\2\2\2\u039c\u039a\3\2\2\2\u039d\u039e\5\32\16\2\u039e")
        buf.write("\65\3\2\2\2\u039f\u03a1\7(\2\2\u03a0\u039f\3\2\2\2\u03a1")
        buf.write("\u03a4\3\2\2\2\u03a2\u03a0\3\2\2\2\u03a2\u03a3\3\2\2\2")
        buf.write("\u03a3\u03a5\3\2\2\2\u03a4\u03a2\3\2\2\2\u03a5\u03a7\7")
        buf.write("\37\2\2\u03a6\u03a8\7(\2\2\u03a7\u03a6\3\2\2\2\u03a8\u03a9")
        buf.write("\3\2\2\2\u03a9\u03a7\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa")
        buf.write("\u03ab\3\2\2\2\u03ab\u03af\5\32\16\2\u03ac\u03ae\7(\2")
        buf.write("\2\u03ad\u03ac\3\2\2\2\u03ae\u03b1\3\2\2\2\u03af\u03ad")
        buf.write("\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b2\3\2\2\2\u03b1")
        buf.write("\u03af\3\2\2\2\u03b2\u03b6\7\r\2\2\u03b3\u03b5\7(\2\2")
        buf.write("\u03b4\u03b3\3\2\2\2\u03b5\u03b8\3\2\2\2\u03b6\u03b4\3")
        buf.write("\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u03b9\3\2\2\2\u03b8\u03b6")
        buf.write("\3\2\2\2\u03b9\u03ba\5\32\16\2\u03ba\u03d8\3\2\2\2\u03bb")
        buf.write("\u03bd\7(\2\2\u03bc\u03bb\3\2\2\2\u03bd\u03c0\3\2\2\2")
        buf.write("\u03be\u03bc\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03c1\3")
        buf.write("\2\2\2\u03c0\u03be\3\2\2\2\u03c1\u03c3\7\37\2\2\u03c2")
        buf.write("\u03c4\7(\2\2\u03c3\u03c2\3\2\2\2\u03c4\u03c5\3\2\2\2")
        buf.write("\u03c5\u03c3\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03c7\3")
        buf.write("\2\2\2\u03c7\u03cb\5\32\16\2\u03c8\u03ca\7(\2\2\u03c9")
        buf.write("\u03c8\3\2\2\2\u03ca\u03cd\3\2\2\2\u03cb\u03c9\3\2\2\2")
        buf.write("\u03cb\u03cc\3\2\2\2\u03cc\u03ce\3\2\2\2\u03cd\u03cb\3")
        buf.write("\2\2\2\u03ce\u03d2\7\r\2\2\u03cf\u03d1\7(\2\2\u03d0\u03cf")
        buf.write("\3\2\2\2\u03d1\u03d4\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d2")
        buf.write("\u03d3\3\2\2\2\u03d3\u03d5\3\2\2\2\u03d4\u03d2\3\2\2\2")
        buf.write("\u03d5\u03d6\58\35\2\u03d6\u03d8\3\2\2\2\u03d7\u03a2\3")
        buf.write("\2\2\2\u03d7\u03be\3\2\2\2\u03d8\67\3\2\2\2\u03d9\u03da")
        buf.write("\b\35\1\2\u03da\u03de\7 \2\2\u03db\u03dd\7(\2\2\u03dc")
        buf.write("\u03db\3\2\2\2\u03dd\u03e0\3\2\2\2\u03de\u03dc\3\2\2\2")
        buf.write("\u03de\u03df\3\2\2\2\u03df\u03e1\3\2\2\2\u03e0\u03de\3")
        buf.write("\2\2\2\u03e1\u03e5\58\35\2\u03e2\u03e4\7(\2\2\u03e3\u03e2")
        buf.write("\3\2\2\2\u03e4\u03e7\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e5")
        buf.write("\u03e6\3\2\2\2\u03e6\u03e8\3\2\2\2\u03e7\u03e5\3\2\2\2")
        buf.write("\u03e8\u03e9\7!\2\2\u03e9\u0404\3\2\2\2\u03ea\u03ee\t")
        buf.write("\2\2\2\u03eb\u03ed\7(\2\2\u03ec\u03eb\3\2\2\2\u03ed\u03f0")
        buf.write("\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef")
        buf.write("\u03f1\3\2\2\2\u03f0\u03ee\3\2\2\2\u03f1\u0404\58\35\13")
        buf.write("\u03f2\u03f6\7,\2\2\u03f3\u03f5\7(\2\2\u03f4\u03f3\3\2")
        buf.write("\2\2\u03f5\u03f8\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f6\u03f7")
        buf.write("\3\2\2\2\u03f7\u03f9\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f9")
        buf.write("\u0404\58\35\n\u03fa\u03fe\7\60\2\2\u03fb\u03fd\7(\2\2")
        buf.write("\u03fc\u03fb\3\2\2\2\u03fd\u0400\3\2\2\2\u03fe\u03fc\3")
        buf.write("\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0401\3\2\2\2\u0400\u03fe")
        buf.write("\3\2\2\2\u0401\u0404\58\35\6\u0402\u0404\5:\36\2\u0403")
        buf.write("\u03d9\3\2\2\2\u0403\u03ea\3\2\2\2\u0403\u03f2\3\2\2\2")
        buf.write("\u0403\u03fa\3\2\2\2\u0403\u0402\3\2\2\2\u0404\u0452\3")
        buf.write("\2\2\2\u0405\u0409\f\t\2\2\u0406\u0408\7(\2\2\u0407\u0406")
        buf.write("\3\2\2\2\u0408\u040b\3\2\2\2\u0409\u0407\3\2\2\2\u0409")
        buf.write("\u040a\3\2\2\2\u040a\u040c\3\2\2\2\u040b\u0409\3\2\2\2")
        buf.write("\u040c\u0410\t\3\2\2\u040d\u040f\7(\2\2\u040e\u040d\3")
        buf.write("\2\2\2\u040f\u0412\3\2\2\2\u0410\u040e\3\2\2\2\u0410\u0411")
        buf.write("\3\2\2\2\u0411\u0413\3\2\2\2\u0412\u0410\3\2\2\2\u0413")
        buf.write("\u0451\58\35\n\u0414\u0418\f\b\2\2\u0415\u0417\7(\2\2")
        buf.write("\u0416\u0415\3\2\2\2\u0417\u041a\3\2\2\2\u0418\u0416\3")
        buf.write("\2\2\2\u0418\u0419\3\2\2\2\u0419\u041b\3\2\2\2\u041a\u0418")
        buf.write("\3\2\2\2\u041b\u041f\t\4\2\2\u041c\u041e\7(\2\2\u041d")
        buf.write("\u041c\3\2\2\2\u041e\u0421\3\2\2\2\u041f\u041d\3\2\2\2")
        buf.write("\u041f\u0420\3\2\2\2\u0420\u0422\3\2\2\2\u0421\u041f\3")
        buf.write("\2\2\2\u0422\u0451\58\35\t\u0423\u0427\f\7\2\2\u0424\u0426")
        buf.write("\7(\2\2\u0425\u0424\3\2\2\2\u0426\u0429\3\2\2\2\u0427")
        buf.write("\u0425\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u042a\3\2\2\2")
        buf.write("\u0429\u0427\3\2\2\2\u042a\u042e\t\5\2\2\u042b\u042d\7")
        buf.write("(\2\2\u042c\u042b\3\2\2\2\u042d\u0430\3\2\2\2\u042e\u042c")
        buf.write("\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0431\3\2\2\2\u0430")
        buf.write("\u042e\3\2\2\2\u0431\u0451\58\35\b\u0432\u0436\f\5\2\2")
        buf.write("\u0433\u0435\7(\2\2\u0434\u0433\3\2\2\2\u0435\u0438\3")
        buf.write("\2\2\2\u0436\u0434\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u0439")
        buf.write("\3\2\2\2\u0438\u0436\3\2\2\2\u0439\u043d\7&\2\2\u043a")
        buf.write("\u043c\7(\2\2\u043b\u043a\3\2\2\2\u043c\u043f\3\2\2\2")
        buf.write("\u043d\u043b\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u0440\3")
        buf.write("\2\2\2\u043f\u043d\3\2\2\2\u0440\u0451\58\35\6\u0441\u0445")
        buf.write("\f\4\2\2\u0442\u0444\7(\2\2\u0443\u0442\3\2\2\2\u0444")
        buf.write("\u0447\3\2\2\2\u0445\u0443\3\2\2\2\u0445\u0446\3\2\2\2")
        buf.write("\u0446\u0448\3\2\2\2\u0447\u0445\3\2\2\2\u0448\u044c\7")
        buf.write("\'\2\2\u0449\u044b\7(\2\2\u044a\u0449\3\2\2\2\u044b\u044e")
        buf.write("\3\2\2\2\u044c\u044a\3\2\2\2\u044c\u044d\3\2\2\2\u044d")
        buf.write("\u044f\3\2\2\2\u044e\u044c\3\2\2\2\u044f\u0451\58\35\5")
        buf.write("\u0450\u0405\3\2\2\2\u0450\u0414\3\2\2\2\u0450\u0423\3")
        buf.write("\2\2\2\u0450\u0432\3\2\2\2\u0450\u0441\3\2\2\2\u0451\u0454")
        buf.write("\3\2\2\2\u0452\u0450\3\2\2\2\u0452\u0453\3\2\2\2\u0453")
        buf.write("9\3\2\2\2\u0454\u0452\3\2\2\2\u0455\u0459\5D#\2\u0456")
        buf.write("\u0459\5B\"\2\u0457\u0459\7;\2\2\u0458\u0455\3\2\2\2\u0458")
        buf.write("\u0456\3\2\2\2\u0458\u0457\3\2\2\2\u0459;\3\2\2\2\u045a")
        buf.write("\u045b\t\6\2\2\u045b=\3\2\2\2\u045c\u0463\7\62\2\2\u045d")
        buf.write("\u0463\7\63\2\2\u045e\u0463\7\64\2\2\u045f\u0463\7\65")
        buf.write("\2\2\u0460\u0463\7\61\2\2\u0461\u0463\5@!\2\u0462\u045c")
        buf.write("\3\2\2\2\u0462\u045d\3\2\2\2\u0462\u045e\3\2\2\2\u0462")
        buf.write("\u045f\3\2\2\2\u0462\u0460\3\2\2\2\u0462\u0461\3\2\2\2")
        buf.write("\u0463?\3\2\2\2\u0464\u0465\7\60\2\2\u0465\u0466\7\61")
        buf.write("\2\2\u0466A\3\2\2\2\u0467\u0469\7:\2\2\u0468\u0467\3\2")
        buf.write("\2\2\u0469\u046c\3\2\2\2\u046a\u0468\3\2\2\2\u046a\u046b")
        buf.write("\3\2\2\2\u046b\u046d\3\2\2\2\u046c\u046a\3\2\2\2\u046d")
        buf.write("\u046f\79\2\2\u046e\u046a\3\2\2\2\u046e\u046f\3\2\2\2")
        buf.write("\u046f\u0471\3\2\2\2\u0470\u0472\7:\2\2\u0471\u0470\3")
        buf.write("\2\2\2\u0472\u0473\3\2\2\2\u0473\u0471\3\2\2\2\u0473\u0474")
        buf.write("\3\2\2\2\u0474C\3\2\2\2\u0475\u0477\7:\2\2\u0476\u0475")
        buf.write("\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u0476\3\2\2\2\u0478")
        buf.write("\u0479\3\2\2\2\u0479E\3\2\2\2\u00a4IPTY]dhmsw|\u0081\u0092")
        buf.write("\u0095\u009a\u00a1\u00a8\u00af\u00b5\u00bb\u00c1\u00c7")
        buf.write("\u00cd\u00d3\u00d9\u00df\u00e7\u00ef\u00f6\u00fd\u0103")
        buf.write("\u0108\u010e\u0115\u011a\u011f\u0128\u012f\u0138\u013d")
        buf.write("\u0144\u014a\u0151\u0158\u015f\u0167\u016e\u0174\u017b")
        buf.write("\u0182\u0189\u0190\u0197\u019d\u01a4\u01ab\u01b2\u01ba")
        buf.write("\u01c1\u01c7\u01ce\u01d6\u01dd\u01e4\u01eb\u01f2\u01f7")
        buf.write("\u01fe\u0205\u020c\u0213\u0219\u0220\u0227\u022e\u0235")
        buf.write("\u023a\u023f\u0244\u024b\u0251\u0258\u0260\u0267\u026d")
        buf.write("\u0274\u027c\u0283\u028a\u0291\u0298\u029f\u02a6\u02ae")
        buf.write("\u02b5\u02bc\u02c3\u02c9\u02d0\u02d6\u02dd\u02e0\u02e7")
        buf.write("\u02ec\u02f3\u02f9\u0300\u0308\u030f\u0315\u031c\u0323")
        buf.write("\u032a\u0332\u0339\u033f\u0346\u034e\u0355\u035b\u0362")
        buf.write("\u0369\u0370\u0378\u037f\u0385\u038c\u0393\u039a\u03a2")
        buf.write("\u03a9\u03af\u03b6\u03be\u03c5\u03cb\u03d2\u03d7\u03de")
        buf.write("\u03e5\u03ee\u03f6\u03fe\u0403\u0409\u0410\u0418\u041f")
        buf.write("\u0427\u042e\u0436\u043d\u0445\u044c\u0450\u0452\u0458")
        buf.write("\u0462\u046a\u046e\u0473\u0478")
        return buf.getvalue()


class GraphlyParser ( Parser ):

    grammarFileName = "Graphly.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'loop'", "'start'", "'until'", 
                     "'step'", "'then'", "'end'", "'check'", "'else'", "'point'", 
                     "':'", "','", "'segment'", "'circle'", "'polygon'", 
                     "'['", "']'", "'group'", "'num'", "'iterator'", "'canvas'", 
                     "'draw'", "'log'", "'fill'", "'move'", "'place'", "'rotate'", 
                     "'scale'", "'assign'", "'('", "')'", "'^'", "'_'", 
                     "'~'", "'!='", "'&'", "'|'", "<INVALID>", "'\r'", "<INVALID>", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'='", "'>'", 
                     "'<'", "'>='", "'<='", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'.'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "WS", "CR", "COM_SIGN", 
                      "PLUS", "MINUS", "MULTIPLICATION", "DIVISION", "MODULO", 
                      "NEG", "EQ", "GREATER", "LOWER", "GT", "LT", "TEXT", 
                      "TYPE", "COLOR", "DOT", "DIGIT", "NAME" ]

    RULE_program = 0
    RULE_instruction = 1
    RULE_block = 2
    RULE_loop = 3
    RULE_check = 4
    RULE_condition_block = 5
    RULE_shape = 6
    RULE_point = 7
    RULE_segment = 8
    RULE_circle = 9
    RULE_polygon = 10
    RULE_groupMember = 11
    RULE_transformable = 12
    RULE_group = 13
    RULE_type_definition = 14
    RULE_num = 15
    RULE_iterator = 16
    RULE_canvas = 17
    RULE_draw = 18
    RULE_log = 19
    RULE_transformation = 20
    RULE_fill = 21
    RULE_move = 22
    RULE_place = 23
    RULE_rotate = 24
    RULE_scale = 25
    RULE_assign = 26
    RULE_expr = 27
    RULE_atom = 28
    RULE_arithmetic = 29
    RULE_logic = 30
    RULE_neq = 31
    RULE_flt = 32
    RULE_itr = 33

    ruleNames =  [ "program", "instruction", "block", "loop", "check", "condition_block", 
                   "shape", "point", "segment", "circle", "polygon", "groupMember", 
                   "transformable", "group", "type_definition", "num", "iterator", 
                   "canvas", "draw", "log", "transformation", "fill", "move", 
                   "place", "rotate", "scale", "assign", "expr", "atom", 
                   "arithmetic", "logic", "neq", "flt", "itr" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    WS=38
    CR=39
    COM_SIGN=40
    PLUS=41
    MINUS=42
    MULTIPLICATION=43
    DIVISION=44
    MODULO=45
    NEG=46
    EQ=47
    GREATER=48
    LOWER=49
    GT=50
    LT=51
    TEXT=52
    TYPE=53
    COLOR=54
    DOT=55
    DIGIT=56
    NAME=57

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def canvas(self):
            return self.getTypedRuleContext(GraphlyParser.CanvasContext,0)


        def EOF(self):
            return self.getToken(GraphlyParser.EOF, 0)

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def COM_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.COM_SIGN)
            else:
                return self.getToken(GraphlyParser.COM_SIGN, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = GraphlyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 91
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 71
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 68
                            self.match(GraphlyParser.T__0) 
                        self.state = 73
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                    self.state = 74
                    self.instruction()
                    self.state = 78
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==GraphlyParser.WS:
                        self.state = 75
                        self.match(GraphlyParser.WS)
                        self.state = 80
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 82
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==GraphlyParser.COM_SIGN:
                        self.state = 81
                        self.match(GraphlyParser.COM_SIGN)


                    self.state = 85 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 84
                            self.match(GraphlyParser.T__0)

                        else:
                            raise NoViableAltException(self)
                        self.state = 87 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
             
                self.state = 93
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 94
            self.canvas()
            self.state = 98
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 95
                self.match(GraphlyParser.WS)
                self.state = 100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.COM_SIGN:
                self.state = 101
                self.match(GraphlyParser.COM_SIGN)


            self.state = 127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__0:
                self.state = 105 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 104
                        self.match(GraphlyParser.T__0)

                    else:
                        raise NoViableAltException(self)
                    self.state = 107 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 109
                self.instruction()
                self.state = 113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 110
                    self.match(GraphlyParser.WS)
                    self.state = 115
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==GraphlyParser.COM_SIGN:
                    self.state = 116
                    self.match(GraphlyParser.COM_SIGN)


                self.state = 122
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 119
                        self.match(GraphlyParser.T__0) 
                    self.state = 124
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                self.state = 129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 130
            self.match(GraphlyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shape(self):
            return self.getTypedRuleContext(GraphlyParser.ShapeContext,0)


        def type_definition(self):
            return self.getTypedRuleContext(GraphlyParser.Type_definitionContext,0)


        def draw(self):
            return self.getTypedRuleContext(GraphlyParser.DrawContext,0)


        def transformation(self):
            return self.getTypedRuleContext(GraphlyParser.TransformationContext,0)


        def group(self):
            return self.getTypedRuleContext(GraphlyParser.GroupContext,0)


        def loop(self):
            return self.getTypedRuleContext(GraphlyParser.LoopContext,0)


        def check(self):
            return self.getTypedRuleContext(GraphlyParser.CheckContext,0)


        def assign(self):
            return self.getTypedRuleContext(GraphlyParser.AssignContext,0)


        def log(self):
            return self.getTypedRuleContext(GraphlyParser.LogContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = GraphlyParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instruction)
        try:
            self.state = 147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 132
                self.shape()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 133
                self.type_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 134
                self.draw()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 135
                self.transformation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 136
                self.group()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 137
                self.loop()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 138
                self.check()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 139
                self.assign()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 140
                self.log()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 144
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 141
                        self.match(GraphlyParser.WS) 
                    self.state = 146
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = GraphlyParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 166
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 152
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 149
                            self.match(GraphlyParser.WS) 
                        self.state = 154
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                    self.state = 155
                    self.instruction()
                    self.state = 159
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==GraphlyParser.WS:
                        self.state = 156
                        self.match(GraphlyParser.WS)
                        self.state = 161
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 162
                    self.match(GraphlyParser.T__0) 
                self.state = 168
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.starting = None # ExprContext
            self.until = None # ExprContext
            self.step = None # ExprContext

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop" ):
                listener.enterLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop" ):
                listener.exitLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = GraphlyParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 169
            self.match(GraphlyParser.T__1)
            self.state = 171 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 170
                self.match(GraphlyParser.WS)
                self.state = 173 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 175
            localctx.name = self.match(GraphlyParser.NAME)
            self.state = 177 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 176
                self.match(GraphlyParser.WS)
                self.state = 179 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 181
            self.match(GraphlyParser.T__2)
            self.state = 183 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 182
                self.match(GraphlyParser.WS)
                self.state = 185 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 187
            localctx.starting = self.expr(0)
            self.state = 189 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 188
                self.match(GraphlyParser.WS)
                self.state = 191 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 193
            self.match(GraphlyParser.T__3)
            self.state = 195 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 194
                self.match(GraphlyParser.WS)
                self.state = 197 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 199
            localctx.until = self.expr(0)
            self.state = 201 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 200
                self.match(GraphlyParser.WS)
                self.state = 203 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 205
            self.match(GraphlyParser.T__4)
            self.state = 207 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 206
                self.match(GraphlyParser.WS)
                self.state = 209 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 211
            localctx.step = self.expr(0)
            self.state = 213 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 212
                self.match(GraphlyParser.WS)
                self.state = 215 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 217
            self.match(GraphlyParser.T__5)
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 218
                self.match(GraphlyParser.WS)
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 224
            self.match(GraphlyParser.T__0)
            self.state = 225
            self.block()
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 226
                self.match(GraphlyParser.WS)
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 232
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Condition_blockContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Condition_blockContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck" ):
                listener.enterCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck" ):
                listener.exitCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheck" ):
                return visitor.visitCheck(self)
            else:
                return visitor.visitChildren(self)




    def check(self):

        localctx = GraphlyParser.CheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 234
                self.match(GraphlyParser.WS)
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 240
            self.match(GraphlyParser.T__7)
            self.state = 242 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 241
                self.match(GraphlyParser.WS)
                self.state = 244 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 246
            self.condition_block()
            self.state = 262
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 247
                    self.match(GraphlyParser.T__8)
                    self.state = 249 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 248
                        self.match(GraphlyParser.WS)
                        self.state = 251 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 253
                    self.match(GraphlyParser.T__7)
                    self.state = 255 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 254
                        self.match(GraphlyParser.WS)
                        self.state = 257 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 259
                    self.condition_block() 
                self.state = 264
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

            self.state = 268
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 265
                    self.match(GraphlyParser.WS) 
                self.state = 270
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.T__8:
                self.state = 271
                self.match(GraphlyParser.T__8)
                self.state = 273 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 272
                    self.match(GraphlyParser.WS)
                    self.state = 275 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 277
                self.match(GraphlyParser.T__5)
                self.state = 278
                self.match(GraphlyParser.T__0)
                self.state = 279
                self.block()


            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 282
                self.match(GraphlyParser.WS)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 288
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_condition_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_block" ):
                listener.enterCondition_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_block" ):
                listener.exitCondition_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition_block" ):
                return visitor.visitCondition_block(self)
            else:
                return visitor.visitChildren(self)




    def condition_block(self):

        localctx = GraphlyParser.Condition_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_condition_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.expr(0)
            self.state = 292 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 291
                self.match(GraphlyParser.WS)
                self.state = 294 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 296
            self.match(GraphlyParser.T__5)
            self.state = 297
            self.match(GraphlyParser.T__0)
            self.state = 301
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 298
                    self.match(GraphlyParser.WS) 
                self.state = 303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

            self.state = 304
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShapeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def point(self):
            return self.getTypedRuleContext(GraphlyParser.PointContext,0)


        def segment(self):
            return self.getTypedRuleContext(GraphlyParser.SegmentContext,0)


        def circle(self):
            return self.getTypedRuleContext(GraphlyParser.CircleContext,0)


        def polygon(self):
            return self.getTypedRuleContext(GraphlyParser.PolygonContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_shape

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape" ):
                listener.enterShape(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape" ):
                listener.exitShape(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShape" ):
                return visitor.visitShape(self)
            else:
                return visitor.visitChildren(self)




    def shape(self):

        localctx = GraphlyParser.ShapeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_shape)
        try:
            self.state = 310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 306
                self.point()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 307
                self.segment()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 308
                self.circle()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 309
                self.polygon()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_point

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoint" ):
                listener.enterPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoint" ):
                listener.exitPoint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPoint" ):
                return visitor.visitPoint(self)
            else:
                return visitor.visitChildren(self)




    def point(self):

        localctx = GraphlyParser.PointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_point)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 312
                self.match(GraphlyParser.WS)
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 318
            self.match(GraphlyParser.T__9)
            self.state = 320 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 319
                self.match(GraphlyParser.WS)
                self.state = 322 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 324
            self.match(GraphlyParser.NAME)
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 325
                self.match(GraphlyParser.WS)
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 331
            self.match(GraphlyParser.T__10)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 332
                self.match(GraphlyParser.WS)
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 338
            localctx.x = self.expr(0)
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 339
                self.match(GraphlyParser.WS)
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 345
            self.match(GraphlyParser.T__11)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 346
                self.match(GraphlyParser.WS)
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 352
            localctx.y = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegment" ):
                listener.enterSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegment" ):
                listener.exitSegment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegment" ):
                return visitor.visitSegment(self)
            else:
                return visitor.visitChildren(self)




    def segment(self):

        localctx = GraphlyParser.SegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 354
                self.match(GraphlyParser.WS)
                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 360
            self.match(GraphlyParser.T__12)
            self.state = 362 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 361
                self.match(GraphlyParser.WS)
                self.state = 364 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 366
            self.match(GraphlyParser.NAME)
            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 367
                self.match(GraphlyParser.WS)
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 373
            self.match(GraphlyParser.T__10)
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 374
                self.match(GraphlyParser.WS)
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 380
            self.match(GraphlyParser.NAME)
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 381
                self.match(GraphlyParser.WS)
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 387
            self.match(GraphlyParser.T__11)
            self.state = 389 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 388
                self.match(GraphlyParser.WS)
                self.state = 391 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 393
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CircleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_circle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCircle" ):
                listener.enterCircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCircle" ):
                listener.exitCircle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCircle" ):
                return visitor.visitCircle(self)
            else:
                return visitor.visitChildren(self)




    def circle(self):

        localctx = GraphlyParser.CircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_circle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 395
                self.match(GraphlyParser.WS)
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 401
            self.match(GraphlyParser.T__13)
            self.state = 403 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 402
                self.match(GraphlyParser.WS)
                self.state = 405 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 407
            self.match(GraphlyParser.NAME)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 408
                self.match(GraphlyParser.WS)
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 414
            self.match(GraphlyParser.T__10)
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 415
                self.match(GraphlyParser.WS)
                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 421
            self.match(GraphlyParser.NAME)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 422
                self.match(GraphlyParser.WS)
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 428
            self.match(GraphlyParser.T__11)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 429
                self.match(GraphlyParser.WS)
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 435
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolygonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_polygon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolygon" ):
                listener.enterPolygon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolygon" ):
                listener.exitPolygon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolygon" ):
                return visitor.visitPolygon(self)
            else:
                return visitor.visitChildren(self)




    def polygon(self):

        localctx = GraphlyParser.PolygonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_polygon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 437
                self.match(GraphlyParser.WS)
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 443
            self.match(GraphlyParser.T__14)
            self.state = 445 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 444
                self.match(GraphlyParser.WS)
                self.state = 447 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 449
            self.match(GraphlyParser.NAME)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 450
                self.match(GraphlyParser.WS)
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 456
            self.match(GraphlyParser.T__10)
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 457
                self.match(GraphlyParser.WS)
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 463
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_groupMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupMember" ):
                listener.enterGroupMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupMember" ):
                listener.exitGroupMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupMember" ):
                return visitor.visitGroupMember(self)
            else:
                return visitor.visitChildren(self)




    def groupMember(self):

        localctx = GraphlyParser.GroupMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_groupMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 465
                self.match(GraphlyParser.WS)
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 471
            self.match(GraphlyParser.NAME)
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 472
                self.match(GraphlyParser.WS)
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 478
            self.match(GraphlyParser.T__15)
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 479
                self.match(GraphlyParser.WS)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 485
            self.expr(0)
            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 486
                self.match(GraphlyParser.WS)
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 492
            self.match(GraphlyParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def groupMember(self):
            return self.getTypedRuleContext(GraphlyParser.GroupMemberContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformable" ):
                listener.enterTransformable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformable" ):
                listener.exitTransformable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformable" ):
                return visitor.visitTransformable(self)
            else:
                return visitor.visitChildren(self)




    def transformable(self):

        localctx = GraphlyParser.TransformableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_transformable)
        try:
            self.state = 496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.match(GraphlyParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.groupMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)

        def TYPE(self):
            return self.getToken(GraphlyParser.TYPE, 0)

        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = GraphlyParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 498
                self.match(GraphlyParser.WS)
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 504
            self.match(GraphlyParser.T__17)
            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 505
                self.match(GraphlyParser.WS)
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 511
            self.match(GraphlyParser.LOWER)
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 512
                self.match(GraphlyParser.WS)
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 518
            self.match(GraphlyParser.TYPE)
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 519
                self.match(GraphlyParser.WS)
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 525
            self.match(GraphlyParser.GREATER)
            self.state = 527 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 526
                self.match(GraphlyParser.WS)
                self.state = 529 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 531
            self.match(GraphlyParser.NAME)
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 532
                self.match(GraphlyParser.WS)
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 538
            self.match(GraphlyParser.T__10)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 539
                self.match(GraphlyParser.WS)
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 545
            self.match(GraphlyParser.NAME)
            self.state = 549
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 546
                    self.match(GraphlyParser.WS) 
                self.state = 551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__11:
                self.state = 552
                self.match(GraphlyParser.T__11)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 553
                    self.match(GraphlyParser.WS)
                    self.state = 558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 559
                self.match(GraphlyParser.NAME)
                self.state = 563
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 560
                        self.match(GraphlyParser.WS) 
                    self.state = 565
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num(self):
            return self.getTypedRuleContext(GraphlyParser.NumContext,0)


        def iterator(self):
            return self.getTypedRuleContext(GraphlyParser.IteratorContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_definition" ):
                listener.enterType_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_definition" ):
                listener.exitType_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_definition" ):
                return visitor.visitType_definition(self)
            else:
                return visitor.visitChildren(self)




    def type_definition(self):

        localctx = GraphlyParser.Type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_type_definition)
        try:
            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.num()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.iterator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_num

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum" ):
                listener.enterNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum" ):
                listener.exitNum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum" ):
                return visitor.visitNum(self)
            else:
                return visitor.visitChildren(self)




    def num(self):

        localctx = GraphlyParser.NumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_num)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 575
                self.match(GraphlyParser.WS)
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 581
            self.match(GraphlyParser.T__18)
            self.state = 583 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 582
                self.match(GraphlyParser.WS)
                self.state = 585 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 587
            self.match(GraphlyParser.NAME)
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 588
                self.match(GraphlyParser.WS)
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 594
            self.match(GraphlyParser.T__10)
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 595
                self.match(GraphlyParser.WS)
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 601
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterator" ):
                listener.enterIterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterator" ):
                listener.exitIterator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterator" ):
                return visitor.visitIterator(self)
            else:
                return visitor.visitChildren(self)




    def iterator(self):

        localctx = GraphlyParser.IteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 603
                self.match(GraphlyParser.WS)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 609
            self.match(GraphlyParser.T__19)
            self.state = 611 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 610
                self.match(GraphlyParser.WS)
                self.state = 613 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 615
            self.match(GraphlyParser.NAME)
            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 616
                self.match(GraphlyParser.WS)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 622
            self.match(GraphlyParser.T__10)
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 623
                self.match(GraphlyParser.WS)
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 629
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CanvasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_canvas

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCanvas" ):
                listener.enterCanvas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCanvas" ):
                listener.exitCanvas(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCanvas" ):
                return visitor.visitCanvas(self)
            else:
                return visitor.visitChildren(self)




    def canvas(self):

        localctx = GraphlyParser.CanvasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_canvas)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 631
                self.match(GraphlyParser.WS)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 637
            self.match(GraphlyParser.T__20)
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 638
                self.match(GraphlyParser.WS)
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 644
            self.match(GraphlyParser.T__10)
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 645
                self.match(GraphlyParser.WS)
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 651
            localctx.x = self.expr(0)
            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 652
                self.match(GraphlyParser.WS)
                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 658
            self.match(GraphlyParser.T__11)
            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 659
                self.match(GraphlyParser.WS)
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 665
            localctx.y = self.expr(0)
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 666
                self.match(GraphlyParser.WS)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 672
            self.match(GraphlyParser.T__11)
            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 673
                self.match(GraphlyParser.WS)
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 679
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DrawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_draw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDraw" ):
                listener.enterDraw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDraw" ):
                listener.exitDraw(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDraw" ):
                return visitor.visitDraw(self)
            else:
                return visitor.visitChildren(self)




    def draw(self):

        localctx = GraphlyParser.DrawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_draw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 681
                self.match(GraphlyParser.WS)
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 687
            self.match(GraphlyParser.T__21)
            self.state = 689 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 688
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 691 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

            self.state = 693
            localctx.arg = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_log

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExprLogContext(LogContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.LogContext
            super().__init__(parser)
            self.arg = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprLog" ):
                listener.enterExprLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprLog" ):
                listener.exitExprLog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprLog" ):
                return visitor.visitExprLog(self)
            else:
                return visitor.visitChildren(self)


    class TextLogContext(LogContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.LogContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(GraphlyParser.TEXT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextLog" ):
                listener.enterTextLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextLog" ):
                listener.exitTextLog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTextLog" ):
                return visitor.visitTextLog(self)
            else:
                return visitor.visitChildren(self)


    class ShapeLogContext(LogContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.LogContext
            super().__init__(parser)
            self.arg = None # TransformableContext
            self.copyFrom(ctx)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShapeLog" ):
                listener.enterShapeLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShapeLog" ):
                listener.exitShapeLog(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShapeLog" ):
                return visitor.visitShapeLog(self)
            else:
                return visitor.visitChildren(self)



    def log(self):

        localctx = GraphlyParser.LogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_log)
        self._la = 0 # Token type
        try:
            self.state = 734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.ShapeLogContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 695
                    self.match(GraphlyParser.WS)
                    self.state = 700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 701
                self.match(GraphlyParser.T__22)
                self.state = 703 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 702
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 705 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                self.state = 707
                localctx.arg = self.transformable()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.ExprLogContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 708
                    self.match(GraphlyParser.WS)
                    self.state = 713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 714
                self.match(GraphlyParser.T__22)
                self.state = 716 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 715
                    self.match(GraphlyParser.WS)
                    self.state = 718 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 720
                localctx.arg = self.expr(0)
                pass

            elif la_ == 3:
                localctx = GraphlyParser.TextLogContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 721
                    self.match(GraphlyParser.WS)
                    self.state = 726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 727
                self.match(GraphlyParser.T__22)
                self.state = 729 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 728
                    self.match(GraphlyParser.WS)
                    self.state = 731 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 733
                self.match(GraphlyParser.TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fill(self):
            return self.getTypedRuleContext(GraphlyParser.FillContext,0)


        def move(self):
            return self.getTypedRuleContext(GraphlyParser.MoveContext,0)


        def place(self):
            return self.getTypedRuleContext(GraphlyParser.PlaceContext,0)


        def rotate(self):
            return self.getTypedRuleContext(GraphlyParser.RotateContext,0)


        def scale(self):
            return self.getTypedRuleContext(GraphlyParser.ScaleContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformation" ):
                listener.enterTransformation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformation" ):
                listener.exitTransformation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformation" ):
                return visitor.visitTransformation(self)
            else:
                return visitor.visitChildren(self)




    def transformation(self):

        localctx = GraphlyParser.TransformationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_transformation)
        try:
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 736
                self.fill()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 737
                self.move()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 738
                self.place()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 739
                self.rotate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 740
                self.scale()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FillContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_fill

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFill" ):
                listener.enterFill(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFill" ):
                listener.exitFill(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFill" ):
                return visitor.visitFill(self)
            else:
                return visitor.visitChildren(self)




    def fill(self):

        localctx = GraphlyParser.FillContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_fill)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 743
                self.match(GraphlyParser.WS)
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 749
            self.match(GraphlyParser.T__23)
            self.state = 751 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 750
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 753 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

            self.state = 755
            localctx.arg = self.transformable()
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 756
                self.match(GraphlyParser.WS)
                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 762
            self.match(GraphlyParser.T__10)
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 763
                self.match(GraphlyParser.WS)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 769
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext
            self.dx = None # ExprContext
            self.dy = None # ExprContext

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMove" ):
                return visitor.visitMove(self)
            else:
                return visitor.visitChildren(self)




    def move(self):

        localctx = GraphlyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 771
                self.match(GraphlyParser.WS)
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 777
            self.match(GraphlyParser.T__24)
            self.state = 779 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 778
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 781 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 783
            localctx.arg = self.transformable()
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 784
                self.match(GraphlyParser.WS)
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 790
            self.match(GraphlyParser.T__10)
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 791
                self.match(GraphlyParser.WS)
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 797
            localctx.dx = self.expr(0)
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 798
                self.match(GraphlyParser.WS)
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 804
            self.match(GraphlyParser.T__11)
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 805
                self.match(GraphlyParser.WS)
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 811
            localctx.dy = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_place

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlace" ):
                listener.enterPlace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlace" ):
                listener.exitPlace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = GraphlyParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_place)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 813
                self.match(GraphlyParser.WS)
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 819
            self.match(GraphlyParser.T__25)
            self.state = 821 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 820
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 823 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

            self.state = 825
            localctx.arg1 = self.transformable()
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 826
                self.match(GraphlyParser.WS)
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 832
            self.match(GraphlyParser.T__10)
            self.state = 836
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 833
                    self.match(GraphlyParser.WS) 
                self.state = 838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

            self.state = 839
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RotateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.angle = None # ExprContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_rotate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRotate" ):
                listener.enterRotate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRotate" ):
                listener.exitRotate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRotate" ):
                return visitor.visitRotate(self)
            else:
                return visitor.visitChildren(self)




    def rotate(self):

        localctx = GraphlyParser.RotateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_rotate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 841
                self.match(GraphlyParser.WS)
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 847
            self.match(GraphlyParser.T__26)
            self.state = 849 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 848
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 851 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

            self.state = 853
            localctx.arg1 = self.transformable()
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 854
                self.match(GraphlyParser.WS)
                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 860
            self.match(GraphlyParser.T__10)
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 861
                self.match(GraphlyParser.WS)
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 867
            localctx.angle = self.expr(0)
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 868
                self.match(GraphlyParser.WS)
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 874
            self.match(GraphlyParser.T__11)
            self.state = 878
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 875
                    self.match(GraphlyParser.WS) 
                self.state = 880
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

            self.state = 881
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.k = None # ExprContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScale" ):
                listener.enterScale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScale" ):
                listener.exitScale(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScale" ):
                return visitor.visitScale(self)
            else:
                return visitor.visitChildren(self)




    def scale(self):

        localctx = GraphlyParser.ScaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_scale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 883
                self.match(GraphlyParser.WS)
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 889
            self.match(GraphlyParser.T__27)
            self.state = 891 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 890
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 893 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

            self.state = 895
            localctx.arg1 = self.transformable()
            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 896
                self.match(GraphlyParser.WS)
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 902
            self.match(GraphlyParser.T__10)
            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 903
                self.match(GraphlyParser.WS)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 909
            localctx.k = self.expr(0)
            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 910
                self.match(GraphlyParser.WS)
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 916
            self.match(GraphlyParser.T__11)
            self.state = 920
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 917
                    self.match(GraphlyParser.WS) 
                self.state = 922
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

            self.state = 923
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_assign

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NumAssignContext(AssignContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AssignContext
            super().__init__(parser)
            self.arg1 = None # TransformableContext
            self.arg2 = None # ExprContext
            self.copyFrom(ctx)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumAssign" ):
                listener.enterNumAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumAssign" ):
                listener.exitNumAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumAssign" ):
                return visitor.visitNumAssign(self)
            else:
                return visitor.visitChildren(self)


    class CopyAssignContext(AssignContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AssignContext
            super().__init__(parser)
            self.arg1 = None # TransformableContext
            self.arg2 = None # TransformableContext
            self.copyFrom(ctx)

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyAssign" ):
                listener.enterCopyAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyAssign" ):
                listener.exitCopyAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyAssign" ):
                return visitor.visitCopyAssign(self)
            else:
                return visitor.visitChildren(self)



    def assign(self):

        localctx = GraphlyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.state = 981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.CopyAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 925
                    self.match(GraphlyParser.WS)
                    self.state = 930
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 931
                self.match(GraphlyParser.T__28)
                self.state = 933 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 932
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 935 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

                self.state = 937
                localctx.arg1 = self.transformable()
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 938
                    self.match(GraphlyParser.WS)
                    self.state = 943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 944
                self.match(GraphlyParser.T__10)
                self.state = 948
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 945
                        self.match(GraphlyParser.WS) 
                    self.state = 950
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

                self.state = 951
                localctx.arg2 = self.transformable()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.NumAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 953
                    self.match(GraphlyParser.WS)
                    self.state = 958
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 959
                self.match(GraphlyParser.T__28)
                self.state = 961 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 960
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 963 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                self.state = 965
                localctx.arg1 = self.transformable()
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 966
                    self.match(GraphlyParser.WS)
                    self.state = 971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 972
                self.match(GraphlyParser.T__10)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 973
                    self.match(GraphlyParser.WS)
                    self.state = 978
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 979
                localctx.arg2 = self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MinusOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)
        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinusOpExpr" ):
                listener.enterMinusOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinusOpExpr" ):
                listener.exitMinusOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinusOpExpr" ):
                return visitor.visitMinusOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class RoundingOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoundingOpExpr" ):
                listener.enterRoundingOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoundingOpExpr" ):
                listener.exitRoundingOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoundingOpExpr" ):
                return visitor.visitRoundingOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class BooleanOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def LT(self):
            return self.getToken(GraphlyParser.LT, 0)
        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)
        def GT(self):
            return self.getToken(GraphlyParser.GT, 0)
        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)
        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOpExpr" ):
                listener.enterBooleanOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOpExpr" ):
                listener.exitBooleanOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOpExpr" ):
                return visitor.visitBooleanOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def MULTIPLICATION(self):
            return self.getToken(GraphlyParser.MULTIPLICATION, 0)
        def DIVISION(self):
            return self.getToken(GraphlyParser.DIVISION, 0)
        def MODULO(self):
            return self.getToken(GraphlyParser.MODULO, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)
        def PLUS(self):
            return self.getToken(GraphlyParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOpExpr" ):
                listener.enterArithmeticOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOpExpr" ):
                listener.exitArithmeticOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOpExpr" ):
                return visitor.visitArithmeticOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class NegationOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEG(self):
            return self.getToken(GraphlyParser.NEG, 0)
        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegationOpExpr" ):
                listener.enterNegationOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegationOpExpr" ):
                listener.exitNegationOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNegationOpExpr" ):
                return visitor.visitNegationOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class AtomExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(GraphlyParser.AtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomExpr" ):
                listener.enterAtomExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomExpr" ):
                listener.exitAtomExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomExpr" ):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpr" ):
                listener.enterParenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpr" ):
                listener.exitParenExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpr" ):
                return visitor.visitParenExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GraphlyParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.T__29]:
                localctx = GraphlyParser.ParenExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 984
                self.match(GraphlyParser.T__29)
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 985
                    self.match(GraphlyParser.WS)
                    self.state = 990
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 991
                self.expr(0)
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 992
                    self.match(GraphlyParser.WS)
                    self.state = 997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 998
                self.match(GraphlyParser.T__30)
                pass
            elif token in [GraphlyParser.T__31, GraphlyParser.T__32, GraphlyParser.T__33]:
                localctx = GraphlyParser.RoundingOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1000
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__31) | (1 << GraphlyParser.T__32) | (1 << GraphlyParser.T__33))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1001
                    self.match(GraphlyParser.WS)
                    self.state = 1006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1007
                self.expr(9)
                pass
            elif token in [GraphlyParser.MINUS]:
                localctx = GraphlyParser.MinusOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1008
                self.match(GraphlyParser.MINUS)
                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1009
                    self.match(GraphlyParser.WS)
                    self.state = 1014
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1015
                self.expr(8)
                pass
            elif token in [GraphlyParser.NEG]:
                localctx = GraphlyParser.NegationOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1016
                self.match(GraphlyParser.NEG)
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1017
                    self.match(GraphlyParser.WS)
                    self.state = 1022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1023
                self.expr(4)
                pass
            elif token in [GraphlyParser.DOT, GraphlyParser.DIGIT, GraphlyParser.NAME]:
                localctx = GraphlyParser.AtomExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1024
                self.atom()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1104
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1102
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                    if la_ == 1:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1027
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1031
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1028
                            self.match(GraphlyParser.WS)
                            self.state = 1033
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1034
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1038
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1035
                            self.match(GraphlyParser.WS)
                            self.state = 1040
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1041
                        localctx.right = self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1042
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1046
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1043
                            self.match(GraphlyParser.WS)
                            self.state = 1048
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1049
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==GraphlyParser.PLUS or _la==GraphlyParser.MINUS):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1053
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1050
                            self.match(GraphlyParser.WS)
                            self.state = 1055
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1056
                        localctx.right = self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1057
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1061
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1058
                            self.match(GraphlyParser.WS)
                            self.state = 1063
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1064
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__34) | (1 << GraphlyParser.EQ) | (1 << GraphlyParser.GREATER) | (1 << GraphlyParser.LOWER) | (1 << GraphlyParser.GT) | (1 << GraphlyParser.LT))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1068
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1065
                            self.match(GraphlyParser.WS)
                            self.state = 1070
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1071
                        localctx.right = self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1072
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1076
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1073
                            self.match(GraphlyParser.WS)
                            self.state = 1078
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1079
                        localctx.op = self.match(GraphlyParser.T__35)
                        self.state = 1083
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1080
                            self.match(GraphlyParser.WS)
                            self.state = 1085
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1086
                        localctx.right = self.expr(4)
                        pass

                    elif la_ == 5:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1087
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1091
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1088
                            self.match(GraphlyParser.WS)
                            self.state = 1093
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1094
                        localctx.op = self.match(GraphlyParser.T__36)
                        self.state = 1098
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1095
                            self.match(GraphlyParser.WS)
                            self.state = 1100
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1101
                        localctx.right = self.expr(3)
                        pass

             
                self.state = 1106
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_atom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class VarAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarAtom" ):
                listener.enterVarAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarAtom" ):
                listener.exitVarAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarAtom" ):
                return visitor.visitVarAtom(self)
            else:
                return visitor.visitChildren(self)


    class IntAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def itr(self):
            return self.getTypedRuleContext(GraphlyParser.ItrContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntAtom" ):
                listener.enterIntAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntAtom" ):
                listener.exitIntAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntAtom" ):
                return visitor.visitIntAtom(self)
            else:
                return visitor.visitChildren(self)


    class FltAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def flt(self):
            return self.getTypedRuleContext(GraphlyParser.FltContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFltAtom" ):
                listener.enterFltAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFltAtom" ):
                listener.exitFltAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFltAtom" ):
                return visitor.visitFltAtom(self)
            else:
                return visitor.visitChildren(self)



    def atom(self):

        localctx = GraphlyParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_atom)
        try:
            self.state = 1110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.IntAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1107
                self.itr()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.FltAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1108
                self.flt()
                pass

            elif la_ == 3:
                localctx = GraphlyParser.VarAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1109
                self.match(GraphlyParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(GraphlyParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)

        def MULTIPLICATION(self):
            return self.getToken(GraphlyParser.MULTIPLICATION, 0)

        def DIVISION(self):
            return self.getToken(GraphlyParser.DIVISION, 0)

        def MODULO(self):
            return self.getToken(GraphlyParser.MODULO, 0)

        def getRuleIndex(self):
            return GraphlyParser.RULE_arithmetic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic" ):
                listener.enterArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic" ):
                listener.exitArithmetic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmetic" ):
                return visitor.visitArithmetic(self)
            else:
                return visitor.visitChildren(self)




    def arithmetic(self):

        localctx = GraphlyParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_arithmetic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.PLUS) | (1 << GraphlyParser.MINUS) | (1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)

        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)

        def GT(self):
            return self.getToken(GraphlyParser.GT, 0)

        def LT(self):
            return self.getToken(GraphlyParser.LT, 0)

        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)

        def neq(self):
            return self.getTypedRuleContext(GraphlyParser.NeqContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_logic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic" ):
                listener.enterLogic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic" ):
                listener.exitLogic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogic" ):
                return visitor.visitLogic(self)
            else:
                return visitor.visitChildren(self)




    def logic(self):

        localctx = GraphlyParser.LogicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_logic)
        try:
            self.state = 1120
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.GREATER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1114
                self.match(GraphlyParser.GREATER)
                pass
            elif token in [GraphlyParser.LOWER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1115
                self.match(GraphlyParser.LOWER)
                pass
            elif token in [GraphlyParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1116
                self.match(GraphlyParser.GT)
                pass
            elif token in [GraphlyParser.LT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1117
                self.match(GraphlyParser.LT)
                pass
            elif token in [GraphlyParser.EQ]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1118
                self.match(GraphlyParser.EQ)
                pass
            elif token in [GraphlyParser.NEG]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1119
                self.neq()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEG(self):
            return self.getToken(GraphlyParser.NEG, 0)

        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)

        def getRuleIndex(self):
            return GraphlyParser.RULE_neq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNeq" ):
                listener.enterNeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNeq" ):
                listener.exitNeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNeq" ):
                return visitor.visitNeq(self)
            else:
                return visitor.visitChildren(self)




    def neq(self):

        localctx = GraphlyParser.NeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_neq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(GraphlyParser.NEG)
            self.state = 1123
            self.match(GraphlyParser.EQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FltContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(GraphlyParser.DOT, 0)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.DIGIT)
            else:
                return self.getToken(GraphlyParser.DIGIT, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_flt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlt" ):
                listener.enterFlt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlt" ):
                listener.exitFlt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlt" ):
                return visitor.visitFlt(self)
            else:
                return visitor.visitChildren(self)




    def flt(self):

        localctx = GraphlyParser.FltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_flt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.DIGIT:
                    self.state = 1125
                    self.match(GraphlyParser.DIGIT)
                    self.state = 1130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1131
                self.match(GraphlyParser.DOT)


            self.state = 1135 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1134
                    self.match(GraphlyParser.DIGIT)

                else:
                    raise NoViableAltException(self)
                self.state = 1137 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.DIGIT)
            else:
                return self.getToken(GraphlyParser.DIGIT, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_itr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItr" ):
                listener.enterItr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItr" ):
                listener.exitItr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItr" ):
                return visitor.visitItr(self)
            else:
                return visitor.visitChildren(self)




    def itr(self):

        localctx = GraphlyParser.ItrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_itr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1139
                    self.match(GraphlyParser.DIGIT)

                else:
                    raise NoViableAltException(self)
                self.state = 1142 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[27] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         




