# Generated from Graphly.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\67")
        buf.write("\u03d4\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \3\2\7\2B\n\2\f\2\16\2E\13\2\3\2\3\2\6")
        buf.write("\2I\n\2\r\2\16\2J\7\2M\n\2\f\2\16\2P\13\2\3\2\3\2\6\2")
        buf.write("T\n\2\r\2\16\2U\3\2\3\2\7\2Z\n\2\f\2\16\2]\13\2\7\2_\n")
        buf.write("\2\f\2\16\2b\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\7\3n\n\3\f\3\16\3q\13\3\5\3s\n\3\3\4\7\4v\n\4\f\4")
        buf.write("\16\4y\13\4\3\4\3\4\3\4\7\4~\n\4\f\4\16\4\u0081\13\4\3")
        buf.write("\5\3\5\6\5\u0085\n\5\r\5\16\5\u0086\3\5\3\5\6\5\u008b")
        buf.write("\n\5\r\5\16\5\u008c\3\5\3\5\6\5\u0091\n\5\r\5\16\5\u0092")
        buf.write("\3\5\3\5\6\5\u0097\n\5\r\5\16\5\u0098\3\5\3\5\6\5\u009d")
        buf.write("\n\5\r\5\16\5\u009e\3\5\3\5\6\5\u00a3\n\5\r\5\16\5\u00a4")
        buf.write("\3\5\3\5\6\5\u00a9\n\5\r\5\16\5\u00aa\3\5\3\5\6\5\u00af")
        buf.write("\n\5\r\5\16\5\u00b0\3\5\3\5\3\5\3\5\7\5\u00b7\n\5\f\5")
        buf.write("\16\5\u00ba\13\5\3\5\3\5\3\6\7\6\u00bf\n\6\f\6\16\6\u00c2")
        buf.write("\13\6\3\6\3\6\6\6\u00c6\n\6\r\6\16\6\u00c7\3\6\3\6\3\6")
        buf.write("\6\6\u00cd\n\6\r\6\16\6\u00ce\3\6\3\6\6\6\u00d3\n\6\r")
        buf.write("\6\16\6\u00d4\3\6\7\6\u00d8\n\6\f\6\16\6\u00db\13\6\3")
        buf.write("\6\7\6\u00de\n\6\f\6\16\6\u00e1\13\6\3\6\3\6\6\6\u00e5")
        buf.write("\n\6\r\6\16\6\u00e6\3\6\3\6\3\6\5\6\u00ec\n\6\3\6\7\6")
        buf.write("\u00ef\n\6\f\6\16\6\u00f2\13\6\3\6\3\6\3\7\3\7\6\7\u00f8")
        buf.write("\n\7\r\7\16\7\u00f9\3\7\3\7\3\7\7\7\u00ff\n\7\f\7\16\7")
        buf.write("\u0102\13\7\3\7\3\7\3\b\3\b\3\b\3\b\5\b\u010a\n\b\3\t")
        buf.write("\7\t\u010d\n\t\f\t\16\t\u0110\13\t\3\t\3\t\6\t\u0114\n")
        buf.write("\t\r\t\16\t\u0115\3\t\3\t\7\t\u011a\n\t\f\t\16\t\u011d")
        buf.write("\13\t\3\t\3\t\7\t\u0121\n\t\f\t\16\t\u0124\13\t\3\t\3")
        buf.write("\t\7\t\u0128\n\t\f\t\16\t\u012b\13\t\3\t\3\t\7\t\u012f")
        buf.write("\n\t\f\t\16\t\u0132\13\t\3\t\3\t\3\n\7\n\u0137\n\n\f\n")
        buf.write("\16\n\u013a\13\n\3\n\3\n\6\n\u013e\n\n\r\n\16\n\u013f")
        buf.write("\3\n\3\n\7\n\u0144\n\n\f\n\16\n\u0147\13\n\3\n\3\n\7\n")
        buf.write("\u014b\n\n\f\n\16\n\u014e\13\n\3\n\3\n\7\n\u0152\n\n\f")
        buf.write("\n\16\n\u0155\13\n\3\n\3\n\6\n\u0159\n\n\r\n\16\n\u015a")
        buf.write("\3\n\3\n\3\13\7\13\u0160\n\13\f\13\16\13\u0163\13\13\3")
        buf.write("\13\3\13\6\13\u0167\n\13\r\13\16\13\u0168\3\13\3\13\7")
        buf.write("\13\u016d\n\13\f\13\16\13\u0170\13\13\3\13\3\13\7\13\u0174")
        buf.write("\n\13\f\13\16\13\u0177\13\13\3\13\3\13\7\13\u017b\n\13")
        buf.write("\f\13\16\13\u017e\13\13\3\13\3\13\7\13\u0182\n\13\f\13")
        buf.write("\16\13\u0185\13\13\3\13\3\13\3\f\7\f\u018a\n\f\f\f\16")
        buf.write("\f\u018d\13\f\3\f\3\f\6\f\u0191\n\f\r\f\16\f\u0192\3\f")
        buf.write("\3\f\7\f\u0197\n\f\f\f\16\f\u019a\13\f\3\f\3\f\7\f\u019e")
        buf.write("\n\f\f\f\16\f\u01a1\13\f\3\f\3\f\3\r\7\r\u01a6\n\r\f\r")
        buf.write("\16\r\u01a9\13\r\3\r\3\r\6\r\u01ad\n\r\r\r\16\r\u01ae")
        buf.write("\3\r\3\r\7\r\u01b3\n\r\f\r\16\r\u01b6\13\r\3\r\3\r\7\r")
        buf.write("\u01ba\n\r\f\r\16\r\u01bd\13\r\3\r\3\r\7\r\u01c1\n\r\f")
        buf.write("\r\16\r\u01c4\13\r\3\r\3\r\7\r\u01c8\n\r\f\r\16\r\u01cb")
        buf.write("\13\r\3\r\3\r\7\r\u01cf\n\r\f\r\16\r\u01d2\13\r\7\r\u01d4")
        buf.write("\n\r\f\r\16\r\u01d7\13\r\3\16\7\16\u01da\n\16\f\16\16")
        buf.write("\16\u01dd\13\16\3\16\3\16\7\16\u01e1\n\16\f\16\16\16\u01e4")
        buf.write("\13\16\3\16\3\16\7\16\u01e8\n\16\f\16\16\16\u01eb\13\16")
        buf.write("\3\16\3\16\7\16\u01ef\n\16\f\16\16\16\u01f2\13\16\3\16")
        buf.write("\3\16\6\16\u01f6\n\16\r\16\16\16\u01f7\3\17\3\17\5\17")
        buf.write("\u01fc\n\17\3\20\7\20\u01ff\n\20\f\20\16\20\u0202\13\20")
        buf.write("\3\20\3\20\6\20\u0206\n\20\r\20\16\20\u0207\3\20\3\20")
        buf.write("\7\20\u020c\n\20\f\20\16\20\u020f\13\20\3\20\3\20\7\20")
        buf.write("\u0213\n\20\f\20\16\20\u0216\13\20\3\20\3\20\3\21\7\21")
        buf.write("\u021b\n\21\f\21\16\21\u021e\13\21\3\21\3\21\6\21\u0222")
        buf.write("\n\21\r\21\16\21\u0223\3\21\3\21\7\21\u0228\n\21\f\21")
        buf.write("\16\21\u022b\13\21\3\21\3\21\7\21\u022f\n\21\f\21\16\21")
        buf.write("\u0232\13\21\3\21\3\21\3\22\7\22\u0237\n\22\f\22\16\22")
        buf.write("\u023a\13\22\3\22\3\22\7\22\u023e\n\22\f\22\16\22\u0241")
        buf.write("\13\22\3\22\3\22\7\22\u0245\n\22\f\22\16\22\u0248\13\22")
        buf.write("\3\22\3\22\7\22\u024c\n\22\f\22\16\22\u024f\13\22\3\22")
        buf.write("\3\22\7\22\u0253\n\22\f\22\16\22\u0256\13\22\3\22\3\22")
        buf.write("\7\22\u025a\n\22\f\22\16\22\u025d\13\22\3\22\3\22\7\22")
        buf.write("\u0261\n\22\f\22\16\22\u0264\13\22\3\22\3\22\3\23\7\23")
        buf.write("\u0269\n\23\f\23\16\23\u026c\13\23\3\23\3\23\6\23\u0270")
        buf.write("\n\23\r\23\16\23\u0271\3\23\3\23\3\24\3\24\3\24\3\24\3")
        buf.write("\24\5\24\u027b\n\24\3\25\7\25\u027e\n\25\f\25\16\25\u0281")
        buf.write("\13\25\3\25\3\25\6\25\u0285\n\25\r\25\16\25\u0286\3\25")
        buf.write("\3\25\7\25\u028b\n\25\f\25\16\25\u028e\13\25\3\25\3\25")
        buf.write("\7\25\u0292\n\25\f\25\16\25\u0295\13\25\3\25\3\25\3\26")
        buf.write("\7\26\u029a\n\26\f\26\16\26\u029d\13\26\3\26\3\26\6\26")
        buf.write("\u02a1\n\26\r\26\16\26\u02a2\3\26\3\26\7\26\u02a7\n\26")
        buf.write("\f\26\16\26\u02aa\13\26\3\26\3\26\7\26\u02ae\n\26\f\26")
        buf.write("\16\26\u02b1\13\26\3\26\3\26\7\26\u02b5\n\26\f\26\16\26")
        buf.write("\u02b8\13\26\3\26\3\26\7\26\u02bc\n\26\f\26\16\26\u02bf")
        buf.write("\13\26\3\26\3\26\3\27\7\27\u02c4\n\27\f\27\16\27\u02c7")
        buf.write("\13\27\3\27\3\27\6\27\u02cb\n\27\r\27\16\27\u02cc\3\27")
        buf.write("\3\27\7\27\u02d1\n\27\f\27\16\27\u02d4\13\27\3\27\3\27")
        buf.write("\7\27\u02d8\n\27\f\27\16\27\u02db\13\27\3\27\3\27\3\30")
        buf.write("\7\30\u02e0\n\30\f\30\16\30\u02e3\13\30\3\30\3\30\6\30")
        buf.write("\u02e7\n\30\r\30\16\30\u02e8\3\30\3\30\7\30\u02ed\n\30")
        buf.write("\f\30\16\30\u02f0\13\30\3\30\3\30\7\30\u02f4\n\30\f\30")
        buf.write("\16\30\u02f7\13\30\3\30\3\30\7\30\u02fb\n\30\f\30\16\30")
        buf.write("\u02fe\13\30\3\30\3\30\7\30\u0302\n\30\f\30\16\30\u0305")
        buf.write("\13\30\3\30\3\30\3\31\7\31\u030a\n\31\f\31\16\31\u030d")
        buf.write("\13\31\3\31\3\31\6\31\u0311\n\31\r\31\16\31\u0312\3\31")
        buf.write("\3\31\7\31\u0317\n\31\f\31\16\31\u031a\13\31\3\31\3\31")
        buf.write("\7\31\u031e\n\31\f\31\16\31\u0321\13\31\3\31\3\31\7\31")
        buf.write("\u0325\n\31\f\31\16\31\u0328\13\31\3\31\3\31\7\31\u032c")
        buf.write("\n\31\f\31\16\31\u032f\13\31\3\31\3\31\3\32\3\32\3\32")
        buf.write("\7\32\u0336\n\32\f\32\16\32\u0339\13\32\3\32\3\32\7\32")
        buf.write("\u033d\n\32\f\32\16\32\u0340\13\32\3\32\3\32\3\32\3\32")
        buf.write("\7\32\u0346\n\32\f\32\16\32\u0349\13\32\3\32\3\32\3\32")
        buf.write("\7\32\u034e\n\32\f\32\16\32\u0351\13\32\3\32\3\32\3\32")
        buf.write("\7\32\u0356\n\32\f\32\16\32\u0359\13\32\3\32\3\32\5\32")
        buf.write("\u035d\n\32\3\32\3\32\7\32\u0361\n\32\f\32\16\32\u0364")
        buf.write("\13\32\3\32\3\32\7\32\u0368\n\32\f\32\16\32\u036b\13\32")
        buf.write("\3\32\3\32\3\32\7\32\u0370\n\32\f\32\16\32\u0373\13\32")
        buf.write("\3\32\3\32\7\32\u0377\n\32\f\32\16\32\u037a\13\32\3\32")
        buf.write("\3\32\3\32\7\32\u037f\n\32\f\32\16\32\u0382\13\32\3\32")
        buf.write("\3\32\7\32\u0386\n\32\f\32\16\32\u0389\13\32\3\32\3\32")
        buf.write("\3\32\7\32\u038e\n\32\f\32\16\32\u0391\13\32\3\32\3\32")
        buf.write("\7\32\u0395\n\32\f\32\16\32\u0398\13\32\3\32\3\32\3\32")
        buf.write("\7\32\u039d\n\32\f\32\16\32\u03a0\13\32\3\32\3\32\7\32")
        buf.write("\u03a4\n\32\f\32\16\32\u03a7\13\32\3\32\7\32\u03aa\n\32")
        buf.write("\f\32\16\32\u03ad\13\32\3\33\3\33\3\33\5\33\u03b2\n\33")
        buf.write("\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u03bc\n")
        buf.write("\35\3\36\3\36\3\36\3\37\7\37\u03c2\n\37\f\37\16\37\u03c5")
        buf.write("\13\37\3\37\5\37\u03c8\n\37\3\37\6\37\u03cb\n\37\r\37")
        buf.write("\16\37\u03cc\3 \6 \u03d0\n \r \16 \u03d1\3 \2\3\62!\2")
        buf.write("\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>\2\7\3\2 \"\3\2+-\3\2)*\4\2##/\63\3\2)-\2\u0451")
        buf.write("\2N\3\2\2\2\4r\3\2\2\2\6\177\3\2\2\2\b\u0082\3\2\2\2\n")
        buf.write("\u00c0\3\2\2\2\f\u00f5\3\2\2\2\16\u0109\3\2\2\2\20\u010e")
        buf.write("\3\2\2\2\22\u0138\3\2\2\2\24\u0161\3\2\2\2\26\u018b\3")
        buf.write("\2\2\2\30\u01a7\3\2\2\2\32\u01db\3\2\2\2\34\u01fb\3\2")
        buf.write("\2\2\36\u0200\3\2\2\2 \u021c\3\2\2\2\"\u0238\3\2\2\2$")
        buf.write("\u026a\3\2\2\2&\u027a\3\2\2\2(\u027f\3\2\2\2*\u029b\3")
        buf.write("\2\2\2,\u02c5\3\2\2\2.\u02e1\3\2\2\2\60\u030b\3\2\2\2")
        buf.write("\62\u035c\3\2\2\2\64\u03b1\3\2\2\2\66\u03b3\3\2\2\28\u03bb")
        buf.write("\3\2\2\2:\u03bd\3\2\2\2<\u03c7\3\2\2\2>\u03cf\3\2\2\2")
        buf.write("@B\7\3\2\2A@\3\2\2\2BE\3\2\2\2CA\3\2\2\2CD\3\2\2\2DF\3")
        buf.write("\2\2\2EC\3\2\2\2FH\5\4\3\2GI\7\3\2\2HG\3\2\2\2IJ\3\2\2")
        buf.write("\2JH\3\2\2\2JK\3\2\2\2KM\3\2\2\2LC\3\2\2\2MP\3\2\2\2N")
        buf.write("L\3\2\2\2NO\3\2\2\2OQ\3\2\2\2PN\3\2\2\2Q`\5\"\22\2RT\7")
        buf.write("\3\2\2SR\3\2\2\2TU\3\2\2\2US\3\2\2\2UV\3\2\2\2VW\3\2\2")
        buf.write("\2W[\5\4\3\2XZ\7\3\2\2YX\3\2\2\2Z]\3\2\2\2[Y\3\2\2\2[")
        buf.write("\\\3\2\2\2\\_\3\2\2\2][\3\2\2\2^S\3\2\2\2_b\3\2\2\2`^")
        buf.write("\3\2\2\2`a\3\2\2\2ac\3\2\2\2b`\3\2\2\2cd\7\2\2\3d\3\3")
        buf.write("\2\2\2es\5\16\b\2fs\5\34\17\2gs\5$\23\2hs\5&\24\2is\5")
        buf.write("\30\r\2js\5\b\5\2ks\5\n\6\2ln\7&\2\2ml\3\2\2\2nq\3\2\2")
        buf.write("\2om\3\2\2\2op\3\2\2\2ps\3\2\2\2qo\3\2\2\2re\3\2\2\2r")
        buf.write("f\3\2\2\2rg\3\2\2\2rh\3\2\2\2ri\3\2\2\2rj\3\2\2\2rk\3")
        buf.write("\2\2\2ro\3\2\2\2s\5\3\2\2\2tv\7&\2\2ut\3\2\2\2vy\3\2\2")
        buf.write("\2wu\3\2\2\2wx\3\2\2\2xz\3\2\2\2yw\3\2\2\2z{\5\4\3\2{")
        buf.write("|\7\3\2\2|~\3\2\2\2}w\3\2\2\2~\u0081\3\2\2\2\177}\3\2")
        buf.write("\2\2\177\u0080\3\2\2\2\u0080\7\3\2\2\2\u0081\177\3\2\2")
        buf.write("\2\u0082\u0084\7\4\2\2\u0083\u0085\7&\2\2\u0084\u0083")
        buf.write("\3\2\2\2\u0085\u0086\3\2\2\2\u0086\u0084\3\2\2\2\u0086")
        buf.write("\u0087\3\2\2\2\u0087\u0088\3\2\2\2\u0088\u008a\7\67\2")
        buf.write("\2\u0089\u008b\7&\2\2\u008a\u0089\3\2\2\2\u008b\u008c")
        buf.write("\3\2\2\2\u008c\u008a\3\2\2\2\u008c\u008d\3\2\2\2\u008d")
        buf.write("\u008e\3\2\2\2\u008e\u0090\7\5\2\2\u008f\u0091\7&\2\2")
        buf.write("\u0090\u008f\3\2\2\2\u0091\u0092\3\2\2\2\u0092\u0090\3")
        buf.write("\2\2\2\u0092\u0093\3\2\2\2\u0093\u0094\3\2\2\2\u0094\u0096")
        buf.write("\5\62\32\2\u0095\u0097\7&\2\2\u0096\u0095\3\2\2\2\u0097")
        buf.write("\u0098\3\2\2\2\u0098\u0096\3\2\2\2\u0098\u0099\3\2\2\2")
        buf.write("\u0099\u009a\3\2\2\2\u009a\u009c\7\6\2\2\u009b\u009d\7")
        buf.write("&\2\2\u009c\u009b\3\2\2\2\u009d\u009e\3\2\2\2\u009e\u009c")
        buf.write("\3\2\2\2\u009e\u009f\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0")
        buf.write("\u00a2\5\62\32\2\u00a1\u00a3\7&\2\2\u00a2\u00a1\3\2\2")
        buf.write("\2\u00a3\u00a4\3\2\2\2\u00a4\u00a2\3\2\2\2\u00a4\u00a5")
        buf.write("\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00a8\7\7\2\2\u00a7")
        buf.write("\u00a9\7&\2\2\u00a8\u00a7\3\2\2\2\u00a9\u00aa\3\2\2\2")
        buf.write("\u00aa\u00a8\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab\u00ac\3")
        buf.write("\2\2\2\u00ac\u00ae\5\62\32\2\u00ad\u00af\7&\2\2\u00ae")
        buf.write("\u00ad\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00ae\3\2\2\2")
        buf.write("\u00b0\u00b1\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00b3\7")
        buf.write("\b\2\2\u00b3\u00b4\7\3\2\2\u00b4\u00b8\5\6\4\2\u00b5\u00b7")
        buf.write("\7&\2\2\u00b6\u00b5\3\2\2\2\u00b7\u00ba\3\2\2\2\u00b8")
        buf.write("\u00b6\3\2\2\2\u00b8\u00b9\3\2\2\2\u00b9\u00bb\3\2\2\2")
        buf.write("\u00ba\u00b8\3\2\2\2\u00bb\u00bc\7\t\2\2\u00bc\t\3\2\2")
        buf.write("\2\u00bd\u00bf\7&\2\2\u00be\u00bd\3\2\2\2\u00bf\u00c2")
        buf.write("\3\2\2\2\u00c0\u00be\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1")
        buf.write("\u00c3\3\2\2\2\u00c2\u00c0\3\2\2\2\u00c3\u00c5\7\n\2\2")
        buf.write("\u00c4\u00c6\7&\2\2\u00c5\u00c4\3\2\2\2\u00c6\u00c7\3")
        buf.write("\2\2\2\u00c7\u00c5\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00c9")
        buf.write("\3\2\2\2\u00c9\u00d9\5\f\7\2\u00ca\u00cc\7\13\2\2\u00cb")
        buf.write("\u00cd\7&\2\2\u00cc\u00cb\3\2\2\2\u00cd\u00ce\3\2\2\2")
        buf.write("\u00ce\u00cc\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d0\3")
        buf.write("\2\2\2\u00d0\u00d2\7\n\2\2\u00d1\u00d3\7&\2\2\u00d2\u00d1")
        buf.write("\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d4")
        buf.write("\u00d5\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6\u00d8\5\f\7\2")
        buf.write("\u00d7\u00ca\3\2\2\2\u00d8\u00db\3\2\2\2\u00d9\u00d7\3")
        buf.write("\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00df\3\2\2\2\u00db\u00d9")
        buf.write("\3\2\2\2\u00dc\u00de\7&\2\2\u00dd\u00dc\3\2\2\2\u00de")
        buf.write("\u00e1\3\2\2\2\u00df\u00dd\3\2\2\2\u00df\u00e0\3\2\2\2")
        buf.write("\u00e0\u00eb\3\2\2\2\u00e1\u00df\3\2\2\2\u00e2\u00e4\7")
        buf.write("\13\2\2\u00e3\u00e5\7&\2\2\u00e4\u00e3\3\2\2\2\u00e5\u00e6")
        buf.write("\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7")
        buf.write("\u00e8\3\2\2\2\u00e8\u00e9\7\b\2\2\u00e9\u00ea\7\3\2\2")
        buf.write("\u00ea\u00ec\5\6\4\2\u00eb\u00e2\3\2\2\2\u00eb\u00ec\3")
        buf.write("\2\2\2\u00ec\u00f0\3\2\2\2\u00ed\u00ef\7&\2\2\u00ee\u00ed")
        buf.write("\3\2\2\2\u00ef\u00f2\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f0")
        buf.write("\u00f1\3\2\2\2\u00f1\u00f3\3\2\2\2\u00f2\u00f0\3\2\2\2")
        buf.write("\u00f3\u00f4\7\t\2\2\u00f4\13\3\2\2\2\u00f5\u00f7\5\62")
        buf.write("\32\2\u00f6\u00f8\7&\2\2\u00f7\u00f6\3\2\2\2\u00f8\u00f9")
        buf.write("\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa")
        buf.write("\u00fb\3\2\2\2\u00fb\u00fc\7\b\2\2\u00fc\u0100\7\3\2\2")
        buf.write("\u00fd\u00ff\7&\2\2\u00fe\u00fd\3\2\2\2\u00ff\u0102\3")
        buf.write("\2\2\2\u0100\u00fe\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u0103")
        buf.write("\3\2\2\2\u0102\u0100\3\2\2\2\u0103\u0104\5\6\4\2\u0104")
        buf.write("\r\3\2\2\2\u0105\u010a\5\20\t\2\u0106\u010a\5\22\n\2\u0107")
        buf.write("\u010a\5\24\13\2\u0108\u010a\5\26\f\2\u0109\u0105\3\2")
        buf.write("\2\2\u0109\u0106\3\2\2\2\u0109\u0107\3\2\2\2\u0109\u0108")
        buf.write("\3\2\2\2\u010a\17\3\2\2\2\u010b\u010d\7&\2\2\u010c\u010b")
        buf.write("\3\2\2\2\u010d\u0110\3\2\2\2\u010e\u010c\3\2\2\2\u010e")
        buf.write("\u010f\3\2\2\2\u010f\u0111\3\2\2\2\u0110\u010e\3\2\2\2")
        buf.write("\u0111\u0113\7\f\2\2\u0112\u0114\7&\2\2\u0113\u0112\3")
        buf.write("\2\2\2\u0114\u0115\3\2\2\2\u0115\u0113\3\2\2\2\u0115\u0116")
        buf.write("\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u011b\7\67\2\2\u0118")
        buf.write("\u011a\7&\2\2\u0119\u0118\3\2\2\2\u011a\u011d\3\2\2\2")
        buf.write("\u011b\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011e\3")
        buf.write("\2\2\2\u011d\u011b\3\2\2\2\u011e\u0122\7\r\2\2\u011f\u0121")
        buf.write("\7&\2\2\u0120\u011f\3\2\2\2\u0121\u0124\3\2\2\2\u0122")
        buf.write("\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0125\3\2\2\2")
        buf.write("\u0124\u0122\3\2\2\2\u0125\u0129\5\62\32\2\u0126\u0128")
        buf.write("\7&\2\2\u0127\u0126\3\2\2\2\u0128\u012b\3\2\2\2\u0129")
        buf.write("\u0127\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012c\3\2\2\2")
        buf.write("\u012b\u0129\3\2\2\2\u012c\u0130\7\16\2\2\u012d\u012f")
        buf.write("\7&\2\2\u012e\u012d\3\2\2\2\u012f\u0132\3\2\2\2\u0130")
        buf.write("\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0133\3\2\2\2")
        buf.write("\u0132\u0130\3\2\2\2\u0133\u0134\5\62\32\2\u0134\21\3")
        buf.write("\2\2\2\u0135\u0137\7&\2\2\u0136\u0135\3\2\2\2\u0137\u013a")
        buf.write("\3\2\2\2\u0138\u0136\3\2\2\2\u0138\u0139\3\2\2\2\u0139")
        buf.write("\u013b\3\2\2\2\u013a\u0138\3\2\2\2\u013b\u013d\7\17\2")
        buf.write("\2\u013c\u013e\7&\2\2\u013d\u013c\3\2\2\2\u013e\u013f")
        buf.write("\3\2\2\2\u013f\u013d\3\2\2\2\u013f\u0140\3\2\2\2\u0140")
        buf.write("\u0141\3\2\2\2\u0141\u0145\7\67\2\2\u0142\u0144\7&\2\2")
        buf.write("\u0143\u0142\3\2\2\2\u0144\u0147\3\2\2\2\u0145\u0143\3")
        buf.write("\2\2\2\u0145\u0146\3\2\2\2\u0146\u0148\3\2\2\2\u0147\u0145")
        buf.write("\3\2\2\2\u0148\u014c\7\r\2\2\u0149\u014b\7&\2\2\u014a")
        buf.write("\u0149\3\2\2\2\u014b\u014e\3\2\2\2\u014c\u014a\3\2\2\2")
        buf.write("\u014c\u014d\3\2\2\2\u014d\u014f\3\2\2\2\u014e\u014c\3")
        buf.write("\2\2\2\u014f\u0153\7\67\2\2\u0150\u0152\7&\2\2\u0151\u0150")
        buf.write("\3\2\2\2\u0152\u0155\3\2\2\2\u0153\u0151\3\2\2\2\u0153")
        buf.write("\u0154\3\2\2\2\u0154\u0156\3\2\2\2\u0155\u0153\3\2\2\2")
        buf.write("\u0156\u0158\7\16\2\2\u0157\u0159\7&\2\2\u0158\u0157\3")
        buf.write("\2\2\2\u0159\u015a\3\2\2\2\u015a\u0158\3\2\2\2\u015a\u015b")
        buf.write("\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u015d\7\67\2\2\u015d")
        buf.write("\23\3\2\2\2\u015e\u0160\7&\2\2\u015f\u015e\3\2\2\2\u0160")
        buf.write("\u0163\3\2\2\2\u0161\u015f\3\2\2\2\u0161\u0162\3\2\2\2")
        buf.write("\u0162\u0164\3\2\2\2\u0163\u0161\3\2\2\2\u0164\u0166\7")
        buf.write("\20\2\2\u0165\u0167\7&\2\2\u0166\u0165\3\2\2\2\u0167\u0168")
        buf.write("\3\2\2\2\u0168\u0166\3\2\2\2\u0168\u0169\3\2\2\2\u0169")
        buf.write("\u016a\3\2\2\2\u016a\u016e\7\67\2\2\u016b\u016d\7&\2\2")
        buf.write("\u016c\u016b\3\2\2\2\u016d\u0170\3\2\2\2\u016e\u016c\3")
        buf.write("\2\2\2\u016e\u016f\3\2\2\2\u016f\u0171\3\2\2\2\u0170\u016e")
        buf.write("\3\2\2\2\u0171\u0175\7\r\2\2\u0172\u0174\7&\2\2\u0173")
        buf.write("\u0172\3\2\2\2\u0174\u0177\3\2\2\2\u0175\u0173\3\2\2\2")
        buf.write("\u0175\u0176\3\2\2\2\u0176\u0178\3\2\2\2\u0177\u0175\3")
        buf.write("\2\2\2\u0178\u017c\7\67\2\2\u0179\u017b\7&\2\2\u017a\u0179")
        buf.write("\3\2\2\2\u017b\u017e\3\2\2\2\u017c\u017a\3\2\2\2\u017c")
        buf.write("\u017d\3\2\2\2\u017d\u017f\3\2\2\2\u017e\u017c\3\2\2\2")
        buf.write("\u017f\u0183\7\16\2\2\u0180\u0182\7&\2\2\u0181\u0180\3")
        buf.write("\2\2\2\u0182\u0185\3\2\2\2\u0183\u0181\3\2\2\2\u0183\u0184")
        buf.write("\3\2\2\2\u0184\u0186\3\2\2\2\u0185\u0183\3\2\2\2\u0186")
        buf.write("\u0187\5\62\32\2\u0187\25\3\2\2\2\u0188\u018a\7&\2\2\u0189")
        buf.write("\u0188\3\2\2\2\u018a\u018d\3\2\2\2\u018b\u0189\3\2\2\2")
        buf.write("\u018b\u018c\3\2\2\2\u018c\u018e\3\2\2\2\u018d\u018b\3")
        buf.write("\2\2\2\u018e\u0190\7\21\2\2\u018f\u0191\7&\2\2\u0190\u018f")
        buf.write("\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0190\3\2\2\2\u0192")
        buf.write("\u0193\3\2\2\2\u0193\u0194\3\2\2\2\u0194\u0198\7\67\2")
        buf.write("\2\u0195\u0197\7&\2\2\u0196\u0195\3\2\2\2\u0197\u019a")
        buf.write("\3\2\2\2\u0198\u0196\3\2\2\2\u0198\u0199\3\2\2\2\u0199")
        buf.write("\u019b\3\2\2\2\u019a\u0198\3\2\2\2\u019b\u019f\7\r\2\2")
        buf.write("\u019c\u019e\7&\2\2\u019d\u019c\3\2\2\2\u019e\u01a1\3")
        buf.write("\2\2\2\u019f\u019d\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a2")
        buf.write("\3\2\2\2\u01a1\u019f\3\2\2\2\u01a2\u01a3\7\67\2\2\u01a3")
        buf.write("\27\3\2\2\2\u01a4\u01a6\7&\2\2\u01a5\u01a4\3\2\2\2\u01a6")
        buf.write("\u01a9\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a7\u01a8\3\2\2\2")
        buf.write("\u01a8\u01aa\3\2\2\2\u01a9\u01a7\3\2\2\2\u01aa\u01ac\7")
        buf.write("\22\2\2\u01ab\u01ad\7&\2\2\u01ac\u01ab\3\2\2\2\u01ad\u01ae")
        buf.write("\3\2\2\2\u01ae\u01ac\3\2\2\2\u01ae\u01af\3\2\2\2\u01af")
        buf.write("\u01b0\3\2\2\2\u01b0\u01b4\7\67\2\2\u01b1\u01b3\7&\2\2")
        buf.write("\u01b2\u01b1\3\2\2\2\u01b3\u01b6\3\2\2\2\u01b4\u01b2\3")
        buf.write("\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\u01b7\3\2\2\2\u01b6\u01b4")
        buf.write("\3\2\2\2\u01b7\u01bb\7\r\2\2\u01b8\u01ba\7&\2\2\u01b9")
        buf.write("\u01b8\3\2\2\2\u01ba\u01bd\3\2\2\2\u01bb\u01b9\3\2\2\2")
        buf.write("\u01bb\u01bc\3\2\2\2\u01bc\u01be\3\2\2\2\u01bd\u01bb\3")
        buf.write("\2\2\2\u01be\u01c2\7\67\2\2\u01bf\u01c1\7&\2\2\u01c0\u01bf")
        buf.write("\3\2\2\2\u01c1\u01c4\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2")
        buf.write("\u01c3\3\2\2\2\u01c3\u01d5\3\2\2\2\u01c4\u01c2\3\2\2\2")
        buf.write("\u01c5\u01c9\7\16\2\2\u01c6\u01c8\7&\2\2\u01c7\u01c6\3")
        buf.write("\2\2\2\u01c8\u01cb\3\2\2\2\u01c9\u01c7\3\2\2\2\u01c9\u01ca")
        buf.write("\3\2\2\2\u01ca\u01cc\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cc")
        buf.write("\u01d0\7\67\2\2\u01cd\u01cf\7&\2\2\u01ce\u01cd\3\2\2\2")
        buf.write("\u01cf\u01d2\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d0\u01d1\3")
        buf.write("\2\2\2\u01d1\u01d4\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d3\u01c5")
        buf.write("\3\2\2\2\u01d4\u01d7\3\2\2\2\u01d5\u01d3\3\2\2\2\u01d5")
        buf.write("\u01d6\3\2\2\2\u01d6\31\3\2\2\2\u01d7\u01d5\3\2\2\2\u01d8")
        buf.write("\u01da\7&\2\2\u01d9\u01d8\3\2\2\2\u01da\u01dd\3\2\2\2")
        buf.write("\u01db\u01d9\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc\u01de\3")
        buf.write("\2\2\2\u01dd\u01db\3\2\2\2\u01de\u01e2\7\67\2\2\u01df")
        buf.write("\u01e1\7&\2\2\u01e0\u01df\3\2\2\2\u01e1\u01e4\3\2\2\2")
        buf.write("\u01e2\u01e0\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e5\3")
        buf.write("\2\2\2\u01e4\u01e2\3\2\2\2\u01e5\u01e9\7\23\2\2\u01e6")
        buf.write("\u01e8\7&\2\2\u01e7\u01e6\3\2\2\2\u01e8\u01eb\3\2\2\2")
        buf.write("\u01e9\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01ec\3")
        buf.write("\2\2\2\u01eb\u01e9\3\2\2\2\u01ec\u01f0\5\62\32\2\u01ed")
        buf.write("\u01ef\7&\2\2\u01ee\u01ed\3\2\2\2\u01ef\u01f2\3\2\2\2")
        buf.write("\u01f0\u01ee\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f3\3")
        buf.write("\2\2\2\u01f2\u01f0\3\2\2\2\u01f3\u01f5\7\24\2\2\u01f4")
        buf.write("\u01f6\7&\2\2\u01f5\u01f4\3\2\2\2\u01f6\u01f7\3\2\2\2")
        buf.write("\u01f7\u01f5\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\33\3\2")
        buf.write("\2\2\u01f9\u01fc\5\36\20\2\u01fa\u01fc\5 \21\2\u01fb\u01f9")
        buf.write("\3\2\2\2\u01fb\u01fa\3\2\2\2\u01fc\35\3\2\2\2\u01fd\u01ff")
        buf.write("\7&\2\2\u01fe\u01fd\3\2\2\2\u01ff\u0202\3\2\2\2\u0200")
        buf.write("\u01fe\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0203\3\2\2\2")
        buf.write("\u0202\u0200\3\2\2\2\u0203\u0205\7\25\2\2\u0204\u0206")
        buf.write("\7&\2\2\u0205\u0204\3\2\2\2\u0206\u0207\3\2\2\2\u0207")
        buf.write("\u0205\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u0209\3\2\2\2")
        buf.write("\u0209\u020d\7\67\2\2\u020a\u020c\7&\2\2\u020b\u020a\3")
        buf.write("\2\2\2\u020c\u020f\3\2\2\2\u020d\u020b\3\2\2\2\u020d\u020e")
        buf.write("\3\2\2\2\u020e\u0210\3\2\2\2\u020f\u020d\3\2\2\2\u0210")
        buf.write("\u0214\7\r\2\2\u0211\u0213\7&\2\2\u0212\u0211\3\2\2\2")
        buf.write("\u0213\u0216\3\2\2\2\u0214\u0212\3\2\2\2\u0214\u0215\3")
        buf.write("\2\2\2\u0215\u0217\3\2\2\2\u0216\u0214\3\2\2\2\u0217\u0218")
        buf.write("\5\62\32\2\u0218\37\3\2\2\2\u0219\u021b\7&\2\2\u021a\u0219")
        buf.write("\3\2\2\2\u021b\u021e\3\2\2\2\u021c\u021a\3\2\2\2\u021c")
        buf.write("\u021d\3\2\2\2\u021d\u021f\3\2\2\2\u021e\u021c\3\2\2\2")
        buf.write("\u021f\u0221\7\26\2\2\u0220\u0222\7&\2\2\u0221\u0220\3")
        buf.write("\2\2\2\u0222\u0223\3\2\2\2\u0223\u0221\3\2\2\2\u0223\u0224")
        buf.write("\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0229\7\67\2\2\u0226")
        buf.write("\u0228\7&\2\2\u0227\u0226\3\2\2\2\u0228\u022b\3\2\2\2")
        buf.write("\u0229\u0227\3\2\2\2\u0229\u022a\3\2\2\2\u022a\u022c\3")
        buf.write("\2\2\2\u022b\u0229\3\2\2\2\u022c\u0230\7\r\2\2\u022d\u022f")
        buf.write("\7&\2\2\u022e\u022d\3\2\2\2\u022f\u0232\3\2\2\2\u0230")
        buf.write("\u022e\3\2\2\2\u0230\u0231\3\2\2\2\u0231\u0233\3\2\2\2")
        buf.write("\u0232\u0230\3\2\2\2\u0233\u0234\5\62\32\2\u0234!\3\2")
        buf.write("\2\2\u0235\u0237\7&\2\2\u0236\u0235\3\2\2\2\u0237\u023a")
        buf.write("\3\2\2\2\u0238\u0236\3\2\2\2\u0238\u0239\3\2\2\2\u0239")
        buf.write("\u023b\3\2\2\2\u023a\u0238\3\2\2\2\u023b\u023f\7\27\2")
        buf.write("\2\u023c\u023e\7&\2\2\u023d\u023c\3\2\2\2\u023e\u0241")
        buf.write("\3\2\2\2\u023f\u023d\3\2\2\2\u023f\u0240\3\2\2\2\u0240")
        buf.write("\u0242\3\2\2\2\u0241\u023f\3\2\2\2\u0242\u0246\7\r\2\2")
        buf.write("\u0243\u0245\7&\2\2\u0244\u0243\3\2\2\2\u0245\u0248\3")
        buf.write("\2\2\2\u0246\u0244\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0249")
        buf.write("\3\2\2\2\u0248\u0246\3\2\2\2\u0249\u024d\5\62\32\2\u024a")
        buf.write("\u024c\7&\2\2\u024b\u024a\3\2\2\2\u024c\u024f\3\2\2\2")
        buf.write("\u024d\u024b\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u0250\3")
        buf.write("\2\2\2\u024f\u024d\3\2\2\2\u0250\u0254\7\16\2\2\u0251")
        buf.write("\u0253\7&\2\2\u0252\u0251\3\2\2\2\u0253\u0256\3\2\2\2")
        buf.write("\u0254\u0252\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0257\3")
        buf.write("\2\2\2\u0256\u0254\3\2\2\2\u0257\u025b\5\62\32\2\u0258")
        buf.write("\u025a\7&\2\2\u0259\u0258\3\2\2\2\u025a\u025d\3\2\2\2")
        buf.write("\u025b\u0259\3\2\2\2\u025b\u025c\3\2\2\2\u025c\u025e\3")
        buf.write("\2\2\2\u025d\u025b\3\2\2\2\u025e\u0262\7\16\2\2\u025f")
        buf.write("\u0261\7&\2\2\u0260\u025f\3\2\2\2\u0261\u0264\3\2\2\2")
        buf.write("\u0262\u0260\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0265\3")
        buf.write("\2\2\2\u0264\u0262\3\2\2\2\u0265\u0266\7\64\2\2\u0266")
        buf.write("#\3\2\2\2\u0267\u0269\7&\2\2\u0268\u0267\3\2\2\2\u0269")
        buf.write("\u026c\3\2\2\2\u026a\u0268\3\2\2\2\u026a\u026b\3\2\2\2")
        buf.write("\u026b\u026d\3\2\2\2\u026c\u026a\3\2\2\2\u026d\u026f\7")
        buf.write("\30\2\2\u026e\u0270\7&\2\2\u026f\u026e\3\2\2\2\u0270\u0271")
        buf.write("\3\2\2\2\u0271\u026f\3\2\2\2\u0271\u0272\3\2\2\2\u0272")
        buf.write("\u0273\3\2\2\2\u0273\u0274\7\67\2\2\u0274%\3\2\2\2\u0275")
        buf.write("\u027b\5(\25\2\u0276\u027b\5*\26\2\u0277\u027b\5,\27\2")
        buf.write("\u0278\u027b\5.\30\2\u0279\u027b\5\60\31\2\u027a\u0275")
        buf.write("\3\2\2\2\u027a\u0276\3\2\2\2\u027a\u0277\3\2\2\2\u027a")
        buf.write("\u0278\3\2\2\2\u027a\u0279\3\2\2\2\u027b\'\3\2\2\2\u027c")
        buf.write("\u027e\7&\2\2\u027d\u027c\3\2\2\2\u027e\u0281\3\2\2\2")
        buf.write("\u027f\u027d\3\2\2\2\u027f\u0280\3\2\2\2\u0280\u0282\3")
        buf.write("\2\2\2\u0281\u027f\3\2\2\2\u0282\u0284\7\31\2\2\u0283")
        buf.write("\u0285\7&\2\2\u0284\u0283\3\2\2\2\u0285\u0286\3\2\2\2")
        buf.write("\u0286\u0284\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0288\3")
        buf.write("\2\2\2\u0288\u028c\7\67\2\2\u0289\u028b\7&\2\2\u028a\u0289")
        buf.write("\3\2\2\2\u028b\u028e\3\2\2\2\u028c\u028a\3\2\2\2\u028c")
        buf.write("\u028d\3\2\2\2\u028d\u028f\3\2\2\2\u028e\u028c\3\2\2\2")
        buf.write("\u028f\u0293\7\r\2\2\u0290\u0292\7&\2\2\u0291\u0290\3")
        buf.write("\2\2\2\u0292\u0295\3\2\2\2\u0293\u0291\3\2\2\2\u0293\u0294")
        buf.write("\3\2\2\2\u0294\u0296\3\2\2\2\u0295\u0293\3\2\2\2\u0296")
        buf.write("\u0297\7\64\2\2\u0297)\3\2\2\2\u0298\u029a\7&\2\2\u0299")
        buf.write("\u0298\3\2\2\2\u029a\u029d\3\2\2\2\u029b\u0299\3\2\2\2")
        buf.write("\u029b\u029c\3\2\2\2\u029c\u029e\3\2\2\2\u029d\u029b\3")
        buf.write("\2\2\2\u029e\u02a0\7\32\2\2\u029f\u02a1\7&\2\2\u02a0\u029f")
        buf.write("\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a2")
        buf.write("\u02a3\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02a8\7\67\2")
        buf.write("\2\u02a5\u02a7\7&\2\2\u02a6\u02a5\3\2\2\2\u02a7\u02aa")
        buf.write("\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9")
        buf.write("\u02ab\3\2\2\2\u02aa\u02a8\3\2\2\2\u02ab\u02af\7\r\2\2")
        buf.write("\u02ac\u02ae\7&\2\2\u02ad\u02ac\3\2\2\2\u02ae\u02b1\3")
        buf.write("\2\2\2\u02af\u02ad\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b2")
        buf.write("\3\2\2\2\u02b1\u02af\3\2\2\2\u02b2\u02b6\5\62\32\2\u02b3")
        buf.write("\u02b5\7&\2\2\u02b4\u02b3\3\2\2\2\u02b5\u02b8\3\2\2\2")
        buf.write("\u02b6\u02b4\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02b9\3")
        buf.write("\2\2\2\u02b8\u02b6\3\2\2\2\u02b9\u02bd\7\16\2\2\u02ba")
        buf.write("\u02bc\7&\2\2\u02bb\u02ba\3\2\2\2\u02bc\u02bf\3\2\2\2")
        buf.write("\u02bd\u02bb\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02c0\3")
        buf.write("\2\2\2\u02bf\u02bd\3\2\2\2\u02c0\u02c1\5\62\32\2\u02c1")
        buf.write("+\3\2\2\2\u02c2\u02c4\7&\2\2\u02c3\u02c2\3\2\2\2\u02c4")
        buf.write("\u02c7\3\2\2\2\u02c5\u02c3\3\2\2\2\u02c5\u02c6\3\2\2\2")
        buf.write("\u02c6\u02c8\3\2\2\2\u02c7\u02c5\3\2\2\2\u02c8\u02ca\7")
        buf.write("\33\2\2\u02c9\u02cb\7&\2\2\u02ca\u02c9\3\2\2\2\u02cb\u02cc")
        buf.write("\3\2\2\2\u02cc\u02ca\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd")
        buf.write("\u02ce\3\2\2\2\u02ce\u02d2\7\67\2\2\u02cf\u02d1\7&\2\2")
        buf.write("\u02d0\u02cf\3\2\2\2\u02d1\u02d4\3\2\2\2\u02d2\u02d0\3")
        buf.write("\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d5\3\2\2\2\u02d4\u02d2")
        buf.write("\3\2\2\2\u02d5\u02d9\7\r\2\2\u02d6\u02d8\7&\2\2\u02d7")
        buf.write("\u02d6\3\2\2\2\u02d8\u02db\3\2\2\2\u02d9\u02d7\3\2\2\2")
        buf.write("\u02d9\u02da\3\2\2\2\u02da\u02dc\3\2\2\2\u02db\u02d9\3")
        buf.write("\2\2\2\u02dc\u02dd\7\67\2\2\u02dd-\3\2\2\2\u02de\u02e0")
        buf.write("\7&\2\2\u02df\u02de\3\2\2\2\u02e0\u02e3\3\2\2\2\u02e1")
        buf.write("\u02df\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e4\3\2\2\2")
        buf.write("\u02e3\u02e1\3\2\2\2\u02e4\u02e6\7\34\2\2\u02e5\u02e7")
        buf.write("\7&\2\2\u02e6\u02e5\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8")
        buf.write("\u02e6\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02ea\3\2\2\2")
        buf.write("\u02ea\u02ee\7\67\2\2\u02eb\u02ed\7&\2\2\u02ec\u02eb\3")
        buf.write("\2\2\2\u02ed\u02f0\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ee\u02ef")
        buf.write("\3\2\2\2\u02ef\u02f1\3\2\2\2\u02f0\u02ee\3\2\2\2\u02f1")
        buf.write("\u02f5\7\r\2\2\u02f2\u02f4\7&\2\2\u02f3\u02f2\3\2\2\2")
        buf.write("\u02f4\u02f7\3\2\2\2\u02f5\u02f3\3\2\2\2\u02f5\u02f6\3")
        buf.write("\2\2\2\u02f6\u02f8\3\2\2\2\u02f7\u02f5\3\2\2\2\u02f8\u02fc")
        buf.write("\5\62\32\2\u02f9\u02fb\7&\2\2\u02fa\u02f9\3\2\2\2\u02fb")
        buf.write("\u02fe\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fc\u02fd\3\2\2\2")
        buf.write("\u02fd\u02ff\3\2\2\2\u02fe\u02fc\3\2\2\2\u02ff\u0303\7")
        buf.write("\16\2\2\u0300\u0302\7&\2\2\u0301\u0300\3\2\2\2\u0302\u0305")
        buf.write("\3\2\2\2\u0303\u0301\3\2\2\2\u0303\u0304\3\2\2\2\u0304")
        buf.write("\u0306\3\2\2\2\u0305\u0303\3\2\2\2\u0306\u0307\7\67\2")
        buf.write("\2\u0307/\3\2\2\2\u0308\u030a\7&\2\2\u0309\u0308\3\2\2")
        buf.write("\2\u030a\u030d\3\2\2\2\u030b\u0309\3\2\2\2\u030b\u030c")
        buf.write("\3\2\2\2\u030c\u030e\3\2\2\2\u030d\u030b\3\2\2\2\u030e")
        buf.write("\u0310\7\35\2\2\u030f\u0311\7&\2\2\u0310\u030f\3\2\2\2")
        buf.write("\u0311\u0312\3\2\2\2\u0312\u0310\3\2\2\2\u0312\u0313\3")
        buf.write("\2\2\2\u0313\u0314\3\2\2\2\u0314\u0318\7\67\2\2\u0315")
        buf.write("\u0317\7&\2\2\u0316\u0315\3\2\2\2\u0317\u031a\3\2\2\2")
        buf.write("\u0318\u0316\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u031b\3")
        buf.write("\2\2\2\u031a\u0318\3\2\2\2\u031b\u031f\7\r\2\2\u031c\u031e")
        buf.write("\7&\2\2\u031d\u031c\3\2\2\2\u031e\u0321\3\2\2\2\u031f")
        buf.write("\u031d\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0322\3\2\2\2")
        buf.write("\u0321\u031f\3\2\2\2\u0322\u0326\5\62\32\2\u0323\u0325")
        buf.write("\7&\2\2\u0324\u0323\3\2\2\2\u0325\u0328\3\2\2\2\u0326")
        buf.write("\u0324\3\2\2\2\u0326\u0327\3\2\2\2\u0327\u0329\3\2\2\2")
        buf.write("\u0328\u0326\3\2\2\2\u0329\u032d\7\16\2\2\u032a\u032c")
        buf.write("\7&\2\2\u032b\u032a\3\2\2\2\u032c\u032f\3\2\2\2\u032d")
        buf.write("\u032b\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u0330\3\2\2\2")
        buf.write("\u032f\u032d\3\2\2\2\u0330\u0331\7\67\2\2\u0331\61\3\2")
        buf.write("\2\2\u0332\u0333\b\32\1\2\u0333\u0337\7\36\2\2\u0334\u0336")
        buf.write("\7&\2\2\u0335\u0334\3\2\2\2\u0336\u0339\3\2\2\2\u0337")
        buf.write("\u0335\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u033a\3\2\2\2")
        buf.write("\u0339\u0337\3\2\2\2\u033a\u033e\5\62\32\2\u033b\u033d")
        buf.write("\7&\2\2\u033c\u033b\3\2\2\2\u033d\u0340\3\2\2\2\u033e")
        buf.write("\u033c\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0341\3\2\2\2")
        buf.write("\u0340\u033e\3\2\2\2\u0341\u0342\7\37\2\2\u0342\u035d")
        buf.write("\3\2\2\2\u0343\u0347\t\2\2\2\u0344\u0346\7&\2\2\u0345")
        buf.write("\u0344\3\2\2\2\u0346\u0349\3\2\2\2\u0347\u0345\3\2\2\2")
        buf.write("\u0347\u0348\3\2\2\2\u0348\u034a\3\2\2\2\u0349\u0347\3")
        buf.write("\2\2\2\u034a\u035d\5\62\32\13\u034b\u034f\7*\2\2\u034c")
        buf.write("\u034e\7&\2\2\u034d\u034c\3\2\2\2\u034e\u0351\3\2\2\2")
        buf.write("\u034f\u034d\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0352\3")
        buf.write("\2\2\2\u0351\u034f\3\2\2\2\u0352\u035d\5\62\32\n\u0353")
        buf.write("\u0357\7.\2\2\u0354\u0356\7&\2\2\u0355\u0354\3\2\2\2\u0356")
        buf.write("\u0359\3\2\2\2\u0357\u0355\3\2\2\2\u0357\u0358\3\2\2\2")
        buf.write("\u0358\u035a\3\2\2\2\u0359\u0357\3\2\2\2\u035a\u035d\5")
        buf.write("\62\32\6\u035b\u035d\5\64\33\2\u035c\u0332\3\2\2\2\u035c")
        buf.write("\u0343\3\2\2\2\u035c\u034b\3\2\2\2\u035c\u0353\3\2\2\2")
        buf.write("\u035c\u035b\3\2\2\2\u035d\u03ab\3\2\2\2\u035e\u0362\f")
        buf.write("\t\2\2\u035f\u0361\7&\2\2\u0360\u035f\3\2\2\2\u0361\u0364")
        buf.write("\3\2\2\2\u0362\u0360\3\2\2\2\u0362\u0363\3\2\2\2\u0363")
        buf.write("\u0365\3\2\2\2\u0364\u0362\3\2\2\2\u0365\u0369\t\3\2\2")
        buf.write("\u0366\u0368\7&\2\2\u0367\u0366\3\2\2\2\u0368\u036b\3")
        buf.write("\2\2\2\u0369\u0367\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036c")
        buf.write("\3\2\2\2\u036b\u0369\3\2\2\2\u036c\u03aa\5\62\32\n\u036d")
        buf.write("\u0371\f\b\2\2\u036e\u0370\7&\2\2\u036f\u036e\3\2\2\2")
        buf.write("\u0370\u0373\3\2\2\2\u0371\u036f\3\2\2\2\u0371\u0372\3")
        buf.write("\2\2\2\u0372\u0374\3\2\2\2\u0373\u0371\3\2\2\2\u0374\u0378")
        buf.write("\t\4\2\2\u0375\u0377\7&\2\2\u0376\u0375\3\2\2\2\u0377")
        buf.write("\u037a\3\2\2\2\u0378\u0376\3\2\2\2\u0378\u0379\3\2\2\2")
        buf.write("\u0379\u037b\3\2\2\2\u037a\u0378\3\2\2\2\u037b\u03aa\5")
        buf.write("\62\32\t\u037c\u0380\f\7\2\2\u037d\u037f\7&\2\2\u037e")
        buf.write("\u037d\3\2\2\2\u037f\u0382\3\2\2\2\u0380\u037e\3\2\2\2")
        buf.write("\u0380\u0381\3\2\2\2\u0381\u0383\3\2\2\2\u0382\u0380\3")
        buf.write("\2\2\2\u0383\u0387\t\5\2\2\u0384\u0386\7&\2\2\u0385\u0384")
        buf.write("\3\2\2\2\u0386\u0389\3\2\2\2\u0387\u0385\3\2\2\2\u0387")
        buf.write("\u0388\3\2\2\2\u0388\u038a\3\2\2\2\u0389\u0387\3\2\2\2")
        buf.write("\u038a\u03aa\5\62\32\b\u038b\u038f\f\5\2\2\u038c\u038e")
        buf.write("\7&\2\2\u038d\u038c\3\2\2\2\u038e\u0391\3\2\2\2\u038f")
        buf.write("\u038d\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0392\3\2\2\2")
        buf.write("\u0391\u038f\3\2\2\2\u0392\u0396\7$\2\2\u0393\u0395\7")
        buf.write("&\2\2\u0394\u0393\3\2\2\2\u0395\u0398\3\2\2\2\u0396\u0394")
        buf.write("\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u0399\3\2\2\2\u0398")
        buf.write("\u0396\3\2\2\2\u0399\u03aa\5\62\32\6\u039a\u039e\f\4\2")
        buf.write("\2\u039b\u039d\7&\2\2\u039c\u039b\3\2\2\2\u039d\u03a0")
        buf.write("\3\2\2\2\u039e\u039c\3\2\2\2\u039e\u039f\3\2\2\2\u039f")
        buf.write("\u03a1\3\2\2\2\u03a0\u039e\3\2\2\2\u03a1\u03a5\7%\2\2")
        buf.write("\u03a2\u03a4\7&\2\2\u03a3\u03a2\3\2\2\2\u03a4\u03a7\3")
        buf.write("\2\2\2\u03a5\u03a3\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a8")
        buf.write("\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a8\u03aa\5\62\32\5\u03a9")
        buf.write("\u035e\3\2\2\2\u03a9\u036d\3\2\2\2\u03a9\u037c\3\2\2\2")
        buf.write("\u03a9\u038b\3\2\2\2\u03a9\u039a\3\2\2\2\u03aa\u03ad\3")
        buf.write("\2\2\2\u03ab\u03a9\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\63")
        buf.write("\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ae\u03b2\5> \2\u03af\u03b2")
        buf.write("\5<\37\2\u03b0\u03b2\7\67\2\2\u03b1\u03ae\3\2\2\2\u03b1")
        buf.write("\u03af\3\2\2\2\u03b1\u03b0\3\2\2\2\u03b2\65\3\2\2\2\u03b3")
        buf.write("\u03b4\t\6\2\2\u03b4\67\3\2\2\2\u03b5\u03bc\7\60\2\2\u03b6")
        buf.write("\u03bc\7\61\2\2\u03b7\u03bc\7\62\2\2\u03b8\u03bc\7\63")
        buf.write("\2\2\u03b9\u03bc\7/\2\2\u03ba\u03bc\5:\36\2\u03bb\u03b5")
        buf.write("\3\2\2\2\u03bb\u03b6\3\2\2\2\u03bb\u03b7\3\2\2\2\u03bb")
        buf.write("\u03b8\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bb\u03ba\3\2\2\2")
        buf.write("\u03bc9\3\2\2\2\u03bd\u03be\7.\2\2\u03be\u03bf\7/\2\2")
        buf.write("\u03bf;\3\2\2\2\u03c0\u03c2\7\66\2\2\u03c1\u03c0\3\2\2")
        buf.write("\2\u03c2\u03c5\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c3\u03c4")
        buf.write("\3\2\2\2\u03c4\u03c6\3\2\2\2\u03c5\u03c3\3\2\2\2\u03c6")
        buf.write("\u03c8\7\65\2\2\u03c7\u03c3\3\2\2\2\u03c7\u03c8\3\2\2")
        buf.write("\2\u03c8\u03ca\3\2\2\2\u03c9\u03cb\7\66\2\2\u03ca\u03c9")
        buf.write("\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cc")
        buf.write("\u03cd\3\2\2\2\u03cd=\3\2\2\2\u03ce\u03d0\7\66\2\2\u03cf")
        buf.write("\u03ce\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03cf\3\2\2\2")
        buf.write("\u03d1\u03d2\3\2\2\2\u03d2?\3\2\2\2\u0089CJNU[`orw\177")
        buf.write("\u0086\u008c\u0092\u0098\u009e\u00a4\u00aa\u00b0\u00b8")
        buf.write("\u00c0\u00c7\u00ce\u00d4\u00d9\u00df\u00e6\u00eb\u00f0")
        buf.write("\u00f9\u0100\u0109\u010e\u0115\u011b\u0122\u0129\u0130")
        buf.write("\u0138\u013f\u0145\u014c\u0153\u015a\u0161\u0168\u016e")
        buf.write("\u0175\u017c\u0183\u018b\u0192\u0198\u019f\u01a7\u01ae")
        buf.write("\u01b4\u01bb\u01c2\u01c9\u01d0\u01d5\u01db\u01e2\u01e9")
        buf.write("\u01f0\u01f7\u01fb\u0200\u0207\u020d\u0214\u021c\u0223")
        buf.write("\u0229\u0230\u0238\u023f\u0246\u024d\u0254\u025b\u0262")
        buf.write("\u026a\u0271\u027a\u027f\u0286\u028c\u0293\u029b\u02a2")
        buf.write("\u02a8\u02af\u02b6\u02bd\u02c5\u02cc\u02d2\u02d9\u02e1")
        buf.write("\u02e8\u02ee\u02f5\u02fc\u0303\u030b\u0312\u0318\u031f")
        buf.write("\u0326\u032d\u0337\u033e\u0347\u034f\u0357\u035c\u0362")
        buf.write("\u0369\u0371\u0378\u0380\u0387\u038f\u0396\u039e\u03a5")
        buf.write("\u03a9\u03ab\u03b1\u03bb\u03c3\u03c7\u03cc\u03d1")
        return buf.getvalue()


class GraphlyParser ( Parser ):

    grammarFileName = "Graphly.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'loop'", "'start'", "'until'", 
                     "'step'", "'then'", "'end'", "'check'", "'else'", "'point'", 
                     "':'", "','", "'segment'", "'circle'", "'polygon'", 
                     "'group'", "'['", "']'", "'num'", "'iterator'", "'canvas'", 
                     "'draw'", "'fill'", "'move'", "'place'", "'rotate'", 
                     "'scale'", "'('", "')'", "'^'", "'_'", "'~'", "'!='", 
                     "'&'", "'|'", "<INVALID>", "'\r'", "<INVALID>", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'!'", "'='", "'>'", "'<'", 
                     "'>='", "'<='", "<INVALID>", "'.'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "WS", "CR", "COM_SIGN", "PLUS", "MINUS", "MULTIPLICATION", 
                      "DIVISION", "MODULO", "NEG", "EQ", "GREATER", "LOWER", 
                      "GT", "LT", "COLOR", "DOT", "DIGIT", "NAME" ]

    RULE_program = 0
    RULE_instruction = 1
    RULE_block = 2
    RULE_loop = 3
    RULE_check = 4
    RULE_condition_block = 5
    RULE_shape = 6
    RULE_point = 7
    RULE_segment = 8
    RULE_circle = 9
    RULE_polygon = 10
    RULE_group = 11
    RULE_groupMember = 12
    RULE_type_definition = 13
    RULE_num = 14
    RULE_iterator = 15
    RULE_canvas = 16
    RULE_draw = 17
    RULE_transformation = 18
    RULE_fill = 19
    RULE_move = 20
    RULE_place = 21
    RULE_rotate = 22
    RULE_scale = 23
    RULE_expr = 24
    RULE_atom = 25
    RULE_arithmetic = 26
    RULE_logic = 27
    RULE_neq = 28
    RULE_flt = 29
    RULE_itr = 30

    ruleNames =  [ "program", "instruction", "block", "loop", "check", "condition_block", 
                   "shape", "point", "segment", "circle", "polygon", "group", 
                   "groupMember", "type_definition", "num", "iterator", 
                   "canvas", "draw", "transformation", "fill", "move", "place", 
                   "rotate", "scale", "expr", "atom", "arithmetic", "logic", 
                   "neq", "flt", "itr" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    WS=36
    CR=37
    COM_SIGN=38
    PLUS=39
    MINUS=40
    MULTIPLICATION=41
    DIVISION=42
    MODULO=43
    NEG=44
    EQ=45
    GREATER=46
    LOWER=47
    GT=48
    LT=49
    COLOR=50
    DOT=51
    DIGIT=52
    NAME=53

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def canvas(self):
            return self.getTypedRuleContext(GraphlyParser.CanvasContext,0)


        def EOF(self):
            return self.getToken(GraphlyParser.EOF, 0)

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def getRuleIndex(self):
            return GraphlyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = GraphlyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 76
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 65
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 62
                            self.match(GraphlyParser.T__0) 
                        self.state = 67
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                    self.state = 68
                    self.instruction()
                    self.state = 70 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 69
                            self.match(GraphlyParser.T__0)

                        else:
                            raise NoViableAltException(self)
                        self.state = 72 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
             
                self.state = 78
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 79
            self.canvas()
            self.state = 94
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__0:
                self.state = 81 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 80
                        self.match(GraphlyParser.T__0)

                    else:
                        raise NoViableAltException(self)
                    self.state = 83 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

                self.state = 85
                self.instruction()
                self.state = 89
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 86
                        self.match(GraphlyParser.T__0) 
                    self.state = 91
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                self.state = 96
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 97
            self.match(GraphlyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shape(self):
            return self.getTypedRuleContext(GraphlyParser.ShapeContext,0)


        def type_definition(self):
            return self.getTypedRuleContext(GraphlyParser.Type_definitionContext,0)


        def draw(self):
            return self.getTypedRuleContext(GraphlyParser.DrawContext,0)


        def transformation(self):
            return self.getTypedRuleContext(GraphlyParser.TransformationContext,0)


        def group(self):
            return self.getTypedRuleContext(GraphlyParser.GroupContext,0)


        def loop(self):
            return self.getTypedRuleContext(GraphlyParser.LoopContext,0)


        def check(self):
            return self.getTypedRuleContext(GraphlyParser.CheckContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstruction" ):
                return visitor.visitInstruction(self)
            else:
                return visitor.visitChildren(self)




    def instruction(self):

        localctx = GraphlyParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instruction)
        self._la = 0 # Token type
        try:
            self.state = 112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 99
                self.shape()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 100
                self.type_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 101
                self.draw()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 102
                self.transformation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 103
                self.group()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 104
                self.loop()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 105
                self.check()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 106
                    self.match(GraphlyParser.WS)
                    self.state = 111
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = GraphlyParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 125
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 117
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 114
                            self.match(GraphlyParser.WS) 
                        self.state = 119
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                    self.state = 120
                    self.instruction()
                    self.state = 121
                    self.match(GraphlyParser.T__0) 
                self.state = 127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.start = None # ExprContext
            self.until = None # ExprContext
            self.step = None # ExprContext

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop" ):
                listener.enterLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop" ):
                listener.exitLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = GraphlyParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 128
            self.match(GraphlyParser.T__1)
            self.state = 130 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 129
                self.match(GraphlyParser.WS)
                self.state = 132 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 134
            localctx.name = self.match(GraphlyParser.NAME)
            self.state = 136 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 135
                self.match(GraphlyParser.WS)
                self.state = 138 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 140
            self.match(GraphlyParser.T__2)
            self.state = 142 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 141
                self.match(GraphlyParser.WS)
                self.state = 144 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 146
            localctx.start = self.expr(0)
            self.state = 148 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 147
                self.match(GraphlyParser.WS)
                self.state = 150 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 152
            self.match(GraphlyParser.T__3)
            self.state = 154 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 153
                self.match(GraphlyParser.WS)
                self.state = 156 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 158
            localctx.until = self.expr(0)
            self.state = 160 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 159
                self.match(GraphlyParser.WS)
                self.state = 162 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 164
            self.match(GraphlyParser.T__4)
            self.state = 166 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 165
                self.match(GraphlyParser.WS)
                self.state = 168 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 170
            localctx.step = self.expr(0)
            self.state = 172 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 171
                self.match(GraphlyParser.WS)
                self.state = 174 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 176
            self.match(GraphlyParser.T__5)
            self.state = 177
            self.match(GraphlyParser.T__0)
            self.state = 178
            self.block()
            self.state = 182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 179
                self.match(GraphlyParser.WS)
                self.state = 184
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 185
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Condition_blockContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Condition_blockContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck" ):
                listener.enterCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck" ):
                listener.exitCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheck" ):
                return visitor.visitCheck(self)
            else:
                return visitor.visitChildren(self)




    def check(self):

        localctx = GraphlyParser.CheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 187
                self.match(GraphlyParser.WS)
                self.state = 192
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 193
            self.match(GraphlyParser.T__7)
            self.state = 195 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 194
                self.match(GraphlyParser.WS)
                self.state = 197 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 199
            self.condition_block()
            self.state = 215
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 200
                    self.match(GraphlyParser.T__8)
                    self.state = 202 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 201
                        self.match(GraphlyParser.WS)
                        self.state = 204 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 206
                    self.match(GraphlyParser.T__7)
                    self.state = 208 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 207
                        self.match(GraphlyParser.WS)
                        self.state = 210 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 212
                    self.condition_block() 
                self.state = 217
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

            self.state = 221
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 218
                    self.match(GraphlyParser.WS) 
                self.state = 223
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.T__8:
                self.state = 224
                self.match(GraphlyParser.T__8)
                self.state = 226 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 225
                    self.match(GraphlyParser.WS)
                    self.state = 228 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 230
                self.match(GraphlyParser.T__5)
                self.state = 231
                self.match(GraphlyParser.T__0)
                self.state = 232
                self.block()


            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 235
                self.match(GraphlyParser.WS)
                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 241
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_condition_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_block" ):
                listener.enterCondition_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_block" ):
                listener.exitCondition_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition_block" ):
                return visitor.visitCondition_block(self)
            else:
                return visitor.visitChildren(self)




    def condition_block(self):

        localctx = GraphlyParser.Condition_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_condition_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.expr(0)
            self.state = 245 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 244
                self.match(GraphlyParser.WS)
                self.state = 247 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 249
            self.match(GraphlyParser.T__5)
            self.state = 250
            self.match(GraphlyParser.T__0)
            self.state = 254
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 251
                    self.match(GraphlyParser.WS) 
                self.state = 256
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 257
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShapeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def point(self):
            return self.getTypedRuleContext(GraphlyParser.PointContext,0)


        def segment(self):
            return self.getTypedRuleContext(GraphlyParser.SegmentContext,0)


        def circle(self):
            return self.getTypedRuleContext(GraphlyParser.CircleContext,0)


        def polygon(self):
            return self.getTypedRuleContext(GraphlyParser.PolygonContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_shape

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape" ):
                listener.enterShape(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape" ):
                listener.exitShape(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShape" ):
                return visitor.visitShape(self)
            else:
                return visitor.visitChildren(self)




    def shape(self):

        localctx = GraphlyParser.ShapeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_shape)
        try:
            self.state = 263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 259
                self.point()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 260
                self.segment()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 261
                self.circle()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 262
                self.polygon()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_point

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoint" ):
                listener.enterPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoint" ):
                listener.exitPoint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPoint" ):
                return visitor.visitPoint(self)
            else:
                return visitor.visitChildren(self)




    def point(self):

        localctx = GraphlyParser.PointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_point)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 265
                self.match(GraphlyParser.WS)
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 271
            self.match(GraphlyParser.T__9)
            self.state = 273 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 272
                self.match(GraphlyParser.WS)
                self.state = 275 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 277
            self.match(GraphlyParser.NAME)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 278
                self.match(GraphlyParser.WS)
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 284
            self.match(GraphlyParser.T__10)
            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 285
                self.match(GraphlyParser.WS)
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 291
            localctx.x = self.expr(0)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 292
                self.match(GraphlyParser.WS)
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 298
            self.match(GraphlyParser.T__11)
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 299
                self.match(GraphlyParser.WS)
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 305
            localctx.y = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegment" ):
                listener.enterSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegment" ):
                listener.exitSegment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSegment" ):
                return visitor.visitSegment(self)
            else:
                return visitor.visitChildren(self)




    def segment(self):

        localctx = GraphlyParser.SegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 307
                self.match(GraphlyParser.WS)
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 313
            self.match(GraphlyParser.T__12)
            self.state = 315 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 314
                self.match(GraphlyParser.WS)
                self.state = 317 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 319
            self.match(GraphlyParser.NAME)
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 320
                self.match(GraphlyParser.WS)
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 326
            self.match(GraphlyParser.T__10)
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 327
                self.match(GraphlyParser.WS)
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 333
            self.match(GraphlyParser.NAME)
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 334
                self.match(GraphlyParser.WS)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 340
            self.match(GraphlyParser.T__11)
            self.state = 342 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 341
                self.match(GraphlyParser.WS)
                self.state = 344 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 346
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CircleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_circle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCircle" ):
                listener.enterCircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCircle" ):
                listener.exitCircle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCircle" ):
                return visitor.visitCircle(self)
            else:
                return visitor.visitChildren(self)




    def circle(self):

        localctx = GraphlyParser.CircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_circle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 348
                self.match(GraphlyParser.WS)
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 354
            self.match(GraphlyParser.T__13)
            self.state = 356 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 355
                self.match(GraphlyParser.WS)
                self.state = 358 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 360
            self.match(GraphlyParser.NAME)
            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 361
                self.match(GraphlyParser.WS)
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 367
            self.match(GraphlyParser.T__10)
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 368
                self.match(GraphlyParser.WS)
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 374
            self.match(GraphlyParser.NAME)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 375
                self.match(GraphlyParser.WS)
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 381
            self.match(GraphlyParser.T__11)
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 382
                self.match(GraphlyParser.WS)
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 388
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolygonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_polygon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolygon" ):
                listener.enterPolygon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolygon" ):
                listener.exitPolygon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolygon" ):
                return visitor.visitPolygon(self)
            else:
                return visitor.visitChildren(self)




    def polygon(self):

        localctx = GraphlyParser.PolygonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_polygon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 390
                self.match(GraphlyParser.WS)
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 396
            self.match(GraphlyParser.T__14)
            self.state = 398 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 397
                self.match(GraphlyParser.WS)
                self.state = 400 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 402
            self.match(GraphlyParser.NAME)
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 403
                self.match(GraphlyParser.WS)
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 409
            self.match(GraphlyParser.T__10)
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 410
                self.match(GraphlyParser.WS)
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 416
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = GraphlyParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 418
                self.match(GraphlyParser.WS)
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 424
            self.match(GraphlyParser.T__15)
            self.state = 426 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 425
                self.match(GraphlyParser.WS)
                self.state = 428 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 430
            self.match(GraphlyParser.NAME)
            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 431
                self.match(GraphlyParser.WS)
                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 437
            self.match(GraphlyParser.T__10)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 438
                self.match(GraphlyParser.WS)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 444
            self.match(GraphlyParser.NAME)
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 445
                self.match(GraphlyParser.WS)
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__11:
                self.state = 451
                self.match(GraphlyParser.T__11)
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 452
                    self.match(GraphlyParser.WS)
                    self.state = 457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 458
                self.match(GraphlyParser.NAME)
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 459
                    self.match(GraphlyParser.WS)
                    self.state = 464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_groupMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupMember" ):
                listener.enterGroupMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupMember" ):
                listener.exitGroupMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupMember" ):
                return visitor.visitGroupMember(self)
            else:
                return visitor.visitChildren(self)




    def groupMember(self):

        localctx = GraphlyParser.GroupMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_groupMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 470
                self.match(GraphlyParser.WS)
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 476
            self.match(GraphlyParser.NAME)
            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 477
                self.match(GraphlyParser.WS)
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 483
            self.match(GraphlyParser.T__16)
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 484
                self.match(GraphlyParser.WS)
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 490
            self.expr(0)
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 491
                self.match(GraphlyParser.WS)
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 497
            self.match(GraphlyParser.T__17)
            self.state = 499 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 498
                self.match(GraphlyParser.WS)
                self.state = 501 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num(self):
            return self.getTypedRuleContext(GraphlyParser.NumContext,0)


        def iterator(self):
            return self.getTypedRuleContext(GraphlyParser.IteratorContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_definition" ):
                listener.enterType_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_definition" ):
                listener.exitType_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_definition" ):
                return visitor.visitType_definition(self)
            else:
                return visitor.visitChildren(self)




    def type_definition(self):

        localctx = GraphlyParser.Type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_type_definition)
        try:
            self.state = 505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 503
                self.num()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 504
                self.iterator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_num

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum" ):
                listener.enterNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum" ):
                listener.exitNum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNum" ):
                return visitor.visitNum(self)
            else:
                return visitor.visitChildren(self)




    def num(self):

        localctx = GraphlyParser.NumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_num)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 507
                self.match(GraphlyParser.WS)
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 513
            self.match(GraphlyParser.T__18)
            self.state = 515 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 514
                self.match(GraphlyParser.WS)
                self.state = 517 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 519
            self.match(GraphlyParser.NAME)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 520
                self.match(GraphlyParser.WS)
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 526
            self.match(GraphlyParser.T__10)
            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 527
                self.match(GraphlyParser.WS)
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 533
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_iterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterator" ):
                listener.enterIterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterator" ):
                listener.exitIterator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterator" ):
                return visitor.visitIterator(self)
            else:
                return visitor.visitChildren(self)




    def iterator(self):

        localctx = GraphlyParser.IteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_iterator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 535
                self.match(GraphlyParser.WS)
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 541
            self.match(GraphlyParser.T__19)
            self.state = 543 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 542
                self.match(GraphlyParser.WS)
                self.state = 545 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 547
            self.match(GraphlyParser.NAME)
            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 548
                self.match(GraphlyParser.WS)
                self.state = 553
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 554
            self.match(GraphlyParser.T__10)
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 555
                self.match(GraphlyParser.WS)
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 561
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CanvasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_canvas

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCanvas" ):
                listener.enterCanvas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCanvas" ):
                listener.exitCanvas(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCanvas" ):
                return visitor.visitCanvas(self)
            else:
                return visitor.visitChildren(self)




    def canvas(self):

        localctx = GraphlyParser.CanvasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_canvas)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 563
                self.match(GraphlyParser.WS)
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 569
            self.match(GraphlyParser.T__20)
            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 570
                self.match(GraphlyParser.WS)
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 576
            self.match(GraphlyParser.T__10)
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 577
                self.match(GraphlyParser.WS)
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 583
            localctx.x = self.expr(0)
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 584
                self.match(GraphlyParser.WS)
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 590
            self.match(GraphlyParser.T__11)
            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 591
                self.match(GraphlyParser.WS)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 597
            localctx.y = self.expr(0)
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 598
                self.match(GraphlyParser.WS)
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 604
            self.match(GraphlyParser.T__11)
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 605
                self.match(GraphlyParser.WS)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 611
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DrawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_draw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDraw" ):
                listener.enterDraw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDraw" ):
                listener.exitDraw(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDraw" ):
                return visitor.visitDraw(self)
            else:
                return visitor.visitChildren(self)




    def draw(self):

        localctx = GraphlyParser.DrawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_draw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 613
                self.match(GraphlyParser.WS)
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 619
            self.match(GraphlyParser.T__21)
            self.state = 621 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 620
                self.match(GraphlyParser.WS)
                self.state = 623 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 625
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fill(self):
            return self.getTypedRuleContext(GraphlyParser.FillContext,0)


        def move(self):
            return self.getTypedRuleContext(GraphlyParser.MoveContext,0)


        def place(self):
            return self.getTypedRuleContext(GraphlyParser.PlaceContext,0)


        def rotate(self):
            return self.getTypedRuleContext(GraphlyParser.RotateContext,0)


        def scale(self):
            return self.getTypedRuleContext(GraphlyParser.ScaleContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformation" ):
                listener.enterTransformation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformation" ):
                listener.exitTransformation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformation" ):
                return visitor.visitTransformation(self)
            else:
                return visitor.visitChildren(self)




    def transformation(self):

        localctx = GraphlyParser.TransformationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_transformation)
        try:
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 627
                self.fill()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 628
                self.move()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 629
                self.place()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 630
                self.rotate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 631
                self.scale()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FillContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_fill

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFill" ):
                listener.enterFill(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFill" ):
                listener.exitFill(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFill" ):
                return visitor.visitFill(self)
            else:
                return visitor.visitChildren(self)




    def fill(self):

        localctx = GraphlyParser.FillContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_fill)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 634
                self.match(GraphlyParser.WS)
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 640
            self.match(GraphlyParser.T__22)
            self.state = 642 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 641
                self.match(GraphlyParser.WS)
                self.state = 644 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 646
            self.match(GraphlyParser.NAME)
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 647
                self.match(GraphlyParser.WS)
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 653
            self.match(GraphlyParser.T__10)
            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 654
                self.match(GraphlyParser.WS)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 660
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dx = None # ExprContext
            self.dy = None # ExprContext

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMove" ):
                return visitor.visitMove(self)
            else:
                return visitor.visitChildren(self)




    def move(self):

        localctx = GraphlyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 662
                self.match(GraphlyParser.WS)
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 668
            self.match(GraphlyParser.T__23)
            self.state = 670 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 669
                self.match(GraphlyParser.WS)
                self.state = 672 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 674
            self.match(GraphlyParser.NAME)
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 675
                self.match(GraphlyParser.WS)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 681
            self.match(GraphlyParser.T__10)
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 682
                self.match(GraphlyParser.WS)
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 688
            localctx.dx = self.expr(0)
            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 689
                self.match(GraphlyParser.WS)
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 695
            self.match(GraphlyParser.T__11)
            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 696
                self.match(GraphlyParser.WS)
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 702
            localctx.dy = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_place

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlace" ):
                listener.enterPlace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlace" ):
                listener.exitPlace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlace" ):
                return visitor.visitPlace(self)
            else:
                return visitor.visitChildren(self)




    def place(self):

        localctx = GraphlyParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_place)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 704
                self.match(GraphlyParser.WS)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 710
            self.match(GraphlyParser.T__24)
            self.state = 712 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 711
                self.match(GraphlyParser.WS)
                self.state = 714 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 716
            self.match(GraphlyParser.NAME)
            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 717
                self.match(GraphlyParser.WS)
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 723
            self.match(GraphlyParser.T__10)
            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 724
                self.match(GraphlyParser.WS)
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 730
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RotateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.angle = None # ExprContext

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_rotate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRotate" ):
                listener.enterRotate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRotate" ):
                listener.exitRotate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRotate" ):
                return visitor.visitRotate(self)
            else:
                return visitor.visitChildren(self)




    def rotate(self):

        localctx = GraphlyParser.RotateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_rotate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 732
                self.match(GraphlyParser.WS)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 738
            self.match(GraphlyParser.T__25)
            self.state = 740 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 739
                self.match(GraphlyParser.WS)
                self.state = 742 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 744
            self.match(GraphlyParser.NAME)
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 745
                self.match(GraphlyParser.WS)
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 751
            self.match(GraphlyParser.T__10)
            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 752
                self.match(GraphlyParser.WS)
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 758
            localctx.angle = self.expr(0)
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 759
                self.match(GraphlyParser.WS)
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 765
            self.match(GraphlyParser.T__11)
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 766
                self.match(GraphlyParser.WS)
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 772
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.k = None # ExprContext

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScale" ):
                listener.enterScale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScale" ):
                listener.exitScale(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScale" ):
                return visitor.visitScale(self)
            else:
                return visitor.visitChildren(self)




    def scale(self):

        localctx = GraphlyParser.ScaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_scale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 774
                self.match(GraphlyParser.WS)
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 780
            self.match(GraphlyParser.T__26)
            self.state = 782 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 781
                self.match(GraphlyParser.WS)
                self.state = 784 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 786
            self.match(GraphlyParser.NAME)
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 787
                self.match(GraphlyParser.WS)
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 793
            self.match(GraphlyParser.T__10)
            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 794
                self.match(GraphlyParser.WS)
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 800
            localctx.k = self.expr(0)
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 801
                self.match(GraphlyParser.WS)
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 807
            self.match(GraphlyParser.T__11)
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 808
                self.match(GraphlyParser.WS)
                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 814
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MinusOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)
        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinusOpExpr" ):
                listener.enterMinusOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinusOpExpr" ):
                listener.exitMinusOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinusOpExpr" ):
                return visitor.visitMinusOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class RoundingOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoundingOpExpr" ):
                listener.enterRoundingOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoundingOpExpr" ):
                listener.exitRoundingOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoundingOpExpr" ):
                return visitor.visitRoundingOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class BooleanOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def LT(self):
            return self.getToken(GraphlyParser.LT, 0)
        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)
        def GT(self):
            return self.getToken(GraphlyParser.GT, 0)
        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)
        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOpExpr" ):
                listener.enterBooleanOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOpExpr" ):
                listener.exitBooleanOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOpExpr" ):
                return visitor.visitBooleanOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def MULTIPLICATION(self):
            return self.getToken(GraphlyParser.MULTIPLICATION, 0)
        def DIVISION(self):
            return self.getToken(GraphlyParser.DIVISION, 0)
        def MODULO(self):
            return self.getToken(GraphlyParser.MODULO, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)
        def PLUS(self):
            return self.getToken(GraphlyParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOpExpr" ):
                listener.enterArithmeticOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOpExpr" ):
                listener.exitArithmeticOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOpExpr" ):
                return visitor.visitArithmeticOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class NegationOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEG(self):
            return self.getToken(GraphlyParser.NEG, 0)
        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegationOpExpr" ):
                listener.enterNegationOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegationOpExpr" ):
                listener.exitNegationOpExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNegationOpExpr" ):
                return visitor.visitNegationOpExpr(self)
            else:
                return visitor.visitChildren(self)


    class AtomExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(GraphlyParser.AtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomExpr" ):
                listener.enterAtomExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomExpr" ):
                listener.exitAtomExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomExpr" ):
                return visitor.visitAtomExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpr" ):
                listener.enterParenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpr" ):
                listener.exitParenExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpr" ):
                return visitor.visitParenExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GraphlyParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.T__27]:
                localctx = GraphlyParser.ParenExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 817
                self.match(GraphlyParser.T__27)
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 818
                    self.match(GraphlyParser.WS)
                    self.state = 823
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 824
                self.expr(0)
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 825
                    self.match(GraphlyParser.WS)
                    self.state = 830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 831
                self.match(GraphlyParser.T__28)
                pass
            elif token in [GraphlyParser.T__29, GraphlyParser.T__30, GraphlyParser.T__31]:
                localctx = GraphlyParser.RoundingOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 833
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__29) | (1 << GraphlyParser.T__30) | (1 << GraphlyParser.T__31))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 834
                    self.match(GraphlyParser.WS)
                    self.state = 839
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 840
                self.expr(9)
                pass
            elif token in [GraphlyParser.MINUS]:
                localctx = GraphlyParser.MinusOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 841
                self.match(GraphlyParser.MINUS)
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 842
                    self.match(GraphlyParser.WS)
                    self.state = 847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 848
                self.expr(8)
                pass
            elif token in [GraphlyParser.NEG]:
                localctx = GraphlyParser.NegationOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 849
                self.match(GraphlyParser.NEG)
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 850
                    self.match(GraphlyParser.WS)
                    self.state = 855
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 856
                self.expr(4)
                pass
            elif token in [GraphlyParser.DOT, GraphlyParser.DIGIT, GraphlyParser.NAME]:
                localctx = GraphlyParser.AtomExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 857
                self.atom()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 937
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 935
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                    if la_ == 1:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 860
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 864
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 861
                            self.match(GraphlyParser.WS)
                            self.state = 866
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 867
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 871
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 868
                            self.match(GraphlyParser.WS)
                            self.state = 873
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 874
                        localctx.right = self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 875
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 879
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 876
                            self.match(GraphlyParser.WS)
                            self.state = 881
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 882
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==GraphlyParser.PLUS or _la==GraphlyParser.MINUS):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 886
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 883
                            self.match(GraphlyParser.WS)
                            self.state = 888
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 889
                        localctx.right = self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 890
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 894
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 891
                            self.match(GraphlyParser.WS)
                            self.state = 896
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 897
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__32) | (1 << GraphlyParser.EQ) | (1 << GraphlyParser.GREATER) | (1 << GraphlyParser.LOWER) | (1 << GraphlyParser.GT) | (1 << GraphlyParser.LT))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 901
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 898
                            self.match(GraphlyParser.WS)
                            self.state = 903
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 904
                        localctx.right = self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 905
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 909
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 906
                            self.match(GraphlyParser.WS)
                            self.state = 911
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 912
                        localctx.op = self.match(GraphlyParser.T__33)
                        self.state = 916
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 913
                            self.match(GraphlyParser.WS)
                            self.state = 918
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 919
                        localctx.right = self.expr(4)
                        pass

                    elif la_ == 5:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 920
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 924
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 921
                            self.match(GraphlyParser.WS)
                            self.state = 926
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 927
                        localctx.op = self.match(GraphlyParser.T__34)
                        self.state = 931
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 928
                            self.match(GraphlyParser.WS)
                            self.state = 933
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 934
                        localctx.right = self.expr(3)
                        pass

             
                self.state = 939
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_atom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class VarAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarAtom" ):
                listener.enterVarAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarAtom" ):
                listener.exitVarAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarAtom" ):
                return visitor.visitVarAtom(self)
            else:
                return visitor.visitChildren(self)


    class IntAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def itr(self):
            return self.getTypedRuleContext(GraphlyParser.ItrContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntAtom" ):
                listener.enterIntAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntAtom" ):
                listener.exitIntAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntAtom" ):
                return visitor.visitIntAtom(self)
            else:
                return visitor.visitChildren(self)


    class FltAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def flt(self):
            return self.getTypedRuleContext(GraphlyParser.FltContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFltAtom" ):
                listener.enterFltAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFltAtom" ):
                listener.exitFltAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFltAtom" ):
                return visitor.visitFltAtom(self)
            else:
                return visitor.visitChildren(self)



    def atom(self):

        localctx = GraphlyParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_atom)
        try:
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.IntAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self.itr()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.FltAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 941
                self.flt()
                pass

            elif la_ == 3:
                localctx = GraphlyParser.VarAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 942
                self.match(GraphlyParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(GraphlyParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(GraphlyParser.MINUS, 0)

        def MULTIPLICATION(self):
            return self.getToken(GraphlyParser.MULTIPLICATION, 0)

        def DIVISION(self):
            return self.getToken(GraphlyParser.DIVISION, 0)

        def MODULO(self):
            return self.getToken(GraphlyParser.MODULO, 0)

        def getRuleIndex(self):
            return GraphlyParser.RULE_arithmetic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic" ):
                listener.enterArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic" ):
                listener.exitArithmetic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmetic" ):
                return visitor.visitArithmetic(self)
            else:
                return visitor.visitChildren(self)




    def arithmetic(self):

        localctx = GraphlyParser.ArithmeticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_arithmetic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.PLUS) | (1 << GraphlyParser.MINUS) | (1 << GraphlyParser.MULTIPLICATION) | (1 << GraphlyParser.DIVISION) | (1 << GraphlyParser.MODULO))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self):
            return self.getToken(GraphlyParser.GREATER, 0)

        def LOWER(self):
            return self.getToken(GraphlyParser.LOWER, 0)

        def GT(self):
            return self.getToken(GraphlyParser.GT, 0)

        def LT(self):
            return self.getToken(GraphlyParser.LT, 0)

        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)

        def neq(self):
            return self.getTypedRuleContext(GraphlyParser.NeqContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_logic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogic" ):
                listener.enterLogic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogic" ):
                listener.exitLogic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogic" ):
                return visitor.visitLogic(self)
            else:
                return visitor.visitChildren(self)




    def logic(self):

        localctx = GraphlyParser.LogicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_logic)
        try:
            self.state = 953
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.GREATER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 947
                self.match(GraphlyParser.GREATER)
                pass
            elif token in [GraphlyParser.LOWER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 948
                self.match(GraphlyParser.LOWER)
                pass
            elif token in [GraphlyParser.GT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 949
                self.match(GraphlyParser.GT)
                pass
            elif token in [GraphlyParser.LT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 950
                self.match(GraphlyParser.LT)
                pass
            elif token in [GraphlyParser.EQ]:
                self.enterOuterAlt(localctx, 5)
                self.state = 951
                self.match(GraphlyParser.EQ)
                pass
            elif token in [GraphlyParser.NEG]:
                self.enterOuterAlt(localctx, 6)
                self.state = 952
                self.neq()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEG(self):
            return self.getToken(GraphlyParser.NEG, 0)

        def EQ(self):
            return self.getToken(GraphlyParser.EQ, 0)

        def getRuleIndex(self):
            return GraphlyParser.RULE_neq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNeq" ):
                listener.enterNeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNeq" ):
                listener.exitNeq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNeq" ):
                return visitor.visitNeq(self)
            else:
                return visitor.visitChildren(self)




    def neq(self):

        localctx = GraphlyParser.NeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_neq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(GraphlyParser.NEG)
            self.state = 956
            self.match(GraphlyParser.EQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FltContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(GraphlyParser.DOT, 0)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.DIGIT)
            else:
                return self.getToken(GraphlyParser.DIGIT, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_flt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlt" ):
                listener.enterFlt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlt" ):
                listener.exitFlt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlt" ):
                return visitor.visitFlt(self)
            else:
                return visitor.visitChildren(self)




    def flt(self):

        localctx = GraphlyParser.FltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_flt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.DIGIT:
                    self.state = 958
                    self.match(GraphlyParser.DIGIT)
                    self.state = 963
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 964
                self.match(GraphlyParser.DOT)


            self.state = 968 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 967
                    self.match(GraphlyParser.DIGIT)

                else:
                    raise NoViableAltException(self)
                self.state = 970 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.DIGIT)
            else:
                return self.getToken(GraphlyParser.DIGIT, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_itr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItr" ):
                listener.enterItr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItr" ):
                listener.exitItr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItr" ):
                return visitor.visitItr(self)
            else:
                return visitor.visitChildren(self)




    def itr(self):

        localctx = GraphlyParser.ItrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_itr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 972
                    self.match(GraphlyParser.DIGIT)

                else:
                    raise NoViableAltException(self)
                self.state = 975 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[24] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         




