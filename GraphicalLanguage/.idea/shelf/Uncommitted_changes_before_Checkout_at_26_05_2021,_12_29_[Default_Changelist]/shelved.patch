Index: tests/chessboard_test.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>-- main program to draw chess board\nnum X: 100\n\ncanvas: X, X, #white\n\nnum Size: 8\nnum SqrLen: X/Size\npoint P0: 0, 0\npoint P1: SqrLen, 0\npoint P2: SqrLen, SqrLen\npoint P3: 0, SqrLen\n\ngroup Points: P0, P1, P2, P3\n\n\npolygon Sqr: Points\n\nfill Sqr: #black\n\nloop I start 0 until Size step 1 then\n    loop J start 0 until Size step 1 then\n\t\tcheck (I + J) % 2 = 1 then\n\t\t\tpoint P: I * SqrLen, J * SqrLen\n\t\t\tplace Sqr: P\n\t\t\tdraw Sqr\n\t\tend\n\tend\nend
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/chessboard_test.txt b/tests/chessboard_test.txt
--- a/tests/chessboard_test.txt	(revision 82620ede7be330418b0ccadb4ea547991ec2527d)
+++ b/tests/chessboard_test.txt	(date 1621514408380)
@@ -1,5 +1,5 @@
 -- main program to draw chess board
-num X: 100
+num X: 800
 
 canvas: X, X, #white
 
@@ -12,7 +12,6 @@
 
 group Points: P0, P1, P2, P3
 
-
 polygon Sqr: Points
 
 fill Sqr: #black
Index: GraphlyProgramVisitor.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\nfrom re import split, sub\n\nfrom GraphlyVisitor import GraphlyVisitor\nfrom GraphlyParser import GraphlyParser\n\nfrom exceptions.VariableAlreadyDeclaredException import VariableAlreadyDeclaredException\nfrom exceptions.UnknownVariableException import UnknownVariableException\nfrom exceptions.BadArgumentException import BadArgumentException\nfrom exceptions.BadColorException import BadColorException\nfrom exceptions.IncorrectPolygonCreationException import IncorrectPolygonCreationException\nfrom exceptions.UnknownOperationException import UnknownOperationException\n\nfrom re import split, sub\nfrom math import floor, ceil\nfrom math import sin, cos, radians\n\n\nclass GraphlyProgramVisitor(GraphlyVisitor):\n    POINT_RADIUS = 3\n    SCREEN_WIDTH = 640\n    SCREEN_HEIGHT = 480\n\n    class Point:\n        def __init__(self, name, x, y):\n            self.x = x\n            self.y = y\n            self.name = name\n            self.color = (0, 0, 0)\n\n        def get_coordination_tuple(self):\n            return self.x, self.y\n\n    class Segment:\n        SEGMENT_WIDTH = 1\n\n        def __init__(self, name, start_point, end_point):\n            self.name = name\n            self.start_point = start_point\n            self.end_point = end_point\n            self.color = (0, 0, 0)\n            self.width = self.SEGMENT_WIDTH\n\n    class Circle:\n        CIRCLE_WIDTH = 1\n\n        def __init__(self, name, center_point, radius):\n            self.name = name\n            self.center_point = center_point\n            self.radius = radius\n            self.color = (0, 0, 0)\n            self.width = self.CIRCLE_WIDTH\n\n    class Polygon:\n        POLYGON_WIDTH = 0\n\n        def __init__(self, name, points):\n            self.name = name\n            self.points = points\n            self.color = (0, 0, 0)\n            self.width = self.POLYGON_WIDTH\n\n    def __init__(self):\n        self.scopes = []\n        self.colors = {\n            \"#red\": (255, 0, 0),\n            \"#green\": (0, 255, 0),\n            \"#yellow\": (255, 255, 0),\n            \"#black\": (0, 0, 0),\n            \"#blue\": (0, 0, 255),\n            \"#white\": (255, 255, 255),\n            \"#orange\": (255, 165, 0),\n            \"#pink\": (255, 100, 203)\n        }\n        self.screen = pygame.display.set_mode((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))\n\n    def variable_exists(self, variable):\n        # Checks if variable exists in any scope\n        # TODO\n        # Alternatively, we can check if variable exists only in the current\n        # scope, allowing to create variables of the same name as in higher\n        # scopes. Also, functionality of this function could be implemented by\n        # get_variable.\n        for scope in reversed(self.scopes):\n            if variable in scope:\n                return True\n        return False\n\n    def get_variable(self, variable):\n        # Returns variable if found in any scope\n        # Raises UnknownVariableException\n        for scope in reversed(self.scopes):\n            if variable in scope:\n                return scope[variable]\n        raise UnknownVariableException(variable)\n\n    def set_variable(self, name, value):\n        # Sets/creates variable in the current scope\n        self.scopes[-1][name] = value\n    \n\n    def visitProgram(self, ctx: GraphlyParser.ProgramContext):\n        pygame.init()\n        self.scopes.append({})\n        self.visitChildren(ctx)\n        pygame.display.update()\n\n    def visitBlock(self, ctx:GraphlyParser.BlockContext):\n        self.scopes.append({})\n        self.visitChildren(ctx)\n        self.scopes.pop()\n\n    def visitLoop(self, ctx: GraphlyParser.LoopContext):\n        name = ctx.name.text\n\n        iterator = int(self.visit(ctx.start))\n        until = int(self.visit(ctx.until))\n        step = int(self.visit(ctx.step))\n        block = ctx.block()\n\n        if not self.variable_exists(name):\n            self.set_variable(name, iterator)\n        else:\n            raise VariableAlreadyDeclaredException(name)\n        \n        while iterator < until:\n            self.visit(block)\n            \n            iterator += step\n            self.set_variable(name, iterator)\n\n\n    def visitCheck(self, ctx: GraphlyParser.CheckContext):\n        do_else = True\n        for cb in ctx.condition_block():\n            if self.visit(cb.expr()):\n                self.visit(cb.block())\n                do_else = False\n                break\n        \n        if do_else and not ctx.block() is None:\n            self.visit(ctx.block())\n\n    # TODO\n    # add exceptions after providing full variables service\n\n    def visitPoint(self, ctx: GraphlyParser.PointContext):\n        name = ctx.NAME().getText()\n\n        if not self.variable_exists(name):\n            x_cord = self.visit(ctx.x)\n            y_cord = self.visit(ctx.y)\n\n            point = self.Point(name, x_cord, y_cord)\n\n            self.set_variable(name, point)\n        else:\n            raise VariableAlreadyDeclaredException(name)\n\n    def visitSegment(self, ctx: GraphlyParser.SegmentContext):\n        name = ctx.NAME(0).getText()\n\n        if not self.variable_exists(name):\n            point1_name = ctx.NAME(1).getText()\n            point2_name = ctx.NAME(2).getText()\n\n            p1 = self.get_variable(point1_name)\n            p2 = self.get_variable(point2_name)\n\n            if type(p1) == self.Point and type(p2) == self.Point:\n                segment = self.Segment(name, p1, p2)\n                self.set_variable(name, segment)\n            else:\n                if type(p1) != self.Point:\n                    raise BadArgumentException(\n                        \"segment\", point1_name, type(p1))\n                raise BadArgumentException(\n                    \"segment\", point2_name, type(p2))\n        else:\n            raise VariableAlreadyDeclaredException(name)\n\n\n    def visitCircle(self, ctx: GraphlyParser.CircleContext):\n        name = ctx.NAME(0).getText()\n\n        if not self.variable_exists(name):\n            point_name = ctx.NAME(1).getText()\n\n            point = self.get_variable(point_name)\n\n            if type(point) == self.Point:\n                radius = self.visit(ctx.expr())\n                circle = self.Circle(name, point, radius)\n                self.set_variable(name, circle)\n\n            else:\n                raise BadArgumentException(\n                    \"circle\", point_name, type(point))\n        else:\n            raise VariableAlreadyDeclaredException(name)\n\n\n    def visitPolygon(self, ctx: GraphlyParser.PolygonContext):\n        name = ctx.NAME(0).getText()\n\n        if not self.variable_exists(name):\n            group_name = ctx.NAME(1).getText()\n\n            group = self.get_variable(group_name)\n\n            if type(group) == list:\n                for member in group:\n                    if type(member) != self.Point:\n                        raise IncorrectPolygonCreationException(\n                            group_name, type(member))\n\n                polygon = self.Polygon(name, group)\n\n                self.set_variable(name, polygon)\n            else:\n                raise BadArgumentException(\n                    \"polygon\", group_name, type(group))\n        else:\n            raise VariableAlreadyDeclaredException(name)\n\n\n\n    # TODO\n    # Possible problem with no args\n    # Deal with different types of members\n    def visitGroup(self, ctx: GraphlyParser.GroupContext):\n        name_tokens = ctx.getTokens(GraphlyParser.NAME)\n\n        name = name_tokens[0].getText()\n        arguments = name_tokens[1:]\n        group_members = []\n\n        if not self.variable_exists(name):\n            for arg in arguments:\n                arg_name = arg.getText()\n\n                member = self.get_variable(arg_name)\n                group_members.append(member)\n\n            self.set_variable(name, group_members)\n        else:\n            raise VariableAlreadyDeclaredException(name)\n\n\n    def visitGroupMember(self, ctx: GraphlyParser.GroupMemberContext):\n        print(\"GroupMember\")\n\n\n    def visitNum(self, ctx: GraphlyParser.NumContext):\n        name = ctx.NAME().getText()\n\n        if not self.variable_exists(name):\n            value = self.visit(ctx.expr())\n            self.set_variable(name, value)\n        else:\n            raise VariableAlreadyDeclaredException(name)\n\n\n    def visitCanvas(self, ctx: GraphlyParser.CanvasContext):\n        color = ctx.COLOR().getText()\n\n        x = int(self.visit(ctx.x))\n        y = int(self.visit(ctx.y))\n\n        self.screen = pygame.display.set_mode((x, y))\n\n        if color in self.colors:\n            self.screen.fill(self.colors[color])\n        else:\n            raise BadColorException(color)\n\n\n    def visitDraw(self, ctx: GraphlyParser.DrawContext):\n        name = ctx.NAME().getText()\n\n        variable = self.get_variable(name)\n        if type(variable) == self.Point:\n            pygame.draw.circle(self.screen, variable.color, (variable.x, variable.y), self.POINT_RADIUS)\n        elif type(variable) == self.Segment:\n            start_point = variable.start_point.get_coordination_tuple()\n            end_point = variable.end_point.get_coordination_tuple()\n            pygame.draw.line(self.screen, variable.color, start_point, end_point, variable.width)\n        elif type(variable) == self.Circle:\n            center_point = variable.center_point.get_coordination_tuple()\n            pygame.draw.circle(self.screen, variable.color, center_point, variable.radius)\n        elif type(variable) == self.Polygon:\n            coordination_tuples_list = [point.get_coordination_tuple() for point in variable.points]\n            pygame.draw.polygon(self.screen, variable.color, coordination_tuples_list, variable.width)\n\n\n    def visitFill(self, ctx: GraphlyParser.FillContext):\n        name = ctx.NAME().getText()\n\n        variable = self.get_variable(name)\n\n        if type(variable) in (self.Point, self.Segment, self.Circle, self.Polygon):\n            color = ctx.COLOR().getText()\n\n            if color in self.colors:\n                variable.color = self.colors[color]\n            else:\n                raise BadColorException(color)\n        else:\n            raise BadArgumentException(\"fill\", name, type(variable))\n        \n\n    def visitMinusOpExpr(self, ctx:GraphlyParser.MinusOpExprContext):\n        return -self.visit(ctx.expr())\n\n\n    def visitBooleanOpExpr(self, ctx:GraphlyParser.BooleanOpExprContext):\n        left = self.visit(ctx.left)\n        right = self.visit(ctx.right)\n        op = ctx.op.text\n\n        if op == '<=':\n            return left <= right\n        elif op == '>':\n            return left > right\n        elif op == '>=':\n            return left >= right\n        elif op == '<':\n            return left < right\n        elif op == '=':\n            return left == right\n        elif op == '!=':\n            return left != right\n        elif op == '&':\n            return left and right\n        elif op == '|':\n            return left or right\n        else:\n            raise UnknownOperationException(op)\n\n\n    def visitArithmeticOpExpr(self, ctx:GraphlyParser.ArithmeticOpExprContext):\n        left = self.visit(ctx.left)\n        right = self.visit(ctx.right)\n        op = ctx.op.text\n\n        if op == '+':\n            return left + right\n        elif op == '-':\n            return left - right\n        elif op == '*':\n            return left * right\n        elif op == '/':\n            return left / right\n        elif op == '%':\n            return left % right\n        else:\n            raise UnknownOperationException(op)\n\n    def visitNegationOpExpr(self, ctx:GraphlyParser.NegationOpExprContext):\n        return not self.visit(ctx.expr())\n\n\n    def visitParenExpr(self, ctx:GraphlyParser.ParenExprContext):\n        return self.visit(ctx.expr())\n\n\n    def visitFltAtom(self, ctx:GraphlyParser.FltAtomContext):\n        return float(ctx.getText())\n\n\n    def visitIntAtom(self, ctx:GraphlyParser.IntAtomContext):\n        return int(ctx.getText())\n\n\n    def visitVarAtom(self, ctx:GraphlyParser.VarAtomContext):\n        return self.get_variable(ctx.getText())\n\n\n    def visitMove(self, ctx: GraphlyParser.MoveContext):\n        name = ctx.NAME().getText()\n\n        variable = self.get_variable(name)\n\n        x = self.visit(ctx.dx)\n        y = self.visit(ctx.dy)\n\n        if type(variable) == self.Point:\n            variable.x += x\n            variable.y += y\n        elif type(variable) == self.Segment:\n            variable.start_point.x += x\n            variable.start_point.y += y\n            variable.end_point.x += x\n            variable.end_point.y += y\n        elif type(variable) == self.Circle:\n            variable.center_point.x += x\n            variable.center_point.y += y\n        elif type(variable) == self.Polygon:\n            for i in range(len(variable.points)):\n                variable.points[i].x += x\n                variable.points[i].y += y\n        else:\n            raise BadArgumentException(\"move\", name, type(variable))\n\n        return self.visitChildren(ctx)\n\n    def visitPlace(self, ctx: GraphlyParser.PlaceContext):\n        shape_name = ctx.NAME(0).getText()\n        place_point_name = ctx.NAME(1).getText()\n\n        shape = self.get_variable(shape_name)\n        place_point = self.get_variable(place_point_name)\n\n        if type(place_point) == self.Point:\n            if type(shape) == self.Point:\n                x = place_point.x - shape.x\n                y = place_point.y - shape.y\n\n                shape.x += x\n                shape.y += y\n            elif type(shape) == self.Segment:\n                x = place_point.x - shape.start_point.x\n                y = place_point.y - shape.start_point.y\n\n                shape.start_point.x += x\n                shape.start_point.y += y\n\n                shape.end_point.x += x\n                shape.end_point.y += y\n            elif type(shape) == self.Circle:\n                x = place_point.x - shape.center_point.x\n                y = place_point.y - shape.center_point.y\n\n                shape.center_point.x += x\n                shape.center_point.y += y\n            elif type(shape) == self.Polygon:\n                x = place_point.x - shape.points[0].x\n                y = place_point.y - shape.points[0].y\n\n                for i in range(len(shape.points)):\n                    shape.points[i].x += x\n                    shape.points[i].y += y\n            else:\n                raise BadArgumentException(\"place\", shape_name, type(shape))\n        else:\n            raise BadArgumentException(\"place\", place_point_name, type(place_point))\n\n        return self.visitChildren(ctx)\n\n    def rotate_single_point(self, point, pivot, angle):\n        s = sin(radians(angle))\n        c = cos(radians(angle))\n\n        origin_x = point.x - pivot.x\n        origin_y = point.y - pivot.y\n\n        new_x = origin_x * c - origin_y * s\n        new_y = origin_x * s + origin_y * c\n\n        return new_x + pivot.x, new_y + pivot.y\n\n    def visitRotate(self, ctx: GraphlyParser.RotateContext):\n        shape_name = ctx.NAME(0).getText()\n        pivot_point_name = ctx.NAME(1).getText()\n\n        shape = self.get_variable(shape_name)\n        pivot_point = self.get_variable(pivot_point_name)\n\n        angle = self.visit(ctx.angle)\n        angle *= -1  # counterclockwise\n\n        if type(shape) == self.Point:\n            x, y = self.rotate_single_point(shape, pivot_point, angle)\n\n            shape.x = x\n            shape.y = y\n        elif type(shape) == self.Segment:\n            start_x, start_y = self.rotate_single_point(shape.start_point, pivot_point, angle)\n            end_x, end_y = self.rotate_single_point(shape.end_point, pivot_point, angle)\n\n            shape.start_point.x = start_x\n            shape.start_point.y = start_y\n            shape.end_point.x = end_x\n            shape.end_point.y = end_y\n        elif type(shape) == self.Circle:\n            x, y = self.rotate_single_point(shape.center_point, pivot_point, angle)\n\n            shape.center_point.x = x\n            shape.center_point.y = y\n        elif type(shape) == self.Polygon:\n            for i in range(len(shape.points)):\n                x, y = self.rotate_single_point(shape.points[i], pivot_point, angle)\n\n                shape.points[i].x = x\n                shape.points[i].y = y\n        else:\n            raise BadArgumentException(\"rotate\", shape_name, type(shape))\n\n        return self.visitChildren(ctx)\n\n    def scale_single_point(self, point, pivot, factor):\n        vector_x = factor * (point.x - pivot.x)\n        vector_y = factor * (point.y - pivot.y)\n\n        return pivot.x + vector_x, pivot.y + vector_y\n\n    def visitScale(self, ctx: GraphlyParser.ScaleContext):\n        shape_name = ctx.NAME(0).getText()\n        pivot_point_name = ctx.NAME(1).getText()\n\n        shape = self.get_variable(shape_name)\n        pivot_point = self.get_variable(pivot_point_name)\n\n        factor = self.visit(ctx.k)\n\n        if type(shape) == self.Point:\n            x, y = self.scale_single_point(shape, pivot_point, factor)\n\n            shape.x = x\n            shape.y = y\n        elif type(shape) == self.Segment:\n            start_x, start_y = self.scale_single_point(shape.start_point, pivot_point, factor)\n            end_x, end_y = self.scale_single_point(shape.end_point, pivot_point, factor)\n\n            shape.start_point.x = start_x\n            shape.start_point.y = start_y\n            shape.end_point.x = end_x\n            shape.end_point.y = end_y\n        elif type(shape) == self.Circle:\n            x, y = self.scale_single_point(shape.center_point, pivot_point, factor)\n\n            shape.center_point.x = x\n            shape.center_point.y = y\n            shape.radius *= abs(factor)\n        elif type(shape) == self.Polygon:\n            for i in range(len(shape.points)):\n                x, y = self.scale_single_point(shape.points[i], pivot_point, factor)\n\n                shape.points[i].x = x\n                shape.points[i].y = y\n        else:\n            raise BadArgumentException(\"scale\", shape_name, type(shape))\n\n        return self.visitChildren(ctx)\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GraphlyProgramVisitor.py b/GraphlyProgramVisitor.py
--- a/GraphlyProgramVisitor.py	(revision 82620ede7be330418b0ccadb4ea547991ec2527d)
+++ b/GraphlyProgramVisitor.py	(date 1621509227615)
@@ -70,7 +70,8 @@
             "#blue": (0, 0, 255),
             "#white": (255, 255, 255),
             "#orange": (255, 165, 0),
-            "#pink": (255, 100, 203)
+            "#pink": (255, 100, 203),
+            "#gray": (105, 105, 105)
         }
         self.screen = pygame.display.set_mode((self.SCREEN_WIDTH, self.SCREEN_HEIGHT))
 
Index: tests/dots_illusion_test.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/dots_illusion_test.txt b/tests/dots_illusion_test.txt
new file mode 100644
--- /dev/null	(date 1621509261239)
+++ b/tests/dots_illusion_test.txt	(date 1621509261239)
@@ -0,0 +1,30 @@
+-- illusion that pretends to create dots on intersections
+
+num X: 600
+
+canvas: X, X, #white
+
+num Offset: 5
+num Side: 30
+
+loop I start Side until X step Side then
+    point F1L: 0, I - Offset
+    point F1R: 0, I + Offset
+    point F2L: X, I - Offset
+    point F2R: X, I + Offset
+
+    group VerGroup: F1L, F1R, F2R, F2L
+    polygon Vertical: VerGroup
+    draw Vertical
+end
+
+loop J start Side until X step Side then
+    point F3U: J - Offset, 0
+    point F3D: J + Offset, 0
+    point F4U: J - Offset, X
+    point F4D: J + Offset, X
+
+    group HorGroup: F3U, F4U, F4D, F3D
+    polygon Horizontal: HorGroup
+    draw Horizontal
+end
\ No newline at end of file
Index: tests/square_illusion_test.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/square_illusion_test.txt b/tests/square_illusion_test.txt
new file mode 100644
--- /dev/null	(date 1621511951651)
+++ b/tests/square_illusion_test.txt	(date 1621511951651)
@@ -0,0 +1,51 @@
+-- illusion of non-parallel lines
+
+num X: 750
+num OffsetFactor: 2
+--num
+canvas: X, X, #white
+
+num Size: 20
+num SqrLen: X/Size
+point P0: 0, 0
+point P1: SqrLen, 0
+point P2: SqrLen, SqrLen
+point P3: 0, SqrLen
+
+group Points: P0, P1, P2, P3
+
+polygon Sqr: Points
+
+fill Sqr: #black
+
+loop I start (- Size - 3) until (Size + 5) step 1 then
+    loop J start (- Size - 3) until (Size + 5) step 1 then
+		check I % 2 = 0 then
+            num Offset: (OffsetFactor - J) * SqrLen/3
+
+		    check (J > 2 & J < 5) | (J > 8 & J < 11) | (J > 14 & J < 17) then
+                point P: I * SqrLen + Offset, J * SqrLen
+                place Sqr: P
+                draw Sqr
+            else then
+                point P: I * SqrLen - Offset, J * SqrLen
+                place Sqr: P
+                draw Sqr
+			end
+		end
+	end
+end
+
+loop K start 0 until Size + 1 step 1 then
+    num Offset: 0.5
+    point F1L: 0, K * SqrLen - Offset
+    point F1R: 0, K * SqrLen + Offset
+    point F2L: X, K * SqrLen - Offset
+    point F2R: X, K * SqrLen + Offset
+
+    group VerGroup: F1L, F1R, F2R, F2L
+    polygon Vertical: VerGroup
+    fill Vertical: #gray
+
+    draw Vertical
+end
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"819dd511-2bdf-42e1-8d9e-96f8f70afd7c\" name=\"Default Changelist\" comment=\"Fix bug with canvas. Remove GraphlyProgramListener permanently (final switch to visitor)\">\n      <change afterPath=\"$PROJECT_DIR$/tests/move_test.txt\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/tests/place_test.txt\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/tests/rotate_test.txt\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/tests/scale_test.txt\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Graphly (kopia).g4\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Graphly (kopia).g4\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Graphly.g4\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Graphly.g4\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Graphly.interp\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Graphly.interp\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/GraphlyParser.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/GraphlyParser.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/GraphlyProgramVisitor.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/GraphlyProgramVisitor.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/tests/basic_test1.txt\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/tests/basic_test2.txt\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/tests/basic_test3.txt\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/tests/basic_test4.txt\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/tests/variable_as_names_or_nums_test.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/tests/variable_as_names_or_nums_test.txt\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"ProjectId\" id=\"1qqZU6nqCRLlDeBHEitQScARPF6\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"819dd511-2bdf-42e1-8d9e-96f8f70afd7c\" name=\"Default Changelist\" comment=\"\" />\n      <created>1617809093386</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1617809093386</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Refactor main logic functions in GraphlyProgram class. Add several test files\">\n      <created>1619087312846</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1619087312846</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Split program into two runs. Implement canvas initialization check algorithm (first run). Refactor main program into separate files. Remove old java files\">\n      <created>1619108821734</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1619108821734</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Refactor main function\">\n      <created>1619460619299</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1619460619299</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Add exception service to visitor\">\n      <created>1619699285882</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1619699285882</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Add exception service to visitor\">\n      <created>1619699294252</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1619699294252</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Fix bug with canvas. Remove GraphlyProgramListener permanently (final switch to visitor)\">\n      <created>1619775726622</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1619775726622</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"7\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Refactor main logic functions in GraphlyProgram class. Add several test files\" />\n    <MESSAGE value=\"Split program into two runs. Implement canvas initialization check algorithm (first run). Refactor main program into separate files. Remove old java files\" />\n    <MESSAGE value=\"Refactor main function\" />\n    <MESSAGE value=\"Add exception service to visitor\" />\n    <MESSAGE value=\"Fix bug with canvas. Remove GraphlyProgramListener permanently (final switch to visitor)\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Fix bug with canvas. Remove GraphlyProgramListener permanently (final switch to visitor)\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 82620ede7be330418b0ccadb4ea547991ec2527d)
+++ b/.idea/workspace.xml	(date 1621516144245)
@@ -1,22 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="819dd511-2bdf-42e1-8d9e-96f8f70afd7c" name="Default Changelist" comment="Fix bug with canvas. Remove GraphlyProgramListener permanently (final switch to visitor)">
-      <change afterPath="$PROJECT_DIR$/tests/move_test.txt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/tests/place_test.txt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/tests/rotate_test.txt" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/tests/scale_test.txt" afterDir="false" />
+    <list default="true" id="819dd511-2bdf-42e1-8d9e-96f8f70afd7c" name="Default Changelist" comment="Add transformation methods. Slightly change grammar (remove redundancy, improve scaling)">
+      <change afterPath="$PROJECT_DIR$/tests/dots_illusion_test.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/tests/square_illusion_test.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Graphly (kopia).g4" beforeDir="false" afterPath="$PROJECT_DIR$/Graphly (kopia).g4" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Graphly.g4" beforeDir="false" afterPath="$PROJECT_DIR$/Graphly.g4" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Graphly.interp" beforeDir="false" afterPath="$PROJECT_DIR$/Graphly.interp" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/GraphlyParser.py" beforeDir="false" afterPath="$PROJECT_DIR$/GraphlyParser.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/GraphlyProgramVisitor.py" beforeDir="false" afterPath="$PROJECT_DIR$/GraphlyProgramVisitor.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/tests/basic_test1.txt" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/tests/basic_test2.txt" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/tests/basic_test3.txt" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/tests/basic_test4.txt" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/tests/variable_as_names_or_nums_test.txt" beforeDir="false" afterPath="$PROJECT_DIR$/tests/variable_as_names_or_nums_test.txt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/tests/chessboard_test.txt" beforeDir="false" afterPath="$PROJECT_DIR$/tests/chessboard_test.txt" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -99,14 +89,7 @@
       <option name="project" value="LOCAL" />
       <updated>1619699294252</updated>
     </task>
-    <task id="LOCAL-00006" summary="Fix bug with canvas. Remove GraphlyProgramListener permanently (final switch to visitor)">
-      <created>1619775726622</created>
-      <option name="number" value="00006" />
-      <option name="presentableId" value="LOCAL-00006" />
-      <option name="project" value="LOCAL" />
-      <updated>1619775726622</updated>
-    </task>
-    <option name="localTasksCounter" value="7" />
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -126,7 +109,6 @@
     <MESSAGE value="Split program into two runs. Implement canvas initialization check algorithm (first run). Refactor main program into separate files. Remove old java files" />
     <MESSAGE value="Refactor main function" />
     <MESSAGE value="Add exception service to visitor" />
-    <MESSAGE value="Fix bug with canvas. Remove GraphlyProgramListener permanently (final switch to visitor)" />
-    <option name="LAST_COMMIT_MESSAGE" value="Fix bug with canvas. Remove GraphlyProgramListener permanently (final switch to visitor)" />
+    <option name="LAST_COMMIT_MESSAGE" value="Add exception service to visitor" />
   </component>
 </project>
\ No newline at end of file
